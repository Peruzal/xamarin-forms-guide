{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Xamarin Forms Guide \u00b6 These guides are used to support the Peruzal Xamarin Forms Bootcamp instructor led training course. Our goal is to support you as you embark on your journey developing native cross mobile applications for Android and iOS. For more details regarding other courses we offer, please visit the website peruzal.com .","title":"Welcome to Xamarin Forms Guide"},{"location":"#welcome-to-xamarin-forms-guide","text":"These guides are used to support the Peruzal Xamarin Forms Bootcamp instructor led training course. Our goal is to support you as you embark on your journey developing native cross mobile applications for Android and iOS. For more details regarding other courses we offer, please visit the website peruzal.com .","title":"Welcome to Xamarin Forms Guide"},{"location":"animation/","text":"Animation \u00b6","title":"Animation"},{"location":"animation/#animation","text":"","title":"Animation"},{"location":"behaviours/","text":"Behaviors \u00b6 Behaviors lets you add functionality to controls without subclassing them. Instead the functionality is defined separately in a class that inherits from Behavior. Advantages of Using Behaviors \u00b6 Behaviors let you de-clutter your code behind files Abstract away common code that can be used across projects They let you add functionality that the control might not have, e.g adding command to controls that do not support. Add custom validation to a control, e.g validating an email address in an Entry control Add a Command to a ListView ItemSelected Event When we choose items from a ListView, an ItemSelected event is fired. We would like to add the ability to bind to a command when the ItemSelected event is fired. Create the Behavior \u00b6 We need to sub class the ListView class public class ListItemSelectedBehaviour : Behavior < ListView > { } By using the Behavior<T> we can get access to the control's properties. We need to implement two methods that are called on the control, OnAttached and OnDetached and bind the behaviors BindingContext to that of the control as follows : protected override void OnAttachedTo ( ListView bindable ) { BindingContext = bindable . BindingContext ; bindable . BindingContextChanged += Bindable_BindingContextChanged ; bindable . ItemSelected += Bindable_ItemSelected ; } protected override void OnDetachingFrom ( ListView bindable ) { base . OnDetachingFrom ( bindable ); bindable . ItemSelected -= Bindable_ItemSelected ; bindable . BindingContextChanged -= Bindable_BindingContextChanged ; } Basically we need to be able to know when the control's BindingContext changes and also to attach the relevant event. In our case, we are subscribing to the ItemSelected event when the behavior is attached to the control and removing the event when the behavior is detached from the control. Add the Relevant Events \u00b6 We will implement the events and add the relevant code when the above events are fired : void Bindable_ItemSelected ( object sender , SelectedItemChangedEventArgs e ) { if ( e . SelectedItem == null ) { return ; } if ( Command . CanExecute ( e . SelectedItem )) { Command ?. Execute ( e . SelectedItem ); } (( ListView ) sender ). SelectedItem = null ; } void Bindable_BindingContextChanged ( object sender , EventArgs e ) { if ( sender is BindableObject ListView ) { BindingContext = ( sender as BindableObject ). BindingContext ; } } We are running a Command, lets implement the Command as a property that will be available to the control : Add Properties to the Behavior \u00b6 The following will create a Bindable property of a specific type, in our case, of an ICommand public static BindableProperty CommandProperty = BindableProperty . Create ( \"CommandProperty\" , typeof ( ICommand ), typeof ( ListItemSelectedBehaviour ), null ); We also need to define the ICommand property and set and get the values of the bindable property as follows : public ICommand Command { get { return ( ICommand ) GetValue ( CommandProperty ); } set { SetValue ( CommandProperty , value ); } } Now our ListView have a Command property. Attach the Behavior \u00b6 To attach the behavior we can use the controls collection and add it under the <ListView.Behaviors> as follows : < ListView ItemsSource = \"{Binding Items}\" > < ListView . Behaviors > < local : Behaviours . ListItemSelectedBehaviour Command = \"{Binding ItemSelectedCommand}\" /> </ ListView . Behaviors > </ ListView > We need to add the local prefix in the namespace as follows : xmlns : local = \"clr-namespace:Demo\" Now we write the code for the ItemSelectedCommand .","title":"Extending Controls with Behaviours"},{"location":"behaviours/#behaviors","text":"Behaviors lets you add functionality to controls without subclassing them. Instead the functionality is defined separately in a class that inherits from Behavior.","title":"Behaviors"},{"location":"behaviours/#advantages-of-using-behaviors","text":"Behaviors let you de-clutter your code behind files Abstract away common code that can be used across projects They let you add functionality that the control might not have, e.g adding command to controls that do not support. Add custom validation to a control, e.g validating an email address in an Entry control Add a Command to a ListView ItemSelected Event When we choose items from a ListView, an ItemSelected event is fired. We would like to add the ability to bind to a command when the ItemSelected event is fired.","title":"Advantages of Using Behaviors"},{"location":"behaviours/#create-the-behavior","text":"We need to sub class the ListView class public class ListItemSelectedBehaviour : Behavior < ListView > { } By using the Behavior<T> we can get access to the control's properties. We need to implement two methods that are called on the control, OnAttached and OnDetached and bind the behaviors BindingContext to that of the control as follows : protected override void OnAttachedTo ( ListView bindable ) { BindingContext = bindable . BindingContext ; bindable . BindingContextChanged += Bindable_BindingContextChanged ; bindable . ItemSelected += Bindable_ItemSelected ; } protected override void OnDetachingFrom ( ListView bindable ) { base . OnDetachingFrom ( bindable ); bindable . ItemSelected -= Bindable_ItemSelected ; bindable . BindingContextChanged -= Bindable_BindingContextChanged ; } Basically we need to be able to know when the control's BindingContext changes and also to attach the relevant event. In our case, we are subscribing to the ItemSelected event when the behavior is attached to the control and removing the event when the behavior is detached from the control.","title":"Create the Behavior"},{"location":"behaviours/#add-the-relevant-events","text":"We will implement the events and add the relevant code when the above events are fired : void Bindable_ItemSelected ( object sender , SelectedItemChangedEventArgs e ) { if ( e . SelectedItem == null ) { return ; } if ( Command . CanExecute ( e . SelectedItem )) { Command ?. Execute ( e . SelectedItem ); } (( ListView ) sender ). SelectedItem = null ; } void Bindable_BindingContextChanged ( object sender , EventArgs e ) { if ( sender is BindableObject ListView ) { BindingContext = ( sender as BindableObject ). BindingContext ; } } We are running a Command, lets implement the Command as a property that will be available to the control :","title":"Add the Relevant Events"},{"location":"behaviours/#add-properties-to-the-behavior","text":"The following will create a Bindable property of a specific type, in our case, of an ICommand public static BindableProperty CommandProperty = BindableProperty . Create ( \"CommandProperty\" , typeof ( ICommand ), typeof ( ListItemSelectedBehaviour ), null ); We also need to define the ICommand property and set and get the values of the bindable property as follows : public ICommand Command { get { return ( ICommand ) GetValue ( CommandProperty ); } set { SetValue ( CommandProperty , value ); } } Now our ListView have a Command property.","title":"Add Properties to the Behavior"},{"location":"behaviours/#attach-the-behavior","text":"To attach the behavior we can use the controls collection and add it under the <ListView.Behaviors> as follows : < ListView ItemsSource = \"{Binding Items}\" > < ListView . Behaviors > < local : Behaviours . ListItemSelectedBehaviour Command = \"{Binding ItemSelectedCommand}\" /> </ ListView . Behaviors > </ ListView > We need to add the local prefix in the namespace as follows : xmlns : local = \"clr-namespace:Demo\" Now we write the code for the ItemSelectedCommand .","title":"Attach the Behavior"},{"location":"custom-renderers/","text":"","title":"Custom renderers"},{"location":"customizing-listview/","text":"Customizing ListView Appearance \u00b6 The ListView is one of the most used controls and offers a lot of options to customize its appearance. We will look at the following when customizing a ListView : Custom Cells Grouping Headers and Footers Row Separators Variable Height Rows","title":"Customizing ListView"},{"location":"customizing-listview/#customizing-listview-appearance","text":"The ListView is one of the most used controls and offers a lot of options to customize its appearance. We will look at the following when customizing a ListView : Custom Cells Grouping Headers and Footers Row Separators Variable Height Rows","title":"Customizing ListView Appearance"},{"location":"data-binding/","text":"Databinding \u00b6 Data bindings allow properties of two objects to be linked so that a change in one causes a change in the other. Setting up Binding \u00b6 Databinding can be set both in code and in XAML. In both cases, it involves setting the BindingContext which is the source object. In XAML setting the BindingContext could be done in the following ways: BindingContext in the code behind file or using property tags Using a static resource with StaticResource or with markup extension x:Static View to view data binding \u00b6 In this example we will set the slider as the source and we use the BindingContext on the slider and use the markup extension x:Reference to refer to the source object. Within the slider we need to bind the Rotation property to the slider's Value property. Since the slider have many properties <ContentPage xmlns= \"http://xamarin.com/schemas/2014/forms\" xmlns:x= \"http://schemas.microsoft.com/winfx/2009/xaml\" x:Class= \"XamlSamples.SliderBindingsPage\" Title= \"Slider Bindings Page\" > <StackLayout> <Label Text= \"ROTATION\" BindingContext= \"{x:Reference Name=slider}\" Rotation= \"{Binding Path=Value}\" FontAttributes= \"Bold\" FontSize= \"Large\" HorizontalOptions= \"Center\" VerticalOptions= \"CenterAndExpand\" /> <Slider x:Name= \"slider\" Maximum= \"360\" VerticalOptions= \"CenterAndExpand\" /> <Label BindingContext= \"{x:Reference slider}\" Text= \"{Binding Value, StringFormat='The angle is {0:F0} degrees'}\" FontAttributes= \"Bold\" FontSize= \"Large\" HorizontalOptions= \"Center\" VerticalOptions= \"CenterAndExpand\" /> </StackLayout> </ContentPage> Binding Modes \u00b6 We can change the Mode of the data binding using one of these options : Default OneWay \u2014 values are transferred from the source to the target OneWayToSource \u2014 values are transferred from the target to the source TwoWay \u2014 values are transferred both ways between source and target Binding ListView \u00b6 We can use the power of data binding to bind to the ItemSource of the ListView. Here is a simple ListView bound to a collection of months.","title":"Data Binding"},{"location":"data-binding/#databinding","text":"Data bindings allow properties of two objects to be linked so that a change in one causes a change in the other.","title":"Databinding"},{"location":"data-binding/#setting-up-binding","text":"Databinding can be set both in code and in XAML. In both cases, it involves setting the BindingContext which is the source object. In XAML setting the BindingContext could be done in the following ways: BindingContext in the code behind file or using property tags Using a static resource with StaticResource or with markup extension x:Static","title":"Setting up Binding"},{"location":"data-binding/#view-to-view-data-binding","text":"In this example we will set the slider as the source and we use the BindingContext on the slider and use the markup extension x:Reference to refer to the source object. Within the slider we need to bind the Rotation property to the slider's Value property. Since the slider have many properties <ContentPage xmlns= \"http://xamarin.com/schemas/2014/forms\" xmlns:x= \"http://schemas.microsoft.com/winfx/2009/xaml\" x:Class= \"XamlSamples.SliderBindingsPage\" Title= \"Slider Bindings Page\" > <StackLayout> <Label Text= \"ROTATION\" BindingContext= \"{x:Reference Name=slider}\" Rotation= \"{Binding Path=Value}\" FontAttributes= \"Bold\" FontSize= \"Large\" HorizontalOptions= \"Center\" VerticalOptions= \"CenterAndExpand\" /> <Slider x:Name= \"slider\" Maximum= \"360\" VerticalOptions= \"CenterAndExpand\" /> <Label BindingContext= \"{x:Reference slider}\" Text= \"{Binding Value, StringFormat='The angle is {0:F0} degrees'}\" FontAttributes= \"Bold\" FontSize= \"Large\" HorizontalOptions= \"Center\" VerticalOptions= \"CenterAndExpand\" /> </StackLayout> </ContentPage>","title":"View to view data binding"},{"location":"data-binding/#binding-modes","text":"We can change the Mode of the data binding using one of these options : Default OneWay \u2014 values are transferred from the source to the target OneWayToSource \u2014 values are transferred from the target to the source TwoWay \u2014 values are transferred both ways between source and target","title":"Binding Modes"},{"location":"data-binding/#binding-listview","text":"We can use the power of data binding to bind to the ItemSource of the ListView. Here is a simple ListView bound to a collection of months.","title":"Binding ListView"},{"location":"dependency-injection/","text":"Dependency Injection \u00b6 DependencyService allows apps to call into platform-specific functionality from shared code. This functionality enables Xamarin.Forms apps to do anything that a native app can do. DependencyService is a dependency resolver . In practice, an interface is defined and DependencyService finds the correct implementation of that interface from the various platform projects. Setting Up DependencyService \u00b6 Xamarin.Forms apps need four components to use DependencyService : Interface \u2013 The required functionality is defined by an interface in shared code. Implementation Per Platform \u2013 Classes that implement the interface must be added to each platform project. Registration \u2013 Each implementing class must be registered with DependencyService via a metadata attribute. Registration enables DependencyService to find the implementing class and supply it in place of the interface at run time. Call to DependencyService \u2013 Shared code needs to explicitly call DependencyService to ask for implementations of the interface. Danger Note that implementations must be provided for each platform project in your solution. Platform projects without implementations will fail at runtime. Interface Definition \u00b6 The interface is defined in the Xamarin Forms project. We are going to define an interface to get the path for the SQLite database. Each platform will need to provide the concrete implementation. IFileHelper.cs public interface IFileHelper { string GetLocalPath ( string filename ); } Implementation \u00b6 On each platform we need to provide the implementation for the interface definition. Android Implementation \u00b6 This code goes in the Android project. FileHelper.cs public class FileHelper : IFileHelper { public string GetLocalPath ( string filename ) { var documentsFolder = Environment . GetFolderPath ( Environment . SpecialFolder . Personal ); return Path . Combine ( documentsFolder , filename ); } } iOS Implementation \u00b6 This code goes in the iOS project. FileHelper.cs public class FileHelper : IFileHelper { public string GetLocalPath ( string filename ) { //Get path of the document folder var documentFolder = Environment . GetFolderPath ( Environment . SpecialFolder . Personal ); //Get path of the Library folder var libraryFolder = Path . Combine ( documentFolder , \"..\" , \"Library\" , \"Databases\" ); if (! Directory . Exists ( libraryFolder )) { Directory . CreateDirectory ( libraryFolder ); } return Path . Combine ( libraryFolder , filename ); } } Registration \u00b6 Each implementation of the interface needs to be registered with DependencyService with a metadata attribute. The following code registers the implementation for iOS : [assembly: Dependency(typeof(FileHelper))] namespace DataBindingDemo.iOS { public class FileHelper : IFileHelper { ... } } and for Android : [assembly: Dependency(typeof(FileHelper))] namespace DataBindingDemo.Droid { public class FileHelper : IFileHelper { ... } } Call to DependencyService \u00b6 Once the project has been set up with a common interface and implementations for each platform, use DependencyService to get the right implementation at runtime : // Resolve the FileHelper var fileHelper = DependencyService . Get < IFileHelper >(); Note Using DependencyService.Get<IFileHelper>() we can resolve the platform specific code for the FileHelper . On iOS it will call the iOS specific FileHelper code and on Android, it will resolve to the Android specific Filehelper code we defined.","title":"Dependency Injection"},{"location":"dependency-injection/#dependency-injection","text":"DependencyService allows apps to call into platform-specific functionality from shared code. This functionality enables Xamarin.Forms apps to do anything that a native app can do. DependencyService is a dependency resolver . In practice, an interface is defined and DependencyService finds the correct implementation of that interface from the various platform projects.","title":"Dependency Injection"},{"location":"dependency-injection/#setting-up-dependencyservice","text":"Xamarin.Forms apps need four components to use DependencyService : Interface \u2013 The required functionality is defined by an interface in shared code. Implementation Per Platform \u2013 Classes that implement the interface must be added to each platform project. Registration \u2013 Each implementing class must be registered with DependencyService via a metadata attribute. Registration enables DependencyService to find the implementing class and supply it in place of the interface at run time. Call to DependencyService \u2013 Shared code needs to explicitly call DependencyService to ask for implementations of the interface. Danger Note that implementations must be provided for each platform project in your solution. Platform projects without implementations will fail at runtime.","title":"Setting Up DependencyService"},{"location":"dependency-injection/#interface-definition","text":"The interface is defined in the Xamarin Forms project. We are going to define an interface to get the path for the SQLite database. Each platform will need to provide the concrete implementation. IFileHelper.cs public interface IFileHelper { string GetLocalPath ( string filename ); }","title":"Interface Definition"},{"location":"dependency-injection/#implementation","text":"On each platform we need to provide the implementation for the interface definition.","title":"Implementation"},{"location":"dependency-injection/#android-implementation","text":"This code goes in the Android project. FileHelper.cs public class FileHelper : IFileHelper { public string GetLocalPath ( string filename ) { var documentsFolder = Environment . GetFolderPath ( Environment . SpecialFolder . Personal ); return Path . Combine ( documentsFolder , filename ); } }","title":"Android Implementation"},{"location":"dependency-injection/#ios-implementation","text":"This code goes in the iOS project. FileHelper.cs public class FileHelper : IFileHelper { public string GetLocalPath ( string filename ) { //Get path of the document folder var documentFolder = Environment . GetFolderPath ( Environment . SpecialFolder . Personal ); //Get path of the Library folder var libraryFolder = Path . Combine ( documentFolder , \"..\" , \"Library\" , \"Databases\" ); if (! Directory . Exists ( libraryFolder )) { Directory . CreateDirectory ( libraryFolder ); } return Path . Combine ( libraryFolder , filename ); } }","title":"iOS Implementation"},{"location":"dependency-injection/#registration","text":"Each implementation of the interface needs to be registered with DependencyService with a metadata attribute. The following code registers the implementation for iOS : [assembly: Dependency(typeof(FileHelper))] namespace DataBindingDemo.iOS { public class FileHelper : IFileHelper { ... } } and for Android : [assembly: Dependency(typeof(FileHelper))] namespace DataBindingDemo.Droid { public class FileHelper : IFileHelper { ... } }","title":"Registration"},{"location":"dependency-injection/#call-to-dependencyservice","text":"Once the project has been set up with a common interface and implementations for each platform, use DependencyService to get the right implementation at runtime : // Resolve the FileHelper var fileHelper = DependencyService . Get < IFileHelper >(); Note Using DependencyService.Get<IFileHelper>() we can resolve the platform specific code for the FileHelper . On iOS it will call the iOS specific FileHelper code and on Android, it will resolve to the Android specific Filehelper code we defined.","title":"Call to DependencyService"},{"location":"design-resources/","text":"Design Resources \u00b6 Invision App \u00b6 Invision Sketches \u00b6 Sektch App Sources \u00b6 Sketch \u00b6 Adobe XD \u00b6 Balsamiq Mockups \u00b6 Proto.io \u00b6","title":"Design Resources"},{"location":"design-resources/#design-resources","text":"","title":"Design Resources"},{"location":"design-resources/#invision-app","text":"","title":"Invision App"},{"location":"design-resources/#invision-sketches","text":"","title":"Invision Sketches"},{"location":"design-resources/#sektch-app-sources","text":"","title":"Sektch App Sources"},{"location":"design-resources/#sketch","text":"","title":"Sketch"},{"location":"design-resources/#adobe-xd","text":"","title":"Adobe XD"},{"location":"design-resources/#balsamiq-mockups","text":"","title":"Balsamiq Mockups"},{"location":"design-resources/#protoio","text":"","title":"Proto.io"},{"location":"introduction/","text":"Developing Android and iOS Mobile Apps with Xamarin Forms \u00b6 What is Xamarin Forms \u00b6 Xamarin Forms is a UI framework that is used to develop native cross platform mobile apps for Android, iOS and Windows UWP using C# programming language. Visual Studio is the primary IDE(Integrated Development Environment) used for developing Xamarin Forms applications. Why choose Xamarin Forms \u00b6 One language to rule them all, C# . You don't need to learn Java and Kotlin for Android or Objective-C and Swift for iOS. Save cost. See below how much it would cost to develop a typical app for both Android and iOS. Quick to market. With Xamarin Forms, you develop once and deploy to both platforms. When not to use Xamarin Forms \u00b6 When you need pixel perfect apps, Xamarin Forms is not the tool to use. Xamarin Forms is not good for building games Apps that depend with a lot of native functionality for one platform are not good candidates for developing Xamarin Forms applications. History \u00b6 Xamarin was found by Nat Friedman, Miguel de Icaza and Joseph Hill in May 2011 and was later bought by Microsoft in 2016. Xamarin Studio was used on Mac and a separate plugin for Visual Studio was used to develop on Wndows. When Microsoft purchased Xamarin they made Xamarin open source and removed payment options. This helped the adoption of Xamarin. Microsoft then integrated Xamarin into Visual Studio. You can now develop on both Windows and Mac with Visual Studio for Windows and Visual Studio for Mac. Why was Xamarin not Popular \u00b6 Although a powerful platform, Xamarin was not widely known compared to the other cross platform development tools, and here are some of the reasons: Xamarin license for each platform, one for Android and another for iOS Xamarin Visual Studio plugin license Single developer license Before the acquisition by Microsoft, Xamarin was licensed per platform per developer. You would need two licenses to develop both Android and iOS and another license to use Xamarin for Visual Studio. If you used both a Mac and a PC you would need in total 4 licenses. This was really expensive and only corporates could afford to spend that much money on licensing the software. Platforms \u00b6 Xamarin Forms is available on both Windows and Mac OS. You can build Xamarin Forms applications using Visual Studio on Windows and Visual Studio for Mac on OS X. What is Traditional Xamarin Development? \u00b6 The traditional approach also called the silo approach to Xamarin development is to develop the UI natively for each platform and share business logic. This is different to Xamarin Forms approach. With Xamarin forms, you share the UI code and also the business logic. Which Xamarin approach is best for your app? \u00b6 Xamarin.Forms is best for \u00b6 Apps where code sharing is more important than custom UI Apps that require little platform-specific functionality Developers comfortable with XAML Xamarin.iOS & Xamarin.Android are best for: \u00b6 Apps with interactions that require native behavior Apps that use many platform-specific APIs Apps where custom UI is more important than code sharing","title":"Introduction to Xamarin Forms"},{"location":"introduction/#developing-android-and-ios-mobile-apps-with-xamarin-forms","text":"","title":"Developing Android and iOS Mobile Apps with Xamarin Forms"},{"location":"introduction/#what-is-xamarin-forms","text":"Xamarin Forms is a UI framework that is used to develop native cross platform mobile apps for Android, iOS and Windows UWP using C# programming language. Visual Studio is the primary IDE(Integrated Development Environment) used for developing Xamarin Forms applications.","title":"What is Xamarin Forms"},{"location":"introduction/#why-choose-xamarin-forms","text":"One language to rule them all, C# . You don't need to learn Java and Kotlin for Android or Objective-C and Swift for iOS. Save cost. See below how much it would cost to develop a typical app for both Android and iOS. Quick to market. With Xamarin Forms, you develop once and deploy to both platforms.","title":"Why choose Xamarin Forms"},{"location":"introduction/#when-not-to-use-xamarin-forms","text":"When you need pixel perfect apps, Xamarin Forms is not the tool to use. Xamarin Forms is not good for building games Apps that depend with a lot of native functionality for one platform are not good candidates for developing Xamarin Forms applications.","title":"When not to use Xamarin Forms"},{"location":"introduction/#history","text":"Xamarin was found by Nat Friedman, Miguel de Icaza and Joseph Hill in May 2011 and was later bought by Microsoft in 2016. Xamarin Studio was used on Mac and a separate plugin for Visual Studio was used to develop on Wndows. When Microsoft purchased Xamarin they made Xamarin open source and removed payment options. This helped the adoption of Xamarin. Microsoft then integrated Xamarin into Visual Studio. You can now develop on both Windows and Mac with Visual Studio for Windows and Visual Studio for Mac.","title":"History"},{"location":"introduction/#why-was-xamarin-not-popular","text":"Although a powerful platform, Xamarin was not widely known compared to the other cross platform development tools, and here are some of the reasons: Xamarin license for each platform, one for Android and another for iOS Xamarin Visual Studio plugin license Single developer license Before the acquisition by Microsoft, Xamarin was licensed per platform per developer. You would need two licenses to develop both Android and iOS and another license to use Xamarin for Visual Studio. If you used both a Mac and a PC you would need in total 4 licenses. This was really expensive and only corporates could afford to spend that much money on licensing the software.","title":"Why was Xamarin not Popular"},{"location":"introduction/#platforms","text":"Xamarin Forms is available on both Windows and Mac OS. You can build Xamarin Forms applications using Visual Studio on Windows and Visual Studio for Mac on OS X.","title":"Platforms"},{"location":"introduction/#what-is-traditional-xamarin-development","text":"The traditional approach also called the silo approach to Xamarin development is to develop the UI natively for each platform and share business logic. This is different to Xamarin Forms approach. With Xamarin forms, you share the UI code and also the business logic.","title":"What is Traditional Xamarin Development?"},{"location":"introduction/#which-xamarin-approach-is-best-for-your-app","text":"","title":"Which Xamarin approach is best for your app?"},{"location":"introduction/#xamarinforms-is-best-for","text":"Apps where code sharing is more important than custom UI Apps that require little platform-specific functionality Developers comfortable with XAML","title":"Xamarin.Forms is best for"},{"location":"introduction/#xamarinios-xamarinandroid-are-best-for","text":"Apps with interactions that require native behavior Apps that use many platform-specific APIs Apps where custom UI is more important than code sharing","title":"Xamarin.iOS &amp; Xamarin.Android are best for:"},{"location":"mvvm/","text":"Model View ViewModel (MVVM) \u00b6 The MVVM pattern enforces separation between the UI, the view, the data, model and the interaction between the model and the view, view-model. The View and the ViewModel are connected through data bindings. A Simple ViewModel \u00b6 To demonstrate MVVM we will create a simple ViewModel to display the current time. In this instance we won't have a Model since the the app is so simple however we will create the View, UI and the ViewModel. Define the ViewModel \u00b6 ClockViewModel.cs using System ; using System.ComponentModel ; using System.Runtime.CompilerServices ; using Xamarin.Forms ; namespace Models { public class ClockViewModel : INotifyPropertyChanged { public event PropertyChangedEventHandler PropertyChanged ; DateTime dateTime ; public ClockViewModel () { this . DateTime = DateTime . Now ; Device . StartTimer ( TimeSpan . FromSeconds ( 1 ), () => { this . DateTime = DateTime . Now ; return true ; }); } public DateTime DateTime { get { return dateTime ; } set { if ( value != dateTime ) { dateTime = value ; OnPropertyChanged (); } } } public void OnPropertyChanged ([ CallerMemberName ] string propertyName = null ){ PropertyChanged ?. Invoke ( this , new PropertyChangedEventArgs ( propertyName )); } } } We implement the INotifyPropertyChanged interface. It contains one property PropertyChanged event. We call the event each time the property is set. This is the glue for the data binding. Define the View \u00b6 We define the UI in XAML and use data binding to bind the ViewModel properties to the label. The BindingContext is define in a ResourceDictionary . Note that we could have set this up in code, but instead we decided to set it up in XAML. DemoView.xaml <?xml version=\"1.0\" encoding=\"UTF-8\"?> <ContentPage xmlns= \"http://xamarin.com/schemas/2014/forms\" xmlns:sys= \"clr-namespace:System;assembly=mscorlib\" xmlns:local= \"clr-namespace:Models\" xmlns:x= \"http://schemas.microsoft.com/winfx/2009/xaml\" x:Class= \"CommonViewsApp.DataBinding.DataBindingDemoPage\" > <ContentPage.Resources> <ResourceDictionary> <local:ClockViewModel x:Key= \"vm\" /> </ResourceDictionary> </ContentPage.Resources> <StackLayout> <Label BindingContext= \"{x:StaticResource vm}\" Text= \"{Binding DateTime, StringFormat='{0:T}'}\" /> </StackLayout> </ContentPage> We first define the namespace with the Model using the following xmlns:local=\"clr-namespace:Models\" . We instantiated the ClockViewModel in in a ResourceDictionary with . Notice that we defined a key vm that we will use later to reference the ViewModel . We did bind the Label to the ViewModel using BindingContext=\"{x:StaticResource vm}\" . and the Label's Text property to the DateTime property within the ViewModel with Text=\"{Binding DateTime, StringFormat='{0:T}'}\" and also formatted the date to only get the time.","title":"Model View-View Model(MVVM)"},{"location":"mvvm/#model-view-viewmodel-mvvm","text":"The MVVM pattern enforces separation between the UI, the view, the data, model and the interaction between the model and the view, view-model. The View and the ViewModel are connected through data bindings.","title":"Model View ViewModel (MVVM)"},{"location":"mvvm/#a-simple-viewmodel","text":"To demonstrate MVVM we will create a simple ViewModel to display the current time. In this instance we won't have a Model since the the app is so simple however we will create the View, UI and the ViewModel.","title":"A Simple ViewModel"},{"location":"mvvm/#define-the-viewmodel","text":"ClockViewModel.cs using System ; using System.ComponentModel ; using System.Runtime.CompilerServices ; using Xamarin.Forms ; namespace Models { public class ClockViewModel : INotifyPropertyChanged { public event PropertyChangedEventHandler PropertyChanged ; DateTime dateTime ; public ClockViewModel () { this . DateTime = DateTime . Now ; Device . StartTimer ( TimeSpan . FromSeconds ( 1 ), () => { this . DateTime = DateTime . Now ; return true ; }); } public DateTime DateTime { get { return dateTime ; } set { if ( value != dateTime ) { dateTime = value ; OnPropertyChanged (); } } } public void OnPropertyChanged ([ CallerMemberName ] string propertyName = null ){ PropertyChanged ?. Invoke ( this , new PropertyChangedEventArgs ( propertyName )); } } } We implement the INotifyPropertyChanged interface. It contains one property PropertyChanged event. We call the event each time the property is set. This is the glue for the data binding.","title":"Define the ViewModel"},{"location":"mvvm/#define-the-view","text":"We define the UI in XAML and use data binding to bind the ViewModel properties to the label. The BindingContext is define in a ResourceDictionary . Note that we could have set this up in code, but instead we decided to set it up in XAML. DemoView.xaml <?xml version=\"1.0\" encoding=\"UTF-8\"?> <ContentPage xmlns= \"http://xamarin.com/schemas/2014/forms\" xmlns:sys= \"clr-namespace:System;assembly=mscorlib\" xmlns:local= \"clr-namespace:Models\" xmlns:x= \"http://schemas.microsoft.com/winfx/2009/xaml\" x:Class= \"CommonViewsApp.DataBinding.DataBindingDemoPage\" > <ContentPage.Resources> <ResourceDictionary> <local:ClockViewModel x:Key= \"vm\" /> </ResourceDictionary> </ContentPage.Resources> <StackLayout> <Label BindingContext= \"{x:StaticResource vm}\" Text= \"{Binding DateTime, StringFormat='{0:T}'}\" /> </StackLayout> </ContentPage> We first define the namespace with the Model using the following xmlns:local=\"clr-namespace:Models\" . We instantiated the ClockViewModel in in a ResourceDictionary with . Notice that we defined a key vm that we will use later to reference the ViewModel . We did bind the Label to the ViewModel using BindingContext=\"{x:StaticResource vm}\" . and the Label's Text property to the DateTime property within the ViewModel with Text=\"{Binding DateTime, StringFormat='{0:T}'}\" and also formatted the date to only get the time.","title":"Define the View"},{"location":"networking/","text":"Networking \u00b6 We can data from a remote API using HTTP. Using REST API we can get and create data. Permission \u00b6 Android To make network calls on Android you will need to have the INTERNET permission. On the Android project, add the following permission in the AndroidManifest.xml <uses-permission android:name=\"android.permission.INTERNET\" /> . iOS On iOS you will just need to make sure that the API is using https . If the url is http , you will need to add some configuration to the Info.plist file. Performing a GET Request \u00b6 Let's retrieve a random joke from the API url http://api.icndb.com/jokes/random . We use the GetStringAsync method of the HttpClient class as follows : using ( var client = new HttpClient ()) { var content = await client . GetStringAsync ( \"http://api.icndb.com/jokes/random\" ); Console . WriteLine ( content ); } Performing a POST Request \u00b6 To send data to the server you use the HTTP form data and send the parameters as form url encoded using the FormUrlEncodedContent class. The parameters will be sent as key/value pairs. We use the PostAsync method of the HttpClient class. using ( var client = new HttpClient ()) { client . BaseAddress = new Uri ( \"http://api.peruzal.com/\" ); // Create a list of params var content = new FormUrlEncodedContent ( new [] { // The parameters to post , in a key / value pair new KeyValuePair < string , string > ( \"title\" , \"Dawn of the Planet Earth\" ), new KeyValuePair < string , string > ( \"category\" , \"Sci-Fi\" ) }); // Make the network call to post var result = await client . PostAsync ( \"/api/movie\" , content ); string resultContent = await result . Content . ReadAsStringAsync (); Console . WriteLine ( resultContent ); } Post JSON \u00b6 Instead of sending the content as form url encoded, we can post the body of the content as JSON as follows: var content = new StringContent ( jsonObject . ToString (), Encoding . UTF8 , \"application/json\" ); var result = await client . PostAsync ( url , content ). Result ; Posting form data \u00b6 We can post form data using the FormUrlEncodedContent as follows: var content = new FormUrlEncodedContent ( new List < KeyValuePair < string , string >>() { new KeyValuePair < string , string >( \"username\" , entryUsername . Text ), new KeyValuePair < string , string >( \"password\" , entryPassword . Text ) }); var result = await client . PostAsync ( url , content ); Send Headers \u00b6 To send the headers, we add the headers as a key value pair in the DefaultRequestHeaders collection as follows : private Task < string > fetchMovies (){ var client = new HttpClient (); //Add the header as a key value pair client . DefaultRequestHeaders . Add ( \"X-Parse-Application-Id\" , \"Value of header here\" ); return client . GetStringAsync ( \"https://parse.peruzal.com/parse/classes/Movie/\" ); } Note The header name is X-Parse-Application-Id and the value of the header is Value of header here .","title":"Networking"},{"location":"networking/#networking","text":"We can data from a remote API using HTTP. Using REST API we can get and create data.","title":"Networking"},{"location":"networking/#permission","text":"Android To make network calls on Android you will need to have the INTERNET permission. On the Android project, add the following permission in the AndroidManifest.xml <uses-permission android:name=\"android.permission.INTERNET\" /> . iOS On iOS you will just need to make sure that the API is using https . If the url is http , you will need to add some configuration to the Info.plist file.","title":"Permission"},{"location":"networking/#performing-a-get-request","text":"Let's retrieve a random joke from the API url http://api.icndb.com/jokes/random . We use the GetStringAsync method of the HttpClient class as follows : using ( var client = new HttpClient ()) { var content = await client . GetStringAsync ( \"http://api.icndb.com/jokes/random\" ); Console . WriteLine ( content ); }","title":"Performing a GET Request"},{"location":"networking/#performing-a-post-request","text":"To send data to the server you use the HTTP form data and send the parameters as form url encoded using the FormUrlEncodedContent class. The parameters will be sent as key/value pairs. We use the PostAsync method of the HttpClient class. using ( var client = new HttpClient ()) { client . BaseAddress = new Uri ( \"http://api.peruzal.com/\" ); // Create a list of params var content = new FormUrlEncodedContent ( new [] { // The parameters to post , in a key / value pair new KeyValuePair < string , string > ( \"title\" , \"Dawn of the Planet Earth\" ), new KeyValuePair < string , string > ( \"category\" , \"Sci-Fi\" ) }); // Make the network call to post var result = await client . PostAsync ( \"/api/movie\" , content ); string resultContent = await result . Content . ReadAsStringAsync (); Console . WriteLine ( resultContent ); }","title":"Performing a POST Request"},{"location":"networking/#post-json","text":"Instead of sending the content as form url encoded, we can post the body of the content as JSON as follows: var content = new StringContent ( jsonObject . ToString (), Encoding . UTF8 , \"application/json\" ); var result = await client . PostAsync ( url , content ). Result ;","title":"Post JSON"},{"location":"networking/#posting-form-data","text":"We can post form data using the FormUrlEncodedContent as follows: var content = new FormUrlEncodedContent ( new List < KeyValuePair < string , string >>() { new KeyValuePair < string , string >( \"username\" , entryUsername . Text ), new KeyValuePair < string , string >( \"password\" , entryPassword . Text ) }); var result = await client . PostAsync ( url , content );","title":"Posting form data"},{"location":"networking/#send-headers","text":"To send the headers, we add the headers as a key value pair in the DefaultRequestHeaders collection as follows : private Task < string > fetchMovies (){ var client = new HttpClient (); //Add the header as a key value pair client . DefaultRequestHeaders . Add ( \"X-Parse-Application-Id\" , \"Value of header here\" ); return client . GetStringAsync ( \"https://parse.peruzal.com/parse/classes/Movie/\" ); } Note The header name is X-Parse-Application-Id and the value of the header is Value of header here .","title":"Send Headers"},{"location":"platform-specifics/","text":"Use Safe Area \u00b6 <?xml version=\"1.0\" encoding=\"UTF-8\"?> <ContentPage xmlns= \"http://xamarin.com/schemas/2014/forms\" xmlns:x= \"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:ios= \"clr-namespace:Xamarin.Forms.PlatformConfiguration.iOSSpecific;assembly=Xamarin.Forms.Core\" ios:Page.UseSafeArea= \"true\" > using Xamarin.Forms.PlatformConfiguration.iOSSpecific ; using Xamarin.Forms ; namespace iPhoneX { public partial class ItemsPage : ContentPage { public ItemsPage () { InitializeComponent (); On < Xamarin . Forms . PlatformConfiguration . iOS >(). SetUseSafeArea ( true ); } } } C # On < Xamarin . Forms . PlatformConfiguration . iOS >(). SetPrefersLargeTitles ( true ); 1 On < Xamarin . Forms . PlatformConfiguration . iOS >(). SetPrefersLargeTitles ( true ); public partial class ItemsPage : ContentPage { public ItemsPage () { InitializeComponent (); On < Xamarin . Forms . PlatformConfiguration . iOS >(). SetLargeTitleDisplay ( LargeTitleDisplayMode . Never ); } ... }","title":"Platform Specifics"},{"location":"platform-specifics/#use-safe-area","text":"<?xml version=\"1.0\" encoding=\"UTF-8\"?> <ContentPage xmlns= \"http://xamarin.com/schemas/2014/forms\" xmlns:x= \"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:ios= \"clr-namespace:Xamarin.Forms.PlatformConfiguration.iOSSpecific;assembly=Xamarin.Forms.Core\" ios:Page.UseSafeArea= \"true\" > using Xamarin.Forms.PlatformConfiguration.iOSSpecific ; using Xamarin.Forms ; namespace iPhoneX { public partial class ItemsPage : ContentPage { public ItemsPage () { InitializeComponent (); On < Xamarin . Forms . PlatformConfiguration . iOS >(). SetUseSafeArea ( true ); } } } C # On < Xamarin . Forms . PlatformConfiguration . iOS >(). SetPrefersLargeTitles ( true ); 1 On < Xamarin . Forms . PlatformConfiguration . iOS >(). SetPrefersLargeTitles ( true ); public partial class ItemsPage : ContentPage { public ItemsPage () { InitializeComponent (); On < Xamarin . Forms . PlatformConfiguration . iOS >(). SetLargeTitleDisplay ( LargeTitleDisplayMode . Never ); } ... }","title":"Use Safe Area"},{"location":"tips/","text":"Tips \u00b6 JSON Server \u00b6 Tunnelling to localhost with ngrok \u00b6 Deploying on iOS Physical Device with Personal Developer Account \u00b6","title":"Tips"},{"location":"tips/#tips","text":"","title":"Tips"},{"location":"tips/#json-server","text":"","title":"JSON Server"},{"location":"tips/#tunnelling-to-localhost-with-ngrok","text":"","title":"Tunnelling to localhost with ngrok"},{"location":"tips/#deploying-on-ios-physical-device-with-personal-developer-account","text":"","title":"Deploying on iOS Physical Device with Personal Developer Account"},{"location":"ui-styles/","text":"Styling Apps \u00b6 Styling a Xamarin.Forms app is traditionally accomplished by using the Style class to group a collection of property values into one object that can then be applied to multiple visual element instances. This helps to reduce repetitive markup, and allows an apps appearance to be more easily changed. Styles are defined in the ResourceDictionary under Resouces in a XAML file. Types of Styles \u00b6 They are different types of styles than can be used in a Xamarin Forms apps : Explicit Styles Implicit Styles Global Styles Dynamic Styles Device Styles Explicit Styles \u00b6 Explicit styles need to be explicitly referenced for a control and also contains a key when they are defined. To define an explicit style, add a key to the Style definition. <Style x:Key= \"TransparentButtonStyle\" TargetType= \"Button\" > ... </Style> We are defining a style with a key TransparentButtonStyle for the Button class. Note When defining styles, the TargetType is a required property. You can not define a style without a TargetType . We can then use the various Setter 's to define the properties we need for a style. The following defines a button style with a transparent background with a thin gray border : <ContentPage.Resources> <ResourceDictionary> <Style x:Key= \"TransparentButtonStyle\" TargetType= \"Button\" > <Setter Property= \"BackgroundColor\" Value= \"Transparent\" /> <Setter Property= \"BorderColor\" Value= \"Silver\" /> <Setter Property= \"BorderWidth\" Value= \"1\" /> <Setter Property= \"BorderRadius\" Value= \"2\" /> <Setter Property= \"TextColor\" Value= \"Gray\" /> </Style> </ResourceDictionary> </ContentPage.Resources> Note Note that in this instance the style is defined within the ContentPage . When the same style is defined in the App XAML file then it becomes a global style. This style is only available within the ContentPage its defined on. Applying the Explicit Style \u00b6 To apply the style to the control we can reference it as a StaticResource using the Style property as follows : <Button Text= \"Explicit Style\" Style= \"{StaticResource TransparentButtonStyle}\" /> Implicit Styles \u00b6 Implicit styles do not specify a key when they are defined. The style will be applied automatically to all controls of the specified TargetType . We can change the above style and just remove the Targettype to make it an implicit style as follows : <ContentPage.Resources> <ResourceDictionary> <Style TargetType= \"Button\" > <Setter Property= \"BackgroundColor\" Value= \"Transparent\" /> <Setter Property= \"BorderColor\" Value= \"Silver\" /> <Setter Property= \"BorderWidth\" Value= \"1\" /> <Setter Property= \"BorderRadius\" Value= \"2\" /> <Setter Property= \"TextColor\" Value= \"Gray\" /> </Style> </ResourceDictionary> </ContentPage.Resources> Global Styles \u00b6 The global styles are defined in the App class's XAML file. The styles will be available to the entire application. The global styles can be either implicit or explicit. We have changed the location of the implicit style previously defined and placed the style in the application's XAML file : <Application.Resources> <ResourceDictionary> <Color x:Key= \"ColorPrimary\" > #CC0033 </Color> <Color x:Key= \"ColorPrimaryDark\" > #FFF </Color> <Style TargetType= \"Button\" > <Setter Property= \"BackgroundColor\" Value= \"Transparent\" /> <Setter Property= \"BorderColor\" Value= \"Silver\" /> <Setter Property= \"BorderWidth\" Value= \"1\" /> <Setter Property= \"BorderRadius\" Value= \"2\" /> <Setter Property= \"TextColor\" Value= \"Gray\" /> </Style> </ResourceDictionary> </Application.Resources> Note Note that the style in now defined in the ResourceDictionary under the <Application.Resources> . The styles defined here and resources are available to the entire app. We can also define explicit styles by assigning a key to the style as follows : <Application.Resources> <ResourceDictionary> <Color x:Key= \"ColorPrimary\" > #CC0033 </Color> <Color x:Key= \"ColorPrimaryDark\" > #FFF </Color> <Style x:Key= \"TransparentButtonStyle\" TargetType= \"Button\" > <Setter Property= \"BackgroundColor\" Value= \"Transparent\" /> <Setter Property= \"BorderColor\" Value= \"Silver\" /> <Setter Property= \"BorderWidth\" Value= \"1\" /> <Setter Property= \"BorderRadius\" Value= \"2\" /> <Setter Property= \"TextColor\" Value= \"Gray\" /> </Style> </ResourceDictionary> </Application.Resources> Note Note that we have changed the implicit style to an explicit style by assigning a key to the style as follows, <Style x:Key=\"TransparentButtonStyle\" TargetType=\"Button\"> . We can access the style the same way anywhere within the app. Dynamic Styles \u00b6 We referencing styles using the StaticResource the styles are only read once. This means if the style does change during runtime, the app will not update the style. We simply change how a style is referenced by using the DynamicResource XAML extension instead. This will keep a reference to the style and be updated when the style changes. We are going to first show an example of reading a resource and then do the same for the style : <ResourceDictionary> <x:String x:Key= \"CurrentDate\" > Will show a date if accessed dynamically </x:String> </ResourceDictionary> We define a string resource and assign a key. We are going to reference the string using the key as follows : <Label Text= \"{DynamicResource CurrentDate}\" /> Initially the text will be displayed but we are going to change the resource in code as follows : Device . StartTimer ( TimeSpan . FromSeconds ( 1 ), () => { Resources [ \"CurrentDate\" ] = DateTime . Now . ToString ( \"hh:mm:ss\" ); return true ; }); You will notice that the text will now display the current date and time. We can achieve the same for the styles. To show the difference between the two, we are using the same key but change the XAML extensions we use to access the resource as follows : <Label Text= \"{DynamicResource CurrentDate}\" /> <Label Text= \"{StaticResource CurrentDate}\" /> Device Styles \u00b6 Xamarin Forms includes six dynamic styles, known as device styles, in the Device.Styles class. The device styles are: BodyStyle CaptionStyle ListItemDetailTextStyle ListItemTextStyle SubtitleStyle TitleStyle All six styles can only be applied to Label instances. For example, a Label that's displaying the body of a paragraph might set its Style property to BodyStyle <StackLayout> <Label Text= \"Title\" Style= \"{DynamicResource TitleStyle}\" /> <Label Text= \"SubTitle\" Style= \"{DynamicResource SubTitleStyle}\" /> <Label Text= \"Body\" Style= \"{DynamicResource BodyStyle}\" /> <Label Text= \"Caption\" Style= \"{DynamicResource CaptionStyle}\" /> <Label Text= \"ListItem\" Style= \"{DynamicResource ListItemStyle}\" /> <Label Text= \"ListItemDetail\" Style= \"{DynamicResource ListItemDetailStyle}\" /> </StackLayout>","title":"Styles and Resources"},{"location":"ui-styles/#styling-apps","text":"Styling a Xamarin.Forms app is traditionally accomplished by using the Style class to group a collection of property values into one object that can then be applied to multiple visual element instances. This helps to reduce repetitive markup, and allows an apps appearance to be more easily changed. Styles are defined in the ResourceDictionary under Resouces in a XAML file.","title":"Styling Apps"},{"location":"ui-styles/#types-of-styles","text":"They are different types of styles than can be used in a Xamarin Forms apps : Explicit Styles Implicit Styles Global Styles Dynamic Styles Device Styles","title":"Types of Styles"},{"location":"ui-styles/#explicit-styles","text":"Explicit styles need to be explicitly referenced for a control and also contains a key when they are defined. To define an explicit style, add a key to the Style definition. <Style x:Key= \"TransparentButtonStyle\" TargetType= \"Button\" > ... </Style> We are defining a style with a key TransparentButtonStyle for the Button class. Note When defining styles, the TargetType is a required property. You can not define a style without a TargetType . We can then use the various Setter 's to define the properties we need for a style. The following defines a button style with a transparent background with a thin gray border : <ContentPage.Resources> <ResourceDictionary> <Style x:Key= \"TransparentButtonStyle\" TargetType= \"Button\" > <Setter Property= \"BackgroundColor\" Value= \"Transparent\" /> <Setter Property= \"BorderColor\" Value= \"Silver\" /> <Setter Property= \"BorderWidth\" Value= \"1\" /> <Setter Property= \"BorderRadius\" Value= \"2\" /> <Setter Property= \"TextColor\" Value= \"Gray\" /> </Style> </ResourceDictionary> </ContentPage.Resources> Note Note that in this instance the style is defined within the ContentPage . When the same style is defined in the App XAML file then it becomes a global style. This style is only available within the ContentPage its defined on.","title":"Explicit Styles"},{"location":"ui-styles/#applying-the-explicit-style","text":"To apply the style to the control we can reference it as a StaticResource using the Style property as follows : <Button Text= \"Explicit Style\" Style= \"{StaticResource TransparentButtonStyle}\" />","title":"Applying the Explicit Style"},{"location":"ui-styles/#implicit-styles","text":"Implicit styles do not specify a key when they are defined. The style will be applied automatically to all controls of the specified TargetType . We can change the above style and just remove the Targettype to make it an implicit style as follows : <ContentPage.Resources> <ResourceDictionary> <Style TargetType= \"Button\" > <Setter Property= \"BackgroundColor\" Value= \"Transparent\" /> <Setter Property= \"BorderColor\" Value= \"Silver\" /> <Setter Property= \"BorderWidth\" Value= \"1\" /> <Setter Property= \"BorderRadius\" Value= \"2\" /> <Setter Property= \"TextColor\" Value= \"Gray\" /> </Style> </ResourceDictionary> </ContentPage.Resources>","title":"Implicit Styles"},{"location":"ui-styles/#global-styles","text":"The global styles are defined in the App class's XAML file. The styles will be available to the entire application. The global styles can be either implicit or explicit. We have changed the location of the implicit style previously defined and placed the style in the application's XAML file : <Application.Resources> <ResourceDictionary> <Color x:Key= \"ColorPrimary\" > #CC0033 </Color> <Color x:Key= \"ColorPrimaryDark\" > #FFF </Color> <Style TargetType= \"Button\" > <Setter Property= \"BackgroundColor\" Value= \"Transparent\" /> <Setter Property= \"BorderColor\" Value= \"Silver\" /> <Setter Property= \"BorderWidth\" Value= \"1\" /> <Setter Property= \"BorderRadius\" Value= \"2\" /> <Setter Property= \"TextColor\" Value= \"Gray\" /> </Style> </ResourceDictionary> </Application.Resources> Note Note that the style in now defined in the ResourceDictionary under the <Application.Resources> . The styles defined here and resources are available to the entire app. We can also define explicit styles by assigning a key to the style as follows : <Application.Resources> <ResourceDictionary> <Color x:Key= \"ColorPrimary\" > #CC0033 </Color> <Color x:Key= \"ColorPrimaryDark\" > #FFF </Color> <Style x:Key= \"TransparentButtonStyle\" TargetType= \"Button\" > <Setter Property= \"BackgroundColor\" Value= \"Transparent\" /> <Setter Property= \"BorderColor\" Value= \"Silver\" /> <Setter Property= \"BorderWidth\" Value= \"1\" /> <Setter Property= \"BorderRadius\" Value= \"2\" /> <Setter Property= \"TextColor\" Value= \"Gray\" /> </Style> </ResourceDictionary> </Application.Resources> Note Note that we have changed the implicit style to an explicit style by assigning a key to the style as follows, <Style x:Key=\"TransparentButtonStyle\" TargetType=\"Button\"> . We can access the style the same way anywhere within the app.","title":"Global Styles"},{"location":"ui-styles/#dynamic-styles","text":"We referencing styles using the StaticResource the styles are only read once. This means if the style does change during runtime, the app will not update the style. We simply change how a style is referenced by using the DynamicResource XAML extension instead. This will keep a reference to the style and be updated when the style changes. We are going to first show an example of reading a resource and then do the same for the style : <ResourceDictionary> <x:String x:Key= \"CurrentDate\" > Will show a date if accessed dynamically </x:String> </ResourceDictionary> We define a string resource and assign a key. We are going to reference the string using the key as follows : <Label Text= \"{DynamicResource CurrentDate}\" /> Initially the text will be displayed but we are going to change the resource in code as follows : Device . StartTimer ( TimeSpan . FromSeconds ( 1 ), () => { Resources [ \"CurrentDate\" ] = DateTime . Now . ToString ( \"hh:mm:ss\" ); return true ; }); You will notice that the text will now display the current date and time. We can achieve the same for the styles. To show the difference between the two, we are using the same key but change the XAML extensions we use to access the resource as follows : <Label Text= \"{DynamicResource CurrentDate}\" /> <Label Text= \"{StaticResource CurrentDate}\" />","title":"Dynamic Styles"},{"location":"ui-styles/#device-styles","text":"Xamarin Forms includes six dynamic styles, known as device styles, in the Device.Styles class. The device styles are: BodyStyle CaptionStyle ListItemDetailTextStyle ListItemTextStyle SubtitleStyle TitleStyle All six styles can only be applied to Label instances. For example, a Label that's displaying the body of a paragraph might set its Style property to BodyStyle <StackLayout> <Label Text= \"Title\" Style= \"{DynamicResource TitleStyle}\" /> <Label Text= \"SubTitle\" Style= \"{DynamicResource SubTitleStyle}\" /> <Label Text= \"Body\" Style= \"{DynamicResource BodyStyle}\" /> <Label Text= \"Caption\" Style= \"{DynamicResource CaptionStyle}\" /> <Label Text= \"ListItem\" Style= \"{DynamicResource ListItemStyle}\" /> <Label Text= \"ListItemDetail\" Style= \"{DynamicResource ListItemDetailStyle}\" /> </StackLayout>","title":"Device Styles"},{"location":"xamarin-essentials/","text":"Xamarin.Essentials Cross Platform API \u00b6 Xamarin.Essentials provides a single cross-platform API that works with any iOS, Android, or UWP application that can be accessed from shared code no matter how the user interface is created. Setup \u00b6 You will need to configure each platform specific project. First add the using statement : using Xamarin.Essentials ; Android Configuration \u00b6 In the OnCreate method add the following : Xamarin . Essentials . Platform . Init ( this , bundle ); and to handle runtime permissions, add this also : public override void OnRequestPermissionsResult ( int requestCode , string [] permissions , [ GeneratedEnum ] Android . Content . PM . Permission [] grantResults ) { Xamarin . Essentials . Platform . OnRequestPermissionsResult ( requestCode , permissions , grantResults ); base . OnRequestPermissionsResult ( requestCode , permissions , grantResults ); } iOS Configuration \u00b6 No specific configuration is required for iOS. Xamarin Essentials Features \u00b6 Feature Description Accelerometer Retrieve acceleration data of the device in three dimensional space. App Information Find out information about the application. Battery Easily detect battery level, source, and state Clipboard Quickly and easily set or read text on the clipboard. Compass Monitor compass for changes. Connectivity Check connectivity state and detect changes. Data Transfer Send text and website uris to other apps. Device Display Information Get the device's screen metrics and orientation. Device Information Find out about the device with ease. Email Easily send email messages. File System Helpers Easily save files to app data. Flashlight A simple way to turn the flashlight on/off. Geocoding Geocode and reverse geocode addresses and coordinates. Geolocation Retrieve the device's GPS location. Gyroscope Track rotation around the device's three primary axes. Magnetometer Detect device's orientation relative to Earth's magnetic field. Open Browser Quickly and easily open a browser to a specific website. Orientation Sensor Retrieve the orientation of the device in three dimensional space. Phone Dialer Open the phone dialer. Platform Run code on the application's main thread. Preferences Quickly and easily add persistent preferences. Screen Lock Keep the device screen awake. Secure Storage Securely store data. SMS Create an SMS message for sending. Text-to-Speech Vocalize text on the device. Version Tracking Track the applications version and build numbers. Vibrate Make the device vibrate.","title":"Xamarin.Essentials Cross Platform API"},{"location":"xamarin-essentials/#xamarinessentials-cross-platform-api","text":"Xamarin.Essentials provides a single cross-platform API that works with any iOS, Android, or UWP application that can be accessed from shared code no matter how the user interface is created.","title":"Xamarin.Essentials Cross Platform API"},{"location":"xamarin-essentials/#setup","text":"You will need to configure each platform specific project. First add the using statement : using Xamarin.Essentials ;","title":"Setup"},{"location":"xamarin-essentials/#android-configuration","text":"In the OnCreate method add the following : Xamarin . Essentials . Platform . Init ( this , bundle ); and to handle runtime permissions, add this also : public override void OnRequestPermissionsResult ( int requestCode , string [] permissions , [ GeneratedEnum ] Android . Content . PM . Permission [] grantResults ) { Xamarin . Essentials . Platform . OnRequestPermissionsResult ( requestCode , permissions , grantResults ); base . OnRequestPermissionsResult ( requestCode , permissions , grantResults ); }","title":"Android Configuration"},{"location":"xamarin-essentials/#ios-configuration","text":"No specific configuration is required for iOS.","title":"iOS Configuration"},{"location":"xamarin-essentials/#xamarin-essentials-features","text":"Feature Description Accelerometer Retrieve acceleration data of the device in three dimensional space. App Information Find out information about the application. Battery Easily detect battery level, source, and state Clipboard Quickly and easily set or read text on the clipboard. Compass Monitor compass for changes. Connectivity Check connectivity state and detect changes. Data Transfer Send text and website uris to other apps. Device Display Information Get the device's screen metrics and orientation. Device Information Find out about the device with ease. Email Easily send email messages. File System Helpers Easily save files to app data. Flashlight A simple way to turn the flashlight on/off. Geocoding Geocode and reverse geocode addresses and coordinates. Geolocation Retrieve the device's GPS location. Gyroscope Track rotation around the device's three primary axes. Magnetometer Detect device's orientation relative to Earth's magnetic field. Open Browser Quickly and easily open a browser to a specific website. Orientation Sensor Retrieve the orientation of the device in three dimensional space. Phone Dialer Open the phone dialer. Platform Run code on the application's main thread. Preferences Quickly and easily add persistent preferences. Screen Lock Keep the device screen awake. Secure Storage Securely store data. SMS Create an SMS message for sending. Text-to-Speech Vocalize text on the device. Version Tracking Track the applications version and build numbers. Vibrate Make the device vibrate.","title":"Xamarin Essentials Features"},{"location":"layouts/absolute-layout/","text":"Absolute Layout \u00b6 The AbsoluteLayout is used to position and size using absolute values or in proportions to the parent container. Purpose \u00b6 Position views on the edges e.g top, left, bottom, center Proportionally size views with their container, e.g half the size, same size or any proportion Create overlays by laying views on top of each other Specifying position and size values \u00b6 The AbsoluteLayout have an attached property AbsoluteLayout.LayoutBounds . The property is a rectangle which defines 4 values : X \u2013 the x (horizontal) position of the view's anchor Y \u2013 the y (vertical) position of the view's anchor Width \u2013 the width of the view Height \u2013 the height of the view Each of the values can be set as a proportional or an absolute value. Proportional values range from 0 to 1. Specifying how values will be interpreted \u00b6 The AbsoluteLayout defines an attached property AbsoluteLayout.LayoutFlags which can hold the following values : None \u2013 interprets all values as absolute. This is the default value if no layout flags are specified. All \u2013 interprets all values as proportional. WidthProportional \u2013 interprets the Width value as proportional and all other values as absolute. HeightProportional \u2013 interprets only the height value as proportional with all other values absolute. XProportional \u2013 interprets the X value as proportional, while treating all other values as absolute. YProportional \u2013 interprets the Y value as proportional, while treating all other values as absolute. PositionProportional \u2013 interprets the X and Y values as proportional, while the size values are interpreted as absolute. SizeProportional \u2013 interprets the Width and Height values as proportional while the position values are absolute. The value of the AbsoluteLayout.LayoutFlags can be a single value or a comma separated list of the above options. Position views flash on the edges and center \u00b6 We can easily use the AbsoluteLayout to position views flash on the edges on the center as follows : <?xml version=\"1.0\" encoding=\"UTF-8\"?> <ContentPage xmlns= \"http://xamarin.com/schemas/2014/forms\" xmlns:x= \"http://schemas.microsoft.com/winfx/2009/xaml\" x:Class= \"LayoutSample.MediaPlayerPage\" > <ContentPage.Padding> <OnPlatform x:TypeArguments= \"Thickness\" iOS= \"0,20,0,0\" /> </ContentPage.Padding> <ContentPage.Content> <AbsoluteLayout> <BoxView BackgroundColor= \"Red\" WidthRequest= \"50\" HeightRequest= \"50\" /> <BoxView AbsoluteLayout.LayoutFlags= \"PositionProportional\" AbsoluteLayout.LayoutBounds= \"1,0\" BackgroundColor= \"Green\" WidthRequest= \"50\" HeightRequest= \"50\" /> <BoxView AbsoluteLayout.LayoutFlags= \"PositionProportional\" AbsoluteLayout.LayoutBounds= \"0,1\" BackgroundColor= \"Purple\" WidthRequest= \"50\" HeightRequest= \"50\" /> <BoxView AbsoluteLayout.LayoutFlags= \"PositionProportional\" AbsoluteLayout.LayoutBounds= \"1,1\" BackgroundColor= \"Aqua\" WidthRequest= \"50\" HeightRequest= \"50\" /> <BoxView AbsoluteLayout.LayoutFlags= \"PositionProportional\" AbsoluteLayout.LayoutBounds= \"0.5,0.5\" BackgroundColor= \"Navy\" WidthRequest= \"50\" HeightRequest= \"50\" /> </AbsoluteLayout> </ContentPage.Content> </ContentPage>","title":"Absolute Layout"},{"location":"layouts/absolute-layout/#absolute-layout","text":"The AbsoluteLayout is used to position and size using absolute values or in proportions to the parent container.","title":"Absolute Layout"},{"location":"layouts/absolute-layout/#purpose","text":"Position views on the edges e.g top, left, bottom, center Proportionally size views with their container, e.g half the size, same size or any proportion Create overlays by laying views on top of each other","title":"Purpose"},{"location":"layouts/absolute-layout/#specifying-position-and-size-values","text":"The AbsoluteLayout have an attached property AbsoluteLayout.LayoutBounds . The property is a rectangle which defines 4 values : X \u2013 the x (horizontal) position of the view's anchor Y \u2013 the y (vertical) position of the view's anchor Width \u2013 the width of the view Height \u2013 the height of the view Each of the values can be set as a proportional or an absolute value. Proportional values range from 0 to 1.","title":"Specifying position and size values"},{"location":"layouts/absolute-layout/#specifying-how-values-will-be-interpreted","text":"The AbsoluteLayout defines an attached property AbsoluteLayout.LayoutFlags which can hold the following values : None \u2013 interprets all values as absolute. This is the default value if no layout flags are specified. All \u2013 interprets all values as proportional. WidthProportional \u2013 interprets the Width value as proportional and all other values as absolute. HeightProportional \u2013 interprets only the height value as proportional with all other values absolute. XProportional \u2013 interprets the X value as proportional, while treating all other values as absolute. YProportional \u2013 interprets the Y value as proportional, while treating all other values as absolute. PositionProportional \u2013 interprets the X and Y values as proportional, while the size values are interpreted as absolute. SizeProportional \u2013 interprets the Width and Height values as proportional while the position values are absolute. The value of the AbsoluteLayout.LayoutFlags can be a single value or a comma separated list of the above options.","title":"Specifying how values will be interpreted"},{"location":"layouts/absolute-layout/#position-views-flash-on-the-edges-and-center","text":"We can easily use the AbsoluteLayout to position views flash on the edges on the center as follows : <?xml version=\"1.0\" encoding=\"UTF-8\"?> <ContentPage xmlns= \"http://xamarin.com/schemas/2014/forms\" xmlns:x= \"http://schemas.microsoft.com/winfx/2009/xaml\" x:Class= \"LayoutSample.MediaPlayerPage\" > <ContentPage.Padding> <OnPlatform x:TypeArguments= \"Thickness\" iOS= \"0,20,0,0\" /> </ContentPage.Padding> <ContentPage.Content> <AbsoluteLayout> <BoxView BackgroundColor= \"Red\" WidthRequest= \"50\" HeightRequest= \"50\" /> <BoxView AbsoluteLayout.LayoutFlags= \"PositionProportional\" AbsoluteLayout.LayoutBounds= \"1,0\" BackgroundColor= \"Green\" WidthRequest= \"50\" HeightRequest= \"50\" /> <BoxView AbsoluteLayout.LayoutFlags= \"PositionProportional\" AbsoluteLayout.LayoutBounds= \"0,1\" BackgroundColor= \"Purple\" WidthRequest= \"50\" HeightRequest= \"50\" /> <BoxView AbsoluteLayout.LayoutFlags= \"PositionProportional\" AbsoluteLayout.LayoutBounds= \"1,1\" BackgroundColor= \"Aqua\" WidthRequest= \"50\" HeightRequest= \"50\" /> <BoxView AbsoluteLayout.LayoutFlags= \"PositionProportional\" AbsoluteLayout.LayoutBounds= \"0.5,0.5\" BackgroundColor= \"Navy\" WidthRequest= \"50\" HeightRequest= \"50\" /> </AbsoluteLayout> </ContentPage.Content> </ContentPage>","title":"Position views flash on the edges and center"},{"location":"layouts/flex-layout/","text":"Flex Layout \u00b6 The Xamarin.Forms FlexLayout is new in Xamarin.Forms version 3.0. It is based on the CSS Flexible Box Layout Module, commonly known as flex layout or flex-box, so called because it includes many flexible options to arrange children within the layout. FlexLayout is similar to the Xamarin.Forms StackLayout in that it can arrange its children horizontally and vertically in a stack. However, the FlexLayout is also capable of wrapping its children if there are too many to fit in a single row or column, and also has many options for orientation, alignment, and adapting to various screen sizes. FlexLayout defines six public bindable properties and five attached bindable properties that affect the size, orientation, and alignment of its child elements.","title":"Flex Layout"},{"location":"layouts/flex-layout/#flex-layout","text":"The Xamarin.Forms FlexLayout is new in Xamarin.Forms version 3.0. It is based on the CSS Flexible Box Layout Module, commonly known as flex layout or flex-box, so called because it includes many flexible options to arrange children within the layout. FlexLayout is similar to the Xamarin.Forms StackLayout in that it can arrange its children horizontally and vertically in a stack. However, the FlexLayout is also capable of wrapping its children if there are too many to fit in a single row or column, and also has many options for orientation, alignment, and adapting to various screen sizes. FlexLayout defines six public bindable properties and five attached bindable properties that affect the size, orientation, and alignment of its child elements.","title":"Flex Layout"},{"location":"layouts/grid-layout/","text":"Grid Layout \u00b6 The Grid is used to display views in rows and columns. The Grid rows and columns supports spacing. The Grid is a powerful control. The control is not ideal for displaying tabular data, for that you should use the ListView or the TableView control. The Grid uses the RowDefinitions property to define the number of rows in the Grid. It uses the ColumnDefinitions to define the number of columns in the Grid. Rows and Columns \u00b6 Row and column information is stored in Grid's RowDefinitions & ColumnDefinitions properties. RowDefinition has a single property, Height , and ColumnDefinition has a single property, Width . The options for height and width are as follows: Auto \u2013 automatically sizes to fit content in the row or column. Specified as in XAML. Proportional(*) \u2013 sizes columns and rows as a proportion of the remaining space. Specified as a value and as #* in XAML, with # being your desired value. Specifying one row/column with * will cause it to fill the available space. Absolute \u2013 sizes columns and rows with specific, fixed height and width values. Specified as a value and as # in XAML, with # being your desired value. The Grid uses attached properties. This means, views created inside the Grid will have Grid properties but those properties are not defined on those View. Spacing \u00b6 Grid has properties to control spacing between rows and columns. The following properties are available for customizing the Grid: ColumnSpacing \u2013 the amount of space between columns. RowSpacing \u2013 the amount of space between rows. The following XAML specifies a Grid with two columns, one row, and 5 px of spacing between columns: <Grid ColumnSpacing= \"5\" > <Grid.ColumnDefinitions> <ColumnDefinitions Width= \"*\" /> <ColumnDefinitions Width= \"*\" /> </Grid.ColumnDefinitions> </Grid> Spans \u00b6 We can use the ColumnSpan and RowSpan to enable views to span over multiple columns or rows. The following spans the Button over two columns. <Button Text = \"0\" Grid.Row= \"0\" Grid.Column= \"0\" Grid.ColumnSpan= \"2\" /> A Simple Grid \u00b6 <Grid> <Grid.RowDefinitions> <RowDefinition Height= \"2*\" /> <RowDefinition Height= \"*\" /> <RowDefinition Height= \"200\" /> </Grid.RowDefinitions> <Grid.ColumnDefinitions> <ColumnDefinition Width= \"Auto\" /> <ColumnDefinition Width= \"*\" /> </Grid.ColumnDefinitions> </Grid> We can use the Grid to create complex layouts. The XAML below creates a calculator UI using the Grid layout : <?xml version=\"1.0\" encoding=\"UTF-8\"?> <ContentPage xmlns= \"http://xamarin.com/schemas/2014/forms\" xmlns:x= \"http://schemas.microsoft.com/winfx/2009/xaml\" x:Class= \"Demo.CalculatorPage\" Title = \"Calculator - XAML\" BackgroundColor= \"#404040\" > <ContentPage.Content> <Grid x:Name= \"controlGrid\" RowSpacing= \"1\" ColumnSpacing= \"1\" > <Grid.RowDefinitions> <RowDefinition Height= \"150\" /> <RowDefinition Height= \"*\" /> <RowDefinition Height= \"*\" /> <RowDefinition Height= \"*\" /> <RowDefinition Height= \"*\" /> <RowDefinition Height= \"*\" /> </Grid.RowDefinitions> <Grid.ColumnDefinitions> <ColumnDefinition Width= \"*\" /> <ColumnDefinition Width= \"*\" /> <ColumnDefinition Width= \"*\" /> <ColumnDefinition Width= \"*\" /> </Grid.ColumnDefinitions> <Label Text= \"0\" Grid.Row= \"0\" HorizontalTextAlignment= \"End\" VerticalTextAlignment= \"End\" TextColor= \"White\" FontSize= \"60\" Grid.ColumnSpan= \"4\" /> <Button Text = \"C\" Grid.Row= \"1\" Grid.Column= \"0\" BackgroundColor= \"#ddd\" TextColor= \"Black\" BorderRadius= \"0\" FontSize= \"40\" /> <Button Text = \"+/-\" Grid.Row= \"1\" Grid.Column= \"1\" BackgroundColor= \"#ddd\" TextColor= \"Black\" BorderRadius= \"0\" FontSize= \"40\" /> <Button Text = \"%\" Grid.Row= \"1\" Grid.Column= \"2\" BackgroundColor= \"#ddd\" TextColor= \"Black\" BorderRadius= \"0\" FontSize= \"40\" /> <Button Text = \"div\" Grid.Row= \"1\" Grid.Column= \"3\" BackgroundColor= \"#E8AD00\" TextColor= \"White\" BorderRadius= \"0\" FontSize= \"40\" /> <Button Text = \"7\" Grid.Row= \"2\" Grid.Column= \"0\" BackgroundColor= \"#eee\" BorderRadius= \"0\" TextColor= \"Black\" FontSize= \"40\" /> <Button Text = \"8\" Grid.Row= \"2\" Grid.Column= \"1\" BackgroundColor= \"#eee\" BorderRadius= \"0\" TextColor= \"Black\" FontSize= \"40\" /> <Button Text = \"9\" Grid.Row= \"2\" Grid.Column= \"2\" BackgroundColor= \"#eee\" BorderRadius= \"0\" TextColor= \"Black\" FontSize= \"40\" /> <Button Text = \"X\" Grid.Row= \"2\" Grid.Column= \"3\" BackgroundColor= \"#E8AD00\" TextColor= \"White\" BorderRadius= \"0\" FontSize= \"40\" /> <Button Text = \"4\" Grid.Row= \"3\" Grid.Column= \"0\" BackgroundColor= \"#eee\" BorderRadius= \"0\" TextColor= \"Black\" FontSize= \"40\" /> <Button Text = \"5\" Grid.Row= \"3\" Grid.Column= \"1\" BackgroundColor= \"#eee\" BorderRadius= \"0\" TextColor= \"Black\" FontSize= \"40\" /> <Button Text = \"6\" Grid.Row= \"3\" Grid.Column= \"2\" BackgroundColor= \"#eee\" BorderRadius= \"0\" TextColor= \"Black\" FontSize= \"40\" /> <Button Text = \"-\" Grid.Row= \"3\" Grid.Column= \"3\" BackgroundColor= \"#E8AD00\" TextColor= \"White\" BorderRadius= \"0\" FontSize= \"40\" /> <Button Text = \"1\" Grid.Row= \"4\" Grid.Column= \"0\" BackgroundColor= \"#eee\" BorderRadius= \"0\" TextColor= \"Black\" FontSize= \"40\" /> <Button Text = \"2\" Grid.Row= \"4\" Grid.Column= \"1\" BackgroundColor= \"#eee\" BorderRadius= \"0\" TextColor= \"Black\" FontSize= \"40\" /> <Button Text = \"3\" Grid.Row= \"4\" Grid.Column= \"2\" BackgroundColor= \"#eee\" BorderRadius= \"0\" TextColor= \"Black\" FontSize= \"40\" /> <Button Text = \"+\" Grid.Row= \"4\" Grid.Column= \"3\" BackgroundColor= \"#E8AD00\" TextColor= \"White\" BorderRadius= \"0\" FontSize= \"40\" /> <Button Text = \"0\" Grid.ColumnSpan= \"2\" Grid.Row= \"5\" Grid.Column= \"0\" BackgroundColor= \"#eee\" BorderRadius= \"0\" TextColor= \"Black\" FontSize= \"40\" /> <Button Text = \".\" Grid.Row= \"5\" Grid.Column= \"2\" BackgroundColor= \"#eee\" BorderRadius= \"0\" TextColor= \"Black\" FontSize= \"40\" /> <Button Text = \"=\" Grid.Row= \"5\" Grid.Column= \"3\" BackgroundColor= \"#E8AD00\" TextColor= \"White\" BorderRadius= \"0\" FontSize= \"40\" /> </Grid> </ContentPage.Content> </ContentPage>","title":"Grid Layout"},{"location":"layouts/grid-layout/#grid-layout","text":"The Grid is used to display views in rows and columns. The Grid rows and columns supports spacing. The Grid is a powerful control. The control is not ideal for displaying tabular data, for that you should use the ListView or the TableView control. The Grid uses the RowDefinitions property to define the number of rows in the Grid. It uses the ColumnDefinitions to define the number of columns in the Grid.","title":"Grid Layout"},{"location":"layouts/grid-layout/#rows-and-columns","text":"Row and column information is stored in Grid's RowDefinitions & ColumnDefinitions properties. RowDefinition has a single property, Height , and ColumnDefinition has a single property, Width . The options for height and width are as follows: Auto \u2013 automatically sizes to fit content in the row or column. Specified as in XAML. Proportional(*) \u2013 sizes columns and rows as a proportion of the remaining space. Specified as a value and as #* in XAML, with # being your desired value. Specifying one row/column with * will cause it to fill the available space. Absolute \u2013 sizes columns and rows with specific, fixed height and width values. Specified as a value and as # in XAML, with # being your desired value. The Grid uses attached properties. This means, views created inside the Grid will have Grid properties but those properties are not defined on those View.","title":"Rows and Columns"},{"location":"layouts/grid-layout/#spacing","text":"Grid has properties to control spacing between rows and columns. The following properties are available for customizing the Grid: ColumnSpacing \u2013 the amount of space between columns. RowSpacing \u2013 the amount of space between rows. The following XAML specifies a Grid with two columns, one row, and 5 px of spacing between columns: <Grid ColumnSpacing= \"5\" > <Grid.ColumnDefinitions> <ColumnDefinitions Width= \"*\" /> <ColumnDefinitions Width= \"*\" /> </Grid.ColumnDefinitions> </Grid>","title":"Spacing"},{"location":"layouts/grid-layout/#spans","text":"We can use the ColumnSpan and RowSpan to enable views to span over multiple columns or rows. The following spans the Button over two columns. <Button Text = \"0\" Grid.Row= \"0\" Grid.Column= \"0\" Grid.ColumnSpan= \"2\" />","title":"Spans"},{"location":"layouts/grid-layout/#a-simple-grid","text":"<Grid> <Grid.RowDefinitions> <RowDefinition Height= \"2*\" /> <RowDefinition Height= \"*\" /> <RowDefinition Height= \"200\" /> </Grid.RowDefinitions> <Grid.ColumnDefinitions> <ColumnDefinition Width= \"Auto\" /> <ColumnDefinition Width= \"*\" /> </Grid.ColumnDefinitions> </Grid> We can use the Grid to create complex layouts. The XAML below creates a calculator UI using the Grid layout : <?xml version=\"1.0\" encoding=\"UTF-8\"?> <ContentPage xmlns= \"http://xamarin.com/schemas/2014/forms\" xmlns:x= \"http://schemas.microsoft.com/winfx/2009/xaml\" x:Class= \"Demo.CalculatorPage\" Title = \"Calculator - XAML\" BackgroundColor= \"#404040\" > <ContentPage.Content> <Grid x:Name= \"controlGrid\" RowSpacing= \"1\" ColumnSpacing= \"1\" > <Grid.RowDefinitions> <RowDefinition Height= \"150\" /> <RowDefinition Height= \"*\" /> <RowDefinition Height= \"*\" /> <RowDefinition Height= \"*\" /> <RowDefinition Height= \"*\" /> <RowDefinition Height= \"*\" /> </Grid.RowDefinitions> <Grid.ColumnDefinitions> <ColumnDefinition Width= \"*\" /> <ColumnDefinition Width= \"*\" /> <ColumnDefinition Width= \"*\" /> <ColumnDefinition Width= \"*\" /> </Grid.ColumnDefinitions> <Label Text= \"0\" Grid.Row= \"0\" HorizontalTextAlignment= \"End\" VerticalTextAlignment= \"End\" TextColor= \"White\" FontSize= \"60\" Grid.ColumnSpan= \"4\" /> <Button Text = \"C\" Grid.Row= \"1\" Grid.Column= \"0\" BackgroundColor= \"#ddd\" TextColor= \"Black\" BorderRadius= \"0\" FontSize= \"40\" /> <Button Text = \"+/-\" Grid.Row= \"1\" Grid.Column= \"1\" BackgroundColor= \"#ddd\" TextColor= \"Black\" BorderRadius= \"0\" FontSize= \"40\" /> <Button Text = \"%\" Grid.Row= \"1\" Grid.Column= \"2\" BackgroundColor= \"#ddd\" TextColor= \"Black\" BorderRadius= \"0\" FontSize= \"40\" /> <Button Text = \"div\" Grid.Row= \"1\" Grid.Column= \"3\" BackgroundColor= \"#E8AD00\" TextColor= \"White\" BorderRadius= \"0\" FontSize= \"40\" /> <Button Text = \"7\" Grid.Row= \"2\" Grid.Column= \"0\" BackgroundColor= \"#eee\" BorderRadius= \"0\" TextColor= \"Black\" FontSize= \"40\" /> <Button Text = \"8\" Grid.Row= \"2\" Grid.Column= \"1\" BackgroundColor= \"#eee\" BorderRadius= \"0\" TextColor= \"Black\" FontSize= \"40\" /> <Button Text = \"9\" Grid.Row= \"2\" Grid.Column= \"2\" BackgroundColor= \"#eee\" BorderRadius= \"0\" TextColor= \"Black\" FontSize= \"40\" /> <Button Text = \"X\" Grid.Row= \"2\" Grid.Column= \"3\" BackgroundColor= \"#E8AD00\" TextColor= \"White\" BorderRadius= \"0\" FontSize= \"40\" /> <Button Text = \"4\" Grid.Row= \"3\" Grid.Column= \"0\" BackgroundColor= \"#eee\" BorderRadius= \"0\" TextColor= \"Black\" FontSize= \"40\" /> <Button Text = \"5\" Grid.Row= \"3\" Grid.Column= \"1\" BackgroundColor= \"#eee\" BorderRadius= \"0\" TextColor= \"Black\" FontSize= \"40\" /> <Button Text = \"6\" Grid.Row= \"3\" Grid.Column= \"2\" BackgroundColor= \"#eee\" BorderRadius= \"0\" TextColor= \"Black\" FontSize= \"40\" /> <Button Text = \"-\" Grid.Row= \"3\" Grid.Column= \"3\" BackgroundColor= \"#E8AD00\" TextColor= \"White\" BorderRadius= \"0\" FontSize= \"40\" /> <Button Text = \"1\" Grid.Row= \"4\" Grid.Column= \"0\" BackgroundColor= \"#eee\" BorderRadius= \"0\" TextColor= \"Black\" FontSize= \"40\" /> <Button Text = \"2\" Grid.Row= \"4\" Grid.Column= \"1\" BackgroundColor= \"#eee\" BorderRadius= \"0\" TextColor= \"Black\" FontSize= \"40\" /> <Button Text = \"3\" Grid.Row= \"4\" Grid.Column= \"2\" BackgroundColor= \"#eee\" BorderRadius= \"0\" TextColor= \"Black\" FontSize= \"40\" /> <Button Text = \"+\" Grid.Row= \"4\" Grid.Column= \"3\" BackgroundColor= \"#E8AD00\" TextColor= \"White\" BorderRadius= \"0\" FontSize= \"40\" /> <Button Text = \"0\" Grid.ColumnSpan= \"2\" Grid.Row= \"5\" Grid.Column= \"0\" BackgroundColor= \"#eee\" BorderRadius= \"0\" TextColor= \"Black\" FontSize= \"40\" /> <Button Text = \".\" Grid.Row= \"5\" Grid.Column= \"2\" BackgroundColor= \"#eee\" BorderRadius= \"0\" TextColor= \"Black\" FontSize= \"40\" /> <Button Text = \"=\" Grid.Row= \"5\" Grid.Column= \"3\" BackgroundColor= \"#E8AD00\" TextColor= \"White\" BorderRadius= \"0\" FontSize= \"40\" /> </Grid> </ContentPage.Content> </ContentPage>","title":"A Simple Grid"},{"location":"layouts/layout-options/","text":"Layout Options \u00b6 Layout Options are used to position the views inside their parents container. Every view has a vertical and horizontal options for setting up its position, size and expansion within the parent. Only the StackLayout has an expansion property for its views, the other containers will ignore the property. Available Alignment LayoutOptions Start Center End Fill The default layout options for vertical and horizontal options is Fill . Start For horizontal alignment, Start positions the View on the left hand side of the parent layout, and for vertical alignment, it positions the View at the top of the parent layout. Center For horizontal and vertical alignment, Center horizontally or vertically centers the View. End For horizontal alignment, End positions the View on the right hand side of the parent layout, and for vertical alignment, it positions the View at the bottom of the parent layout. Fill For horizontal alignment, Fill ensures that the View fills the width of the parent layout, and for vertical alignment, it ensures that the View fills the height of the parent layout. Here is the layout options set for a StackLayout in XAML : <StackLayout> <Label Text= \"Start\" BackgroundColor= \"Gray\" HorizontalOptions= \"Start\" /> <Label Text= \"Center\" BackgroundColor= \"Gray\" HorizontalOptions= \"Center\" /> <Label Text= \"End\" BackgroundColor= \"Gray\" HorizontalOptions= \"End\" /> <Label Text= \"Fill\" BackgroundColor= \"Gray\" HorizontalOptions= \"Fill\" /> </StackLayout> Tip A StackLayout only respects the Start , Center , End , and Fill LayoutOptions fields on child views that are in the opposite direction to the StackLayout orientation. Therefore, child views within a vertically oriented StackLayout can set their HorizontalOptions properties to one of the Start , Center , End , or Fill fields. Similarly, child views within a horizontally oriented StackLayout can set their VerticalOptions properties to one of the Start, Center, End, or Fill fields. Expansion and Layout Options \u00b6 Expansion controls whether the views will take up unused space with the StackLayout when the StackLayout is larger than its views.The space is divided equally by the views that requests expansion by setting the HorizontalOptions and VerticalOptions that uses the suffix AndExpand . Tip Note that the AndExpand option does not take effect when all the space is used in the StackLayout. A StackLayout can only expand views in the direction of its orientation. A vertically oriented StackLayout can only expands child views that set the VerticalOptions property to one of the StartAndExpand , CenterAndExpand , EndAndExpand , FillAndExpand and the same for the horizontally oriented StackLayout. These expansion properties only take effect within a StackLayout : StartAndEpand CenterAndExpand EndAndExapand FillAndExpand Note that enabling expansion doesn't change the size of a view unless it uses LayoutOptions.FillAndExpand The following XAML code example demonstrates a vertically oriented StackLayout where each child Label sets its VerticalOptions property to one of the four expansion fields from the LayoutOptions structure: <StackLayout Margin= \"0,20,0,0\" > <BoxView BackgroundColor= \"Red\" HeightRequest= \"1\" /> <Label Text= \"Start\" BackgroundColor= \"Gray\" VerticalOptions= \"StartAndExpand\" /> <BoxView BackgroundColor= \"Red\" HeightRequest= \"1\" /> <Label Text= \"Center\" BackgroundColor= \"Gray\" VerticalOptions= \"CenterAndExpand\" /> <BoxView BackgroundColor= \"Red\" HeightRequest= \"1\" /> <Label Text= \"End\" BackgroundColor= \"Gray\" VerticalOptions= \"EndAndExpand\" /> <BoxView BackgroundColor= \"Red\" HeightRequest= \"1\" /> <Label Text= \"Fill\" BackgroundColor= \"Gray\" VerticalOptions= \"FillAndExpand\" /> <BoxView BackgroundColor= \"Red\" HeightRequest= \"1\" /> < /StackLayout Each Label occupies the same amount of space within the StackLayout. However, only the final Label, which sets its VerticalOptions property to FillAndExpand has a different size.","title":"Layout Options"},{"location":"layouts/layout-options/#layout-options","text":"Layout Options are used to position the views inside their parents container. Every view has a vertical and horizontal options for setting up its position, size and expansion within the parent. Only the StackLayout has an expansion property for its views, the other containers will ignore the property. Available Alignment LayoutOptions Start Center End Fill The default layout options for vertical and horizontal options is Fill . Start For horizontal alignment, Start positions the View on the left hand side of the parent layout, and for vertical alignment, it positions the View at the top of the parent layout. Center For horizontal and vertical alignment, Center horizontally or vertically centers the View. End For horizontal alignment, End positions the View on the right hand side of the parent layout, and for vertical alignment, it positions the View at the bottom of the parent layout. Fill For horizontal alignment, Fill ensures that the View fills the width of the parent layout, and for vertical alignment, it ensures that the View fills the height of the parent layout. Here is the layout options set for a StackLayout in XAML : <StackLayout> <Label Text= \"Start\" BackgroundColor= \"Gray\" HorizontalOptions= \"Start\" /> <Label Text= \"Center\" BackgroundColor= \"Gray\" HorizontalOptions= \"Center\" /> <Label Text= \"End\" BackgroundColor= \"Gray\" HorizontalOptions= \"End\" /> <Label Text= \"Fill\" BackgroundColor= \"Gray\" HorizontalOptions= \"Fill\" /> </StackLayout> Tip A StackLayout only respects the Start , Center , End , and Fill LayoutOptions fields on child views that are in the opposite direction to the StackLayout orientation. Therefore, child views within a vertically oriented StackLayout can set their HorizontalOptions properties to one of the Start , Center , End , or Fill fields. Similarly, child views within a horizontally oriented StackLayout can set their VerticalOptions properties to one of the Start, Center, End, or Fill fields.","title":"Layout Options"},{"location":"layouts/layout-options/#expansion-and-layout-options","text":"Expansion controls whether the views will take up unused space with the StackLayout when the StackLayout is larger than its views.The space is divided equally by the views that requests expansion by setting the HorizontalOptions and VerticalOptions that uses the suffix AndExpand . Tip Note that the AndExpand option does not take effect when all the space is used in the StackLayout. A StackLayout can only expand views in the direction of its orientation. A vertically oriented StackLayout can only expands child views that set the VerticalOptions property to one of the StartAndExpand , CenterAndExpand , EndAndExpand , FillAndExpand and the same for the horizontally oriented StackLayout. These expansion properties only take effect within a StackLayout : StartAndEpand CenterAndExpand EndAndExapand FillAndExpand Note that enabling expansion doesn't change the size of a view unless it uses LayoutOptions.FillAndExpand The following XAML code example demonstrates a vertically oriented StackLayout where each child Label sets its VerticalOptions property to one of the four expansion fields from the LayoutOptions structure: <StackLayout Margin= \"0,20,0,0\" > <BoxView BackgroundColor= \"Red\" HeightRequest= \"1\" /> <Label Text= \"Start\" BackgroundColor= \"Gray\" VerticalOptions= \"StartAndExpand\" /> <BoxView BackgroundColor= \"Red\" HeightRequest= \"1\" /> <Label Text= \"Center\" BackgroundColor= \"Gray\" VerticalOptions= \"CenterAndExpand\" /> <BoxView BackgroundColor= \"Red\" HeightRequest= \"1\" /> <Label Text= \"End\" BackgroundColor= \"Gray\" VerticalOptions= \"EndAndExpand\" /> <BoxView BackgroundColor= \"Red\" HeightRequest= \"1\" /> <Label Text= \"Fill\" BackgroundColor= \"Gray\" VerticalOptions= \"FillAndExpand\" /> <BoxView BackgroundColor= \"Red\" HeightRequest= \"1\" /> < /StackLayout Each Label occupies the same amount of space within the StackLayout. However, only the final Label, which sets its VerticalOptions property to FillAndExpand has a different size.","title":"Expansion and Layout Options"},{"location":"layouts/relative-layout/","text":"Relative Layout \u00b6 The RelativeLayout is used to position and size views using constraints. You can position of size views against the parent view or other sibling views. Constraints \u00b6 The Relative layout have attached properties for changing the X, Y, Width, Height and Bounds constraint. A constraint is defined using ConstraintExpression in XAML and we can specify it for these properties : XConstraint YConstraint WidthConstraint HeightConstraint BoundsConstraint Center a BoxView in the horizontally \u00b6 Let's use the XConstraint to center a BoxView inside the Relative layout. <RelativeLayout x:Name= \"container\" > <BoxView x:Name= \"boxView\" WidthRequest= \"50\" HeightRequest= \"50\" Color= \"Green\" RelativeLayout.XConstraint= \"{ConstraintExpression Type=RelativeToParent, Property=Width, Factor=0.5, Constant=-25 }\" /> </RelativeLayout> Note The X coordinate of the BoxView is specified as half of the width of the parent. We then apply an offset of 25 since the BoxView is 50 in width. This will now center the BoxView Center a BoxView horizontally and vertically \u00b6 To center the BoxView above horizontally and vertically, we can apply both XConstraint and YConstraint and also apply a factor of -25 on both X and Y to center the view. <RelativeLayout x:Name= \"container\" > <BoxView x:Name= \"boxView\" WidthRequest= \"50\" HeightRequest= \"50\" Color= \"Green\" RelativeLayout.XConstraint= \"{ConstraintExpression Type=RelativeToParent, Property=Width, Factor=0.5, Constant=-25 }\" RelativeLayout.YConstraint= \"{ConstraintExpression Type=RelativeToParent, Property=Height, Factor=0.5, Constant=-25}\" /> </RelativeLayout> Align on edges \u00b6 Here is an example of the Relative Layout with all the Box View on the edges. < RelativeLayout x : Name = \"container\" > <!-- Top left edge --> < BoxView x : Name = \"boxView\" WidthRequest = \"50\" HeightRequest = \"50\" Color = \"Green\" RelativeLayout . XConstraint = \"{ConstraintExpression Type=RelativeToParent, Property=Width, Factor=0, Constant=0 }\" /> <!-- Center top --> < BoxView WidthRequest = \"50\" HeightRequest = \"50\" Color = \"Red\" RelativeLayout . XConstraint = \"{ConstraintExpression Type=RelativeToParent, Property=Width, Factor=1, Constant=-50 }\" /> <!-- Right edge --> < BoxView WidthRequest = \"50\" HeightRequest = \"50\" Color = \"Purple\" RelativeLayout . XConstraint = \"{ConstraintExpression Type=RelativeToParent, Property=Width, Factor=0.5, Constant=-25 }\" /> <!-- Center left --> < BoxView WidthRequest = \"50\" HeightRequest = \"50\" Color = \"Lime\" RelativeLayout . XConstraint = \"{ConstraintExpression Type=RelativeToParent, Property=Width, Factor=0, Constant=0 }\" RelativeLayout . YConstraint = \"{ConstraintExpression Type=RelativeToParent, Property=Height, Factor=0.5}\" /> <!-- Center in parent --> < BoxView WidthRequest = \"50\" HeightRequest = \"50\" Color = \"Orange\" RelativeLayout . XConstraint = \"{ConstraintExpression Type=RelativeToParent, Property=Width, Factor=0.5, Constant=-25 }\" RelativeLayout . YConstraint = \"{ConstraintExpression Type=RelativeToParent, Property=Height, Factor=0.5}\" /> <!-- Right center edge --> < BoxView WidthRequest = \"50\" HeightRequest = \"50\" Color = \"Navy\" RelativeLayout . XConstraint = \"{ConstraintExpression Type=RelativeToParent, Property=Width, Factor=1, Constant=-50 }\" RelativeLayout . YConstraint = \"{ConstraintExpression Type=RelativeToParent, Property=Height, Factor=0.5}\" /> <!-- Bottom left edge --> < BoxView WidthRequest = \"50\" HeightRequest = \"50\" Color = \"Olive\" RelativeLayout . XConstraint = \"{ConstraintExpression Type=RelativeToParent, Property=Width, Factor=0, Constant=0 }\" RelativeLayout . YConstraint = \"{ConstraintExpression Type=RelativeToParent, Property=Height, Constant=-50, Factor=1}\" /> <!-- Bottom center --> < BoxView WidthRequest = \"50\" HeightRequest = \"50\" Color = \"Teal\" RelativeLayout . XConstraint = \"{ConstraintExpression Type=RelativeToParent, Property=Width, Factor=0.5, Constant=-25 }\" RelativeLayout . YConstraint = \"{ConstraintExpression Type=RelativeToParent, Property=Height, Constant=-50, Factor=1}\" /> <!-- Bottom right edge --> < BoxView WidthRequest = \"50\" HeightRequest = \"50\" Color = \"Maroon\" RelativeLayout . XConstraint = \"{ConstraintExpression Type=RelativeToParent, Property=Width, Factor=1, Constant=-50 }\" RelativeLayout . YConstraint = \"{ConstraintExpression Type=RelativeToParent, Property=Height, Constant=-50, Factor=1}\" /> </ RelativeLayout > Relative to another view \u00b6 We can setup our views so that they are relative to their sibling views. In the example below, we have the BoxView in the middle relative to the parent and then the two other BoxView 's relative to the center box view. <RelativeLayout> <BoxView x:Name=\"boxView\" Color=\"Green\" WidthRequest=\"50\" HeightRequest=\"50\" RelativeLayout.XConstraint= \"{ConstraintExpression Type=RelativeToParent, Property=Width, Factor=0.5, Constant=-25}\" RelativeLayout.YConstraint= \"{ConstraintExpression Type=RelativeToParent, Property=Height, Factor=0.5, Constant=-25}\"/> <BoxView x:Name=\"boxView2\" WidthRequest=\"50\" HeightRequest=\"50\" Color=\"Fuchsia\" RelativeLayout.XConstraint= \"{ConstraintExpression ElementName=boxView, Type=RelativeToView, Constant=-100, Property=X}\" RelativeLayout.YConstraint= \"{ConstraintExpression Type=RelativeToView, ElementName=boxView, Property=Y, Constant=0}\" /> <BoxView x:Name=\"boxView3\" WidthRequest=\"50\" HeightRequest=\"50\" Color=\"Blue\" RelativeLayout.XConstraint= \"{ConstraintExpression ElementName=boxView, Type=RelativeToView, Constant=100, Property=X}\" RelativeLayout.YConstraint= \"{ConstraintExpression Type=RelativeToView, ElementName=boxView, Property=Y, Constant=0}\" /> </RelativeLayout>","title":"Relative Layout"},{"location":"layouts/relative-layout/#relative-layout","text":"The RelativeLayout is used to position and size views using constraints. You can position of size views against the parent view or other sibling views.","title":"Relative Layout"},{"location":"layouts/relative-layout/#constraints","text":"The Relative layout have attached properties for changing the X, Y, Width, Height and Bounds constraint. A constraint is defined using ConstraintExpression in XAML and we can specify it for these properties : XConstraint YConstraint WidthConstraint HeightConstraint BoundsConstraint","title":"Constraints"},{"location":"layouts/relative-layout/#center-a-boxview-in-the-horizontally","text":"Let's use the XConstraint to center a BoxView inside the Relative layout. <RelativeLayout x:Name= \"container\" > <BoxView x:Name= \"boxView\" WidthRequest= \"50\" HeightRequest= \"50\" Color= \"Green\" RelativeLayout.XConstraint= \"{ConstraintExpression Type=RelativeToParent, Property=Width, Factor=0.5, Constant=-25 }\" /> </RelativeLayout> Note The X coordinate of the BoxView is specified as half of the width of the parent. We then apply an offset of 25 since the BoxView is 50 in width. This will now center the BoxView","title":"Center a BoxView in the horizontally"},{"location":"layouts/relative-layout/#center-a-boxview-horizontally-and-vertically","text":"To center the BoxView above horizontally and vertically, we can apply both XConstraint and YConstraint and also apply a factor of -25 on both X and Y to center the view. <RelativeLayout x:Name= \"container\" > <BoxView x:Name= \"boxView\" WidthRequest= \"50\" HeightRequest= \"50\" Color= \"Green\" RelativeLayout.XConstraint= \"{ConstraintExpression Type=RelativeToParent, Property=Width, Factor=0.5, Constant=-25 }\" RelativeLayout.YConstraint= \"{ConstraintExpression Type=RelativeToParent, Property=Height, Factor=0.5, Constant=-25}\" /> </RelativeLayout>","title":"Center a BoxView horizontally and vertically"},{"location":"layouts/relative-layout/#align-on-edges","text":"Here is an example of the Relative Layout with all the Box View on the edges. < RelativeLayout x : Name = \"container\" > <!-- Top left edge --> < BoxView x : Name = \"boxView\" WidthRequest = \"50\" HeightRequest = \"50\" Color = \"Green\" RelativeLayout . XConstraint = \"{ConstraintExpression Type=RelativeToParent, Property=Width, Factor=0, Constant=0 }\" /> <!-- Center top --> < BoxView WidthRequest = \"50\" HeightRequest = \"50\" Color = \"Red\" RelativeLayout . XConstraint = \"{ConstraintExpression Type=RelativeToParent, Property=Width, Factor=1, Constant=-50 }\" /> <!-- Right edge --> < BoxView WidthRequest = \"50\" HeightRequest = \"50\" Color = \"Purple\" RelativeLayout . XConstraint = \"{ConstraintExpression Type=RelativeToParent, Property=Width, Factor=0.5, Constant=-25 }\" /> <!-- Center left --> < BoxView WidthRequest = \"50\" HeightRequest = \"50\" Color = \"Lime\" RelativeLayout . XConstraint = \"{ConstraintExpression Type=RelativeToParent, Property=Width, Factor=0, Constant=0 }\" RelativeLayout . YConstraint = \"{ConstraintExpression Type=RelativeToParent, Property=Height, Factor=0.5}\" /> <!-- Center in parent --> < BoxView WidthRequest = \"50\" HeightRequest = \"50\" Color = \"Orange\" RelativeLayout . XConstraint = \"{ConstraintExpression Type=RelativeToParent, Property=Width, Factor=0.5, Constant=-25 }\" RelativeLayout . YConstraint = \"{ConstraintExpression Type=RelativeToParent, Property=Height, Factor=0.5}\" /> <!-- Right center edge --> < BoxView WidthRequest = \"50\" HeightRequest = \"50\" Color = \"Navy\" RelativeLayout . XConstraint = \"{ConstraintExpression Type=RelativeToParent, Property=Width, Factor=1, Constant=-50 }\" RelativeLayout . YConstraint = \"{ConstraintExpression Type=RelativeToParent, Property=Height, Factor=0.5}\" /> <!-- Bottom left edge --> < BoxView WidthRequest = \"50\" HeightRequest = \"50\" Color = \"Olive\" RelativeLayout . XConstraint = \"{ConstraintExpression Type=RelativeToParent, Property=Width, Factor=0, Constant=0 }\" RelativeLayout . YConstraint = \"{ConstraintExpression Type=RelativeToParent, Property=Height, Constant=-50, Factor=1}\" /> <!-- Bottom center --> < BoxView WidthRequest = \"50\" HeightRequest = \"50\" Color = \"Teal\" RelativeLayout . XConstraint = \"{ConstraintExpression Type=RelativeToParent, Property=Width, Factor=0.5, Constant=-25 }\" RelativeLayout . YConstraint = \"{ConstraintExpression Type=RelativeToParent, Property=Height, Constant=-50, Factor=1}\" /> <!-- Bottom right edge --> < BoxView WidthRequest = \"50\" HeightRequest = \"50\" Color = \"Maroon\" RelativeLayout . XConstraint = \"{ConstraintExpression Type=RelativeToParent, Property=Width, Factor=1, Constant=-50 }\" RelativeLayout . YConstraint = \"{ConstraintExpression Type=RelativeToParent, Property=Height, Constant=-50, Factor=1}\" /> </ RelativeLayout >","title":"Align on edges"},{"location":"layouts/relative-layout/#relative-to-another-view","text":"We can setup our views so that they are relative to their sibling views. In the example below, we have the BoxView in the middle relative to the parent and then the two other BoxView 's relative to the center box view. <RelativeLayout> <BoxView x:Name=\"boxView\" Color=\"Green\" WidthRequest=\"50\" HeightRequest=\"50\" RelativeLayout.XConstraint= \"{ConstraintExpression Type=RelativeToParent, Property=Width, Factor=0.5, Constant=-25}\" RelativeLayout.YConstraint= \"{ConstraintExpression Type=RelativeToParent, Property=Height, Factor=0.5, Constant=-25}\"/> <BoxView x:Name=\"boxView2\" WidthRequest=\"50\" HeightRequest=\"50\" Color=\"Fuchsia\" RelativeLayout.XConstraint= \"{ConstraintExpression ElementName=boxView, Type=RelativeToView, Constant=-100, Property=X}\" RelativeLayout.YConstraint= \"{ConstraintExpression Type=RelativeToView, ElementName=boxView, Property=Y, Constant=0}\" /> <BoxView x:Name=\"boxView3\" WidthRequest=\"50\" HeightRequest=\"50\" Color=\"Blue\" RelativeLayout.XConstraint= \"{ConstraintExpression ElementName=boxView, Type=RelativeToView, Constant=100, Property=X}\" RelativeLayout.YConstraint= \"{ConstraintExpression Type=RelativeToView, ElementName=boxView, Property=Y, Constant=0}\" /> </RelativeLayout>","title":"Relative to another view"},{"location":"layouts/scroll-view/","text":"ScrollView \u00b6 The ScrollView is used to wrap content that needs to scroll. The ScrollView control can only have one child. Note, Do not embed a ListView inside a ScrollView as the ListView already can scroll The contents of the Login page are wrapped inside the ScrollView so that they user can scroll the contents up when the keyboard overlaps the controls. <?xml version=\"1.0\" encoding=\"UTF-8\"?> <ContentPage xmlns= \"http://xamarin.com/schemas/2014/forms\" xmlns:x= \"http://schemas.microsoft.com/winfx/2009/xaml\" Padding= \"10\" x:Class= \"Demo.LoginPage\" > <ContentPage.Content> <ScrollView> <StackLayout> <StackLayout VerticalOptions= \"CenterAndExpand\" Spacing= \"10\" > <Image Source= \"logo\" WidthRequest= \"100\" HeightRequest= \"100\" /> <Label Text= \"Login Here!\" HorizontalOptions= \"Center\" TextColor= \"Gray\" /> <Entry Placeholder= \"Username\" Keyboard= \"Email\" /> <Entry Placeholder= \"Password\" IsPassword= \"true\" /> <StackLayout Orientation= \"Horizontal\" > <Button Text= \"Login\" HorizontalOptions= \"FillAndExpand\" BackgroundColor= \"Orange\" TextColor= \"White\" /> <Button Text= \"Register\" HorizontalOptions= \"FillAndExpand\" BackgroundColor= \"Gray\" TextColor= \"White\" /> </StackLayout> </StackLayout> </StackLayout> </ScrollView> </ContentPage.Content> </ContentPage>","title":"Scroll View"},{"location":"layouts/scroll-view/#scrollview","text":"The ScrollView is used to wrap content that needs to scroll. The ScrollView control can only have one child. Note, Do not embed a ListView inside a ScrollView as the ListView already can scroll The contents of the Login page are wrapped inside the ScrollView so that they user can scroll the contents up when the keyboard overlaps the controls. <?xml version=\"1.0\" encoding=\"UTF-8\"?> <ContentPage xmlns= \"http://xamarin.com/schemas/2014/forms\" xmlns:x= \"http://schemas.microsoft.com/winfx/2009/xaml\" Padding= \"10\" x:Class= \"Demo.LoginPage\" > <ContentPage.Content> <ScrollView> <StackLayout> <StackLayout VerticalOptions= \"CenterAndExpand\" Spacing= \"10\" > <Image Source= \"logo\" WidthRequest= \"100\" HeightRequest= \"100\" /> <Label Text= \"Login Here!\" HorizontalOptions= \"Center\" TextColor= \"Gray\" /> <Entry Placeholder= \"Username\" Keyboard= \"Email\" /> <Entry Placeholder= \"Password\" IsPassword= \"true\" /> <StackLayout Orientation= \"Horizontal\" > <Button Text= \"Login\" HorizontalOptions= \"FillAndExpand\" BackgroundColor= \"Orange\" TextColor= \"White\" /> <Button Text= \"Register\" HorizontalOptions= \"FillAndExpand\" BackgroundColor= \"Gray\" TextColor= \"White\" /> </StackLayout> </StackLayout> </StackLayout> </ScrollView> </ContentPage.Content> </ContentPage>","title":"ScrollView"},{"location":"layouts/stack-layout/","text":"Stack Layout \u00b6 The StackLayout is one of most commonly used layouts. It stacks its children in either horizontal or vertical orientation. The default orientation if Vertical. Position and size of views is based on the HeightRequest , WidthRequest , HorizontalOptions and VerticalOptions . The following is a sample login page. We have gone and embedded the StackLayout in a ScrollView as well so that the user can scroll up when the keyboard hides the text fields : <?xml version=\"1.0\" encoding=\"utf-8\"?> <ContentPage Padding= \"10\" xmlns:ios= \"clr-namespace:Xamarin.Forms.PlatformConfiguration.iOSSpecific;assembly=Xamarin.Forms.Core\" ios:Page.UseSafeArea= \"true\" xmlns= \"http://xamarin.com/schemas/2014/forms\" xmlns:x= \"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:local= \"clr-namespace:LayoutDemov1\" x:Class= \"LayoutDemov1.MainPage\" > <ScrollView Margin= \"0,20,0,0\" > <StackLayout Spacing= \"10\" > <Image Source= \"logo\" WidthRequest= \"100\" HeightRequest= \"100\" /> <Label Text= \"Peruzal Login\" HorizontalOptions= \"Center\" TextColor= \"Gray\" /> <Entry Placeholder= \"Username\" Keyboard= \"Email\" /> <Entry Placeholder= \"Password\" IsPassword= \"true\" /> <StackLayout Orientation= \"Horizontal\" > <Button Text= \"Login\" HorizontalOptions= \"FillAndExpand\" BackgroundColor= \"Orange\" TextColor= \"White\" /> <Button Text= \"Register\" HorizontalOptions= \"FillAndExpand\" BackgroundColor= \"Gray\" TextColor= \"White\" /> </StackLayout> <Label Text= \"Terms and Conditions\" TextColor= \"Gray\" HorizontalOptions= \"Center\" VerticalOptions= \"EndAndExpand\" /> </StackLayout> </ScrollView> </ContentPage> The demo shows the following sample screen on iOS. In the above code we also embedded a StackLayout inside another StackLayout and changed the orientation to horizontal for the buttons.","title":"Stack Layout"},{"location":"layouts/stack-layout/#stack-layout","text":"The StackLayout is one of most commonly used layouts. It stacks its children in either horizontal or vertical orientation. The default orientation if Vertical. Position and size of views is based on the HeightRequest , WidthRequest , HorizontalOptions and VerticalOptions . The following is a sample login page. We have gone and embedded the StackLayout in a ScrollView as well so that the user can scroll up when the keyboard hides the text fields : <?xml version=\"1.0\" encoding=\"utf-8\"?> <ContentPage Padding= \"10\" xmlns:ios= \"clr-namespace:Xamarin.Forms.PlatformConfiguration.iOSSpecific;assembly=Xamarin.Forms.Core\" ios:Page.UseSafeArea= \"true\" xmlns= \"http://xamarin.com/schemas/2014/forms\" xmlns:x= \"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:local= \"clr-namespace:LayoutDemov1\" x:Class= \"LayoutDemov1.MainPage\" > <ScrollView Margin= \"0,20,0,0\" > <StackLayout Spacing= \"10\" > <Image Source= \"logo\" WidthRequest= \"100\" HeightRequest= \"100\" /> <Label Text= \"Peruzal Login\" HorizontalOptions= \"Center\" TextColor= \"Gray\" /> <Entry Placeholder= \"Username\" Keyboard= \"Email\" /> <Entry Placeholder= \"Password\" IsPassword= \"true\" /> <StackLayout Orientation= \"Horizontal\" > <Button Text= \"Login\" HorizontalOptions= \"FillAndExpand\" BackgroundColor= \"Orange\" TextColor= \"White\" /> <Button Text= \"Register\" HorizontalOptions= \"FillAndExpand\" BackgroundColor= \"Gray\" TextColor= \"White\" /> </StackLayout> <Label Text= \"Terms and Conditions\" TextColor= \"Gray\" HorizontalOptions= \"Center\" VerticalOptions= \"EndAndExpand\" /> </StackLayout> </ScrollView> </ContentPage> The demo shows the following sample screen on iOS. In the above code we also embedded a StackLayout inside another StackLayout and changed the orientation to horizontal for the buttons.","title":"Stack Layout"},{"location":"navigation/carousel/","text":"Using a Carousel Page \u00b6 The CarouselPage is used to swipe pages form side to side to navigate between them. Its mainly used displaying pictures. public class MainPageCS : CarouselPage { public MainPageCS () { Thickness padding ; switch ( Device . RuntimePlatform ) { case Device . iOS : case Device . Android : padding = new Thickness ( 0 , 40 , 0 , 0 ); break ; default : padding = new Thickness (); break ; } var redContentPage = new ContentPage { Padding = padding , Content = new StackLayout { Children = { new Label { Text = \"Red\" , FontSize = Device . GetNamedSize ( NamedSize . Medium , typeof ( Label )), HorizontalOptions = LayoutOptions . Center }, new BoxView { Color = Color . Red , WidthRequest = 200 , HeightRequest = 200 , HorizontalOptions = LayoutOptions . Center , VerticalOptions = LayoutOptions . CenterAndExpand } } } }; var greenContentPage = new ContentPage { Padding = padding , Content = new StackLayout { ... } }; var blueContentPage = new ContentPage { Padding = padding , Content = new StackLayout { ... } }; Children . Add ( redContentPage ); Children . Add ( greenContentPage ); Children . Add ( blueContentPage ); } }","title":"Swipe Navigation"},{"location":"navigation/carousel/#using-a-carousel-page","text":"The CarouselPage is used to swipe pages form side to side to navigate between them. Its mainly used displaying pictures. public class MainPageCS : CarouselPage { public MainPageCS () { Thickness padding ; switch ( Device . RuntimePlatform ) { case Device . iOS : case Device . Android : padding = new Thickness ( 0 , 40 , 0 , 0 ); break ; default : padding = new Thickness (); break ; } var redContentPage = new ContentPage { Padding = padding , Content = new StackLayout { Children = { new Label { Text = \"Red\" , FontSize = Device . GetNamedSize ( NamedSize . Medium , typeof ( Label )), HorizontalOptions = LayoutOptions . Center }, new BoxView { Color = Color . Red , WidthRequest = 200 , HeightRequest = 200 , HorizontalOptions = LayoutOptions . Center , VerticalOptions = LayoutOptions . CenterAndExpand } } } }; var greenContentPage = new ContentPage { Padding = padding , Content = new StackLayout { ... } }; var blueContentPage = new ContentPage { Padding = padding , Content = new StackLayout { ... } }; Children . Add ( redContentPage ); Children . Add ( greenContentPage ); Children . Add ( blueContentPage ); } }","title":"Using a Carousel Page"},{"location":"navigation/hierachical-navigation/","text":"Hierarchical Navigation \u00b6 The NavigationPage is used for hierarchical navigation. You can push and pop pages. It will automatically manage the stack of pages. Creating a Root Page \u00b6 You need to initially create a root page, afterwards you can push and pop pages. var rootPage = new NavigationPage ( new HomePage ()); Pushing a Page \u00b6 We can use the Navigation property on a ContentPage to push pages as follows : await Navigation . PushAsync ( new MoviesPage ()); This will add the MoviesPage to the stack and navigate to it. Popping a Page \u00b6 A page can be popped from the stack by pressing the back button or the hardware back buttons. Programmatically we can use the PopAsync method on the Navigation property of the ContentPage as follows : await Navigation . PopAsync (); Note the page that was pushed needs to call PopAsync Navigating to the Root Page \u00b6 We can navigate directly back to the root page using the PopToRootAsync as follows : await Navigation . PopToRootAsync (); Manipulating the Navigation Stack \u00b6 We can remove and insert pages in the navigation stack using InsertPageBefore and RemovePage. E.g after loggin in, we can insert the main page onto the stack and remove the login page as follows : //App.IsLogged = true; Navigation . InsertPageBefore ( new HomePage (), this ); await Navigation . PopAsync (); Another way to remove the login page from the navigation stack would be to set a new root page as follows : //App.IsLogged = true; Application . Current . MainPage = new HomePage (); NB: This works well when there's only the login page, otherwise you will need to pop the navigation stack first. Passing Data \u00b6 When can pass data to the new page using a constructor or using data binding. Pass Data Using Constructor \u00b6 The code below passes in the User object to the HomePage await Navigation . PushAsync ( new HomePage ( use )); Pass Data using Data Binding \u00b6 We can use data binding to pass data into the content page. The data will be available in the new page and the views can use the binding : var contact = new Contact { Name = \"Jane Doe\" , Age = 30 , Occupation = \"Developer\" , Country = \"USA\" }; var secondPage = new SecondPage (); secondPage . BindingContext = contact ; await Navigation . PushAsync ( secondPage );","title":"Hierachical Navigation"},{"location":"navigation/hierachical-navigation/#hierarchical-navigation","text":"The NavigationPage is used for hierarchical navigation. You can push and pop pages. It will automatically manage the stack of pages.","title":"Hierarchical Navigation"},{"location":"navigation/hierachical-navigation/#creating-a-root-page","text":"You need to initially create a root page, afterwards you can push and pop pages. var rootPage = new NavigationPage ( new HomePage ());","title":"Creating a Root Page"},{"location":"navigation/hierachical-navigation/#pushing-a-page","text":"We can use the Navigation property on a ContentPage to push pages as follows : await Navigation . PushAsync ( new MoviesPage ()); This will add the MoviesPage to the stack and navigate to it.","title":"Pushing a Page"},{"location":"navigation/hierachical-navigation/#popping-a-page","text":"A page can be popped from the stack by pressing the back button or the hardware back buttons. Programmatically we can use the PopAsync method on the Navigation property of the ContentPage as follows : await Navigation . PopAsync (); Note the page that was pushed needs to call PopAsync","title":"Popping a Page"},{"location":"navigation/hierachical-navigation/#navigating-to-the-root-page","text":"We can navigate directly back to the root page using the PopToRootAsync as follows : await Navigation . PopToRootAsync ();","title":"Navigating to the Root Page"},{"location":"navigation/hierachical-navigation/#manipulating-the-navigation-stack","text":"We can remove and insert pages in the navigation stack using InsertPageBefore and RemovePage. E.g after loggin in, we can insert the main page onto the stack and remove the login page as follows : //App.IsLogged = true; Navigation . InsertPageBefore ( new HomePage (), this ); await Navigation . PopAsync (); Another way to remove the login page from the navigation stack would be to set a new root page as follows : //App.IsLogged = true; Application . Current . MainPage = new HomePage (); NB: This works well when there's only the login page, otherwise you will need to pop the navigation stack first.","title":"Manipulating the Navigation Stack"},{"location":"navigation/hierachical-navigation/#passing-data","text":"When can pass data to the new page using a constructor or using data binding.","title":"Passing Data"},{"location":"navigation/hierachical-navigation/#pass-data-using-constructor","text":"The code below passes in the User object to the HomePage await Navigation . PushAsync ( new HomePage ( use ));","title":"Pass Data Using Constructor"},{"location":"navigation/hierachical-navigation/#pass-data-using-data-binding","text":"We can use data binding to pass data into the content page. The data will be available in the new page and the views can use the binding : var contact = new Contact { Name = \"Jane Doe\" , Age = 30 , Occupation = \"Developer\" , Country = \"USA\" }; var secondPage = new SecondPage (); secondPage . BindingContext = contact ; await Navigation . PushAsync ( secondPage );","title":"Pass Data using Data Binding"},{"location":"navigation/master-detail-navigation/","text":"Master Detail Navigation \u00b6 The MasterDetailPage is used to create the master and detail relationship type of pages. The one page will act as the master and the other as the detail. The MasterDetailsPage renders independently on each platform. On Android it displays a NavigationDrawer and on iOS it displays on the top left corner and allows the swiping to reveal the menu. Create a MasterDetail Page \u00b6 public class MainPageCS : MasterDetailPage { MasterPageCS masterPage ; public MainPageCS () { masterPage = new MasterPageCS (); Master = masterPage ; Detail = new NavigationPage ( new ContactsPageCS ()); ... } ... } The Master page usually contains the ListView with the menu items, and the Details contains either a ContentPage, NavigationPage or TabbedPage. Note, using any other pages might cause unexpected behaviour. Create the Master Page UI in Xaml \u00b6 ContentPage xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:local=\"using:MasterDetailPageNavigation\" x:Class=\"MasterDetailPageNavigation.MasterPage\" Padding=\"0,40,0,0\" Icon=\"hamburger.png\" Title=\"Personal Organiser\"> <StackLayout> <ListView x:Name= \"listView\" > <ListView.ItemsSource> <x:Array Type= \"{x:Type local:MasterPageItem}\" > <local:MasterPageItem Title= \"Contacts\" IconSource= \"contacts.png\" TargetType= \"{x:Type local:ContactsPage}\" /> <local:MasterPageItem Title= \"TodoList\" IconSource= \"todo.png\" TargetType= \"{x:Type local:TodoListPage}\" /> <local:MasterPageItem Title= \"Reminders\" IconSource= \"reminders.png\" TargetType= \"{x:Type local:ReminderPage}\" /> </x:Array> </ListView.ItemsSource> <ListView.ItemTemplate> <DataTemplate> <ViewCell> <Grid Padding= \"5,10\" > <Grid.ColumnDefinitions> <ColumnDefinition Width= \"30\" /> <ColumnDefinition Width= \"*\" /> </Grid.ColumnDefinitions> <Image Source= \"{Binding IconSource}\" /> <Label Grid.Column= \"1\" Text= \"{Binding Title}\" /> </Grid> </ViewCell> </DataTemplate> </ListView.ItemTemplate> </ListView> </StackLayout> </ContentPage> The page consists of a ListView that's populated with data in XAML by setting its ItemsSource property to an array of MasterPageItem instances. Each MasterPageItem defines Title, IconSource, and TargetType properties. A DataTemplate is assigned to the ListView.ItemTemplate property, to display each MasterPageItem. The DataTemplate contains a ViewCell that consists of an Image and a Label. The Image displays the IconSource property value, and the Label displays the Title property value, for each MasterPageItem. MasterPage Code \u00b6 The master page will need to expose its ListView so that events can be wired to change the pages : public partial class MasterPage : ContentPage { public ListView ListView => listView ; public MasterPage () { InitializeComponent (); } } Creating and Displaying the Detail Page \u00b6 public partial class MainPage : MasterDetailPage { public MainPage () { ... masterPage . ListView . ItemSelected += OnItemSelected ; } void OnItemSelected ( object sender , SelectedItemChangedEventArgs e ) { var item = e . SelectedItem as MasterPageItem ; if ( item != null ) { Detail = new NavigationPage (( Page ) Activator . CreateInstance ( item . TargetType )); masterPage . ListView . SelectedItem = null ; IsPresented = false ; } } }","title":"Master Detail Navigation"},{"location":"navigation/master-detail-navigation/#master-detail-navigation","text":"The MasterDetailPage is used to create the master and detail relationship type of pages. The one page will act as the master and the other as the detail. The MasterDetailsPage renders independently on each platform. On Android it displays a NavigationDrawer and on iOS it displays on the top left corner and allows the swiping to reveal the menu.","title":"Master Detail Navigation"},{"location":"navigation/master-detail-navigation/#create-a-masterdetail-page","text":"public class MainPageCS : MasterDetailPage { MasterPageCS masterPage ; public MainPageCS () { masterPage = new MasterPageCS (); Master = masterPage ; Detail = new NavigationPage ( new ContactsPageCS ()); ... } ... } The Master page usually contains the ListView with the menu items, and the Details contains either a ContentPage, NavigationPage or TabbedPage. Note, using any other pages might cause unexpected behaviour.","title":"Create a MasterDetail Page"},{"location":"navigation/master-detail-navigation/#create-the-master-page-ui-in-xaml","text":"ContentPage xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:local=\"using:MasterDetailPageNavigation\" x:Class=\"MasterDetailPageNavigation.MasterPage\" Padding=\"0,40,0,0\" Icon=\"hamburger.png\" Title=\"Personal Organiser\"> <StackLayout> <ListView x:Name= \"listView\" > <ListView.ItemsSource> <x:Array Type= \"{x:Type local:MasterPageItem}\" > <local:MasterPageItem Title= \"Contacts\" IconSource= \"contacts.png\" TargetType= \"{x:Type local:ContactsPage}\" /> <local:MasterPageItem Title= \"TodoList\" IconSource= \"todo.png\" TargetType= \"{x:Type local:TodoListPage}\" /> <local:MasterPageItem Title= \"Reminders\" IconSource= \"reminders.png\" TargetType= \"{x:Type local:ReminderPage}\" /> </x:Array> </ListView.ItemsSource> <ListView.ItemTemplate> <DataTemplate> <ViewCell> <Grid Padding= \"5,10\" > <Grid.ColumnDefinitions> <ColumnDefinition Width= \"30\" /> <ColumnDefinition Width= \"*\" /> </Grid.ColumnDefinitions> <Image Source= \"{Binding IconSource}\" /> <Label Grid.Column= \"1\" Text= \"{Binding Title}\" /> </Grid> </ViewCell> </DataTemplate> </ListView.ItemTemplate> </ListView> </StackLayout> </ContentPage> The page consists of a ListView that's populated with data in XAML by setting its ItemsSource property to an array of MasterPageItem instances. Each MasterPageItem defines Title, IconSource, and TargetType properties. A DataTemplate is assigned to the ListView.ItemTemplate property, to display each MasterPageItem. The DataTemplate contains a ViewCell that consists of an Image and a Label. The Image displays the IconSource property value, and the Label displays the Title property value, for each MasterPageItem.","title":"Create the Master Page UI in Xaml"},{"location":"navigation/master-detail-navigation/#masterpage-code","text":"The master page will need to expose its ListView so that events can be wired to change the pages : public partial class MasterPage : ContentPage { public ListView ListView => listView ; public MasterPage () { InitializeComponent (); } }","title":"MasterPage Code"},{"location":"navigation/master-detail-navigation/#creating-and-displaying-the-detail-page","text":"public partial class MainPage : MasterDetailPage { public MainPage () { ... masterPage . ListView . ItemSelected += OnItemSelected ; } void OnItemSelected ( object sender , SelectedItemChangedEventArgs e ) { var item = e . SelectedItem as MasterPageItem ; if ( item != null ) { Detail = new NavigationPage (( Page ) Activator . CreateInstance ( item . TargetType )); masterPage . ListView . SelectedItem = null ; IsPresented = false ; } } }","title":"Creating and Displaying the Detail Page"},{"location":"navigation/tabbed-navigation/","text":"Tabbed Navigation \u00b6 The TabbedPage is used for tabbed navigation. The layout of the a TabbedPage is dependent on the platform. On Android the tabs are displayed at the top and on iOS at the bottom. On iOS the tabs have a GetIcon method that can be overridden to load icons from specified source. On Android tabs have a SetTabIcon method that allows loading icons from a custom drawable. Create a Tabbed Page in Code \u00b6 The TabbedPage have a Children property. We can assign child objects to the property to add them to the TabbedPage as follows : public class MainPageCS : TabbedPage { public MainPageCS () { var navigationPage = new NavigationPage ( new SchedulePageCS ()); navigationPage . Icon = \"schedule.png\" ; navigationPage . Title = \"Schedule\" ; Children . Add ( new TodayPageCS ()); Children . Add ( navigationPage ); } } Bottom Navigation tabs on Android \u00b6 We can show the tabs at the bottom on Android by adding the following code in the class that derives from the tabbed page: On < Xamarin . Forms . PlatformConfiguration . Android >(). SetToolbarPlacement ( ToolbarPlacement . Bottom ); Change Colors \u00b6 The tab bar can be customized for each platform iOS \u00b6 The changes below should be madein the iOS project Open the AppDelegate.cs file Within the method FinishedLaunching add the following lines public override bool FinishedLaunching ( UIApplication app , NSDictionary options ) { // The background color of the tab bar UITabBar.Appearance.BarTintColor = UIColor.Orange ; // Change the tint of the selected image and text UITabBar.Appearance.SelectedImageTintColor = UIColor.White ; global : : Xamarin . Forms . Forms . Init (); LoadApplication(new App()) ; return base.FinishedLaunching(app, options) ; } Android \u00b6 On Android you can change the colors in the Android project under the Resources -> values - >","title":"Tabbed Navigation"},{"location":"navigation/tabbed-navigation/#tabbed-navigation","text":"The TabbedPage is used for tabbed navigation. The layout of the a TabbedPage is dependent on the platform. On Android the tabs are displayed at the top and on iOS at the bottom. On iOS the tabs have a GetIcon method that can be overridden to load icons from specified source. On Android tabs have a SetTabIcon method that allows loading icons from a custom drawable.","title":"Tabbed Navigation"},{"location":"navigation/tabbed-navigation/#create-a-tabbed-page-in-code","text":"The TabbedPage have a Children property. We can assign child objects to the property to add them to the TabbedPage as follows : public class MainPageCS : TabbedPage { public MainPageCS () { var navigationPage = new NavigationPage ( new SchedulePageCS ()); navigationPage . Icon = \"schedule.png\" ; navigationPage . Title = \"Schedule\" ; Children . Add ( new TodayPageCS ()); Children . Add ( navigationPage ); } }","title":"Create a Tabbed Page in Code"},{"location":"navigation/tabbed-navigation/#bottom-navigation-tabs-on-android","text":"We can show the tabs at the bottom on Android by adding the following code in the class that derives from the tabbed page: On < Xamarin . Forms . PlatformConfiguration . Android >(). SetToolbarPlacement ( ToolbarPlacement . Bottom );","title":"Bottom Navigation tabs on Android"},{"location":"navigation/tabbed-navigation/#change-colors","text":"The tab bar can be customized for each platform","title":"Change Colors"},{"location":"navigation/tabbed-navigation/#ios","text":"The changes below should be madein the iOS project Open the AppDelegate.cs file Within the method FinishedLaunching add the following lines public override bool FinishedLaunching ( UIApplication app , NSDictionary options ) { // The background color of the tab bar UITabBar.Appearance.BarTintColor = UIColor.Orange ; // Change the tint of the selected image and text UITabBar.Appearance.SelectedImageTintColor = UIColor.White ; global : : Xamarin . Forms . Forms . Init (); LoadApplication(new App()) ; return base.FinishedLaunching(app, options) ; }","title":"iOS"},{"location":"navigation/tabbed-navigation/#android","text":"On Android you can change the colors in the Android project under the Resources -> values - >","title":"Android"},{"location":"navigation/pop-ups/modal-pop-ups/","text":"Modal Pop Up \u00b6 To display a modal pop up we use the the Navigation property and call PushModalAsync . It will be your responsibility to pop the page off the stack. var detailPage = new DetailPage (); await Navigation . PushModalAsync ( detailPage and then in the DetailPage, the page can pop itself from the stack using PopModalAsync method of the Navigation property. await Navigation . PopModalAsync (); //Dismiss the pop up","title":"Modal Popups"},{"location":"navigation/pop-ups/modal-pop-ups/#modal-pop-up","text":"To display a modal pop up we use the the Navigation property and call PushModalAsync . It will be your responsibility to pop the page off the stack. var detailPage = new DetailPage (); await Navigation . PushModalAsync ( detailPage and then in the DetailPage, the page can pop itself from the stack using PopModalAsync method of the Navigation property. await Navigation . PopModalAsync (); //Dismiss the pop up","title":"Modal Pop Up"},{"location":"navigation/pop-ups/pop-ups/","text":"Pop Ups \u00b6 Xamarin.Forms provides support for modal pages. A modal page encourages users to complete a self-contained task that cannot be navigated away from until the task is completed or cancelled. They are different types of pop up. Alerts Action Sheets Modal Page Pop Up Alerts \u00b6 We can display an alert using DisplayAlert method on the Page DisplayAlert ( \"Alert\" , \"You have been alerted\" , \"OK\" ); We can get the result from the alert by assign the return to a variable var result = DisplayAlert ( \"Delete\" , \"Delete file\" , \"OK\" , \"Cancel\" ); Action Sheets \u00b6 Action Sheets let the user choose from a list of options. To display the action sheets we use DisplayActionSheet var action = await DisplayActionSheet ( \"ActionSheet: Send to?\" , \"Cancel\" , null , \"Email\" , \"Twitter\" , \"Facebook\" ); The destroy button is rendered differently than the others, and can be left null or specified as the third string parameter.","title":"Normal Popups"},{"location":"navigation/pop-ups/pop-ups/#pop-ups","text":"Xamarin.Forms provides support for modal pages. A modal page encourages users to complete a self-contained task that cannot be navigated away from until the task is completed or cancelled. They are different types of pop up. Alerts Action Sheets Modal Page Pop Up","title":"Pop Ups"},{"location":"navigation/pop-ups/pop-ups/#alerts","text":"We can display an alert using DisplayAlert method on the Page DisplayAlert ( \"Alert\" , \"You have been alerted\" , \"OK\" ); We can get the result from the alert by assign the return to a variable var result = DisplayAlert ( \"Delete\" , \"Delete file\" , \"OK\" , \"Cancel\" );","title":"Alerts"},{"location":"navigation/pop-ups/pop-ups/#action-sheets","text":"Action Sheets let the user choose from a list of options. To display the action sheets we use DisplayActionSheet var action = await DisplayActionSheet ( \"ActionSheet: Send to?\" , \"Cancel\" , null , \"Email\" , \"Twitter\" , \"Facebook\" ); The destroy button is rendered differently than the others, and can be left null or specified as the third string parameter.","title":"Action Sheets"},{"location":"pages/carousel-page/","text":"","title":"Carousel page"},{"location":"pages/content-page/","text":"ContentPage \u00b6 A ContentPage is a single view and has one child. In most instances, the child is either one of the layouts, StackLayout , ScrollView or a GridLayout . The default XAML page created with the new project template creates a ContentPage . ContentPage XAML \u00b6 Here is the simple default ContentPage created with the new project template : <!-- Define the XML version being used --> <?xml version=\"1.0\" encoding=\"utf-8\"?> <!-- This defines the page as a ContentPage --> <ContentPage xmlns= \"http://xamarin.com/schemas/2014/forms\" xmlns:x= \"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:local= \"clr-namespace:Intro\" x:Class= \"Intro.MainPage\" > <!-- The single child of the ContentPage, in this instance its a StackLayout --> <StackLayout> <!-- Place new controls here --> <Label Text= \"Welcome to Xamarin.Forms!\" HorizontalOptions= \"Center\" VerticalOptions= \"CenterAndExpand\" /> </StackLayout> </ContentPage> The ContentPage is defined using the opening and closing ContentPage XML tags as follows : <ContentPage> <!-- Place the single child here --> </ContentPage> When definig the ContentPage the following XML attributes are also defined : xmlns - This is the XML namespace used for the whole of the ContentPage . xmlns:x - The x within the xmlns defined previously provides a way to refer to the types defined in the XAML specification. Note that there's nothing special about x , it could have been any ;letter. -- xmlns:local - The local is used to namespace types defined with your local project namespace. Nothing special too about local , it could have been naming anything really. Note To create the association between this XAML file with its corresponding C# file the x:Class=\"Intro.MainPage\" XML attribute is used.","title":"ContentPage"},{"location":"pages/content-page/#contentpage","text":"A ContentPage is a single view and has one child. In most instances, the child is either one of the layouts, StackLayout , ScrollView or a GridLayout . The default XAML page created with the new project template creates a ContentPage .","title":"ContentPage"},{"location":"pages/content-page/#contentpage-xaml","text":"Here is the simple default ContentPage created with the new project template : <!-- Define the XML version being used --> <?xml version=\"1.0\" encoding=\"utf-8\"?> <!-- This defines the page as a ContentPage --> <ContentPage xmlns= \"http://xamarin.com/schemas/2014/forms\" xmlns:x= \"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:local= \"clr-namespace:Intro\" x:Class= \"Intro.MainPage\" > <!-- The single child of the ContentPage, in this instance its a StackLayout --> <StackLayout> <!-- Place new controls here --> <Label Text= \"Welcome to Xamarin.Forms!\" HorizontalOptions= \"Center\" VerticalOptions= \"CenterAndExpand\" /> </StackLayout> </ContentPage> The ContentPage is defined using the opening and closing ContentPage XML tags as follows : <ContentPage> <!-- Place the single child here --> </ContentPage> When definig the ContentPage the following XML attributes are also defined : xmlns - This is the XML namespace used for the whole of the ContentPage . xmlns:x - The x within the xmlns defined previously provides a way to refer to the types defined in the XAML specification. Note that there's nothing special about x , it could have been any ;letter. -- xmlns:local - The local is used to namespace types defined with your local project namespace. Nothing special too about local , it could have been naming anything really. Note To create the association between this XAML file with its corresponding C# file the x:Class=\"Intro.MainPage\" XML attribute is used.","title":"ContentPage XAML"},{"location":"pages/master-detail-page/","text":"","title":"Master detail page"},{"location":"pages/navigation-page/","text":"NavigationPage \u00b6 The NavigationPage is used for hierarchical navigation. Pages are pushed and popped onto the stack. You will mainly use the NavigationPage in code. When the root page is wrapped in a NavigationPage subsequent pages can be pushed and popped from the stack. Add Root Page to NavigationPage \u00b6 To add the root page to the NavigationPage we just need to pass the page in the constructor of the NavigationPage as follows : ... // Assign the MainPage of the App to be the NavigationPage // and have MainPage be the root page of the navigation MainPage = new NavigationPage ( new MainPage ()); ... With the above code, a navigation bar will be added in an iOS app, and a toolbar in an Android app. Add Title to the Navigation Page \u00b6 When you add a Title property to the page, it will be displayed in the Toolbar in Android and the Navigation Bar in iOS. The Title can be added in code as follows : ... // Assign the MainPage of the App to be the NavigationPage // and have MainPage be the root page of the navigation MainPage = new NavigationPage ( new MainPage () { Title = ' Main ' }); ... or it can be added in XAML as follows : <?xml version=\"1.0\" encoding=\"utf-8\"?> <ContentPage Title= \"Main\" Icon= \"heart\" Padding= \"20\" xmlns= \"http://xamarin.com/schemas/2014/forms\" xmlns:x= \"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:local= \"clr-namespace:NavigationDemo\" x:Class= \"NavigationDemo.MainPage\" > We will get the following : Navigating with a Button Click \u00b6 We will add an event handler to the button and navigate to the next page. MainPage.xaml <?xml version=\"1.0\" encoding=\"utf-8\"?> <ContentPage Title= \"Main\" Icon= \"heart\" Padding= \"20\" xmlns= \"http://xamarin.com/schemas/2014/forms\" xmlns:x= \"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:local= \"clr-namespace:NavigationDemo\" x:Class= \"NavigationDemo.MainPage\" > <StackLayout> <Label Text= \"{Binding Username, StringFormat='Username {0}'}\" /> <Button Text= \"Page 2\" Clicked= \"GotoPage2\" /> </StackLayout> </ContentPage> and in the MainPage.xaml.cs we will have the following method defined to handle the click event public partial class MainPage : ContentPage { // Handle the click event // and navigate to Page 2 async void GotoPage2 ( object sender , System . EventArgs e ) { await Navigation . PushAsync ( new Page2 ()); } }","title":"NavigationPage"},{"location":"pages/navigation-page/#navigationpage","text":"The NavigationPage is used for hierarchical navigation. Pages are pushed and popped onto the stack. You will mainly use the NavigationPage in code. When the root page is wrapped in a NavigationPage subsequent pages can be pushed and popped from the stack.","title":"NavigationPage"},{"location":"pages/navigation-page/#add-root-page-to-navigationpage","text":"To add the root page to the NavigationPage we just need to pass the page in the constructor of the NavigationPage as follows : ... // Assign the MainPage of the App to be the NavigationPage // and have MainPage be the root page of the navigation MainPage = new NavigationPage ( new MainPage ()); ... With the above code, a navigation bar will be added in an iOS app, and a toolbar in an Android app.","title":"Add Root Page to NavigationPage"},{"location":"pages/navigation-page/#add-title-to-the-navigation-page","text":"When you add a Title property to the page, it will be displayed in the Toolbar in Android and the Navigation Bar in iOS. The Title can be added in code as follows : ... // Assign the MainPage of the App to be the NavigationPage // and have MainPage be the root page of the navigation MainPage = new NavigationPage ( new MainPage () { Title = ' Main ' }); ... or it can be added in XAML as follows : <?xml version=\"1.0\" encoding=\"utf-8\"?> <ContentPage Title= \"Main\" Icon= \"heart\" Padding= \"20\" xmlns= \"http://xamarin.com/schemas/2014/forms\" xmlns:x= \"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:local= \"clr-namespace:NavigationDemo\" x:Class= \"NavigationDemo.MainPage\" > We will get the following :","title":"Add Title to the Navigation Page"},{"location":"pages/navigation-page/#navigating-with-a-button-click","text":"We will add an event handler to the button and navigate to the next page. MainPage.xaml <?xml version=\"1.0\" encoding=\"utf-8\"?> <ContentPage Title= \"Main\" Icon= \"heart\" Padding= \"20\" xmlns= \"http://xamarin.com/schemas/2014/forms\" xmlns:x= \"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:local= \"clr-namespace:NavigationDemo\" x:Class= \"NavigationDemo.MainPage\" > <StackLayout> <Label Text= \"{Binding Username, StringFormat='Username {0}'}\" /> <Button Text= \"Page 2\" Clicked= \"GotoPage2\" /> </StackLayout> </ContentPage> and in the MainPage.xaml.cs we will have the following method defined to handle the click event public partial class MainPage : ContentPage { // Handle the click event // and navigate to Page 2 async void GotoPage2 ( object sender , System . EventArgs e ) { await Navigation . PushAsync ( new Page2 ()); } }","title":"Navigating with a Button Click"},{"location":"pages/tabbed-page/","text":"","title":"Tabbed page"},{"location":"pages/template-page/","text":"","title":"Template page"},{"location":"persistence/preferences/","text":"Preferences \u00b6 Using the Xamarin.Essentials library we can store preferences for each platform using a common api. Install the Xamarin.Essentials \u00b6 At the time of writing the Xamarin.Essentials library is still in preview. You will need to enable install pre-release nuget packages. Set Preference \u00b6 To set the preferences, you we use the the Set method. The key is a string and the value could be any value type. Preferences . Set ( \"nickname\" , \"Joseph\" ); Read Preference \u00b6 To read the preference, we use the Get static method of the Preference class as follows : var nickname = Preferences . Get ( \"nickname\" , string . Empty ); You will need to pass a default value if the preference is not found. Remove the Preference \u00b6 Use the Remove method and pass in the key. Preferences . Remove ( \"nickname\" ); Remove all Preferences \u00b6 We can use the Clear method to remove all the preferences set. Named Preferences \u00b6 On Android, if we do not provide a name when setting to getting the preferences, the default preferences are used. We can alternatively provide a name when setting and getting the preferences. Preferences . Set ( \"nickname\" , \"Joseph\" , \"private_prefs\" ); On iOS, a named StandardUserDefaults file we be created to store the named preferences.","title":"Preferences"},{"location":"persistence/preferences/#preferences","text":"Using the Xamarin.Essentials library we can store preferences for each platform using a common api.","title":"Preferences"},{"location":"persistence/preferences/#install-the-xamarinessentials","text":"At the time of writing the Xamarin.Essentials library is still in preview. You will need to enable install pre-release nuget packages.","title":"Install the Xamarin.Essentials"},{"location":"persistence/preferences/#set-preference","text":"To set the preferences, you we use the the Set method. The key is a string and the value could be any value type. Preferences . Set ( \"nickname\" , \"Joseph\" );","title":"Set Preference"},{"location":"persistence/preferences/#read-preference","text":"To read the preference, we use the Get static method of the Preference class as follows : var nickname = Preferences . Get ( \"nickname\" , string . Empty ); You will need to pass a default value if the preference is not found.","title":"Read Preference"},{"location":"persistence/preferences/#remove-the-preference","text":"Use the Remove method and pass in the key. Preferences . Remove ( \"nickname\" );","title":"Remove the Preference"},{"location":"persistence/preferences/#remove-all-preferences","text":"We can use the Clear method to remove all the preferences set.","title":"Remove all Preferences"},{"location":"persistence/preferences/#named-preferences","text":"On Android, if we do not provide a name when setting to getting the preferences, the default preferences are used. We can alternatively provide a name when setting and getting the preferences. Preferences . Set ( \"nickname\" , \"Joseph\" , \"private_prefs\" ); On iOS, a named StandardUserDefaults file we be created to store the named preferences.","title":"Named Preferences"},{"location":"persistence/sqlite/","text":"SQLite.NET \u00b6 The SQLite database is the most popular relational database on mobile devices. Install the library \u00b6 To work with SQLite database you will need to install the sqlite-net-pcl Nuget package in both the PCL and Android and iOS projects. Database file path on Android and iOS \u00b6 The database is stored in different location on Android and iOS. We will need to write code in each of the native projects and use the DependencyService to resolve the path during runtime on each platform. We will use an interface that we will implement on each native project. Define the interface in the PCP project \u00b6 Define the interface in the PCL project IFileHelper.cs public interface IFileHelper { string GetLocalPath ( string filename ); } Implement the interface on Android Filehelper.cs [assembly: Dependency(typeof(FileHelper))] namespace DataBindingDemo.Droid { public class FileHelper : IFileHelper { public string GetLocalPath ( string filename ) { var documentsFolder = Environment . GetFolderPath ( Environment . SpecialFolder . Personal ); return Path . Combine ( documentsFolder , filename ); } } } Note The files are kept on the apps files folder on Android. To register the class with the DependencyService we use the assembly attribute and specify the file name using [assembly: Dependency(typeof(FileHelper))] . We do the same on iOS as well. Note that the attribute needs to be above the namespace definition. ** Implement the interface on iOS FileHelper.cs [assembly: Dependency(typeof(FileHelper))] namespace DataBindingDemo.iOS { public class FileHelper : IFileHelper { public string GetLocalPath ( string filename ) { //Get path of the document folder var documentFolder = Environment . GetFolderPath ( Environment . SpecialFolder . Personal ); //Get path of the Library folder var libraryFolder = Path . Combine ( documentFolder , \"..\" , \"Library\" , \"Databases\" ); if (! Directory . Exists ( libraryFolder )) { Directory . CreateDirectory ( libraryFolder ); } return Path . Combine ( libraryFolder , filename ); } } } On iOS, user files are kept in the Library folder. We first need to get the path of the Documents folder and then navigate to the Library folder. We register the class with the DependencyService the same way as on Android using the [assembly: Dependency(typeof(FileHelper))] . On we have provided the implementation in each project, we can now resolve the class during runtime. Create Database \u00b6 To create the database connection we use the SqliteConnection and require a path. So we will use the DependencyService to resolve the path on the platform on which we are running on. // Resolve the FileHelper var fileHelper = DependencyService . Get < IFileHelper >(); if ( fileHelper != null ) { var databasepath = fileHelper . GetLocalPath ( \"chats.db\" ); var conn = new SQLiteConnection ( databasepath ); } Using DependencyService.Get<IFileHelper>() we can resolve the platform specific code for the FileHelper . On iOS it will call the iOS specific FileHelper code and on Android, it will resolve to the Android specific Filehelper code we defined. Create a Table \u00b6 To create the table you use the CreateTable<T> generic method of the connection as follows : var conn = new SQLiteConnection ( databasepath ); var id = conn . CreateTable < ChatMessage >(); Debug . WriteLine ( id ); If the table exists its not created. The return will be zero for a successful table creation. Insert data \u00b6 We use the Insert method to insert new data into the table. SQLite.net will figure out the type and insert the data into the correct table. To insert data into out chat table, we can do the the following: _conn . Insert ( new ChatMessage () { FromId = \"josephk\" , ToId = \"#general\" , Message = MessageEntry . Text , HasAttachments = false }); Retrieve data from a table \u00b6 We can query the table using the generic method Table<T> on the connection object. E.g. to return all the records in the chat, we can do the following : var results = _conn . Table < ChatMessage >(); results . ForEach (( ChatMessage msg ) => { Debug . WriteLine ( $ \"{msg.Id} {msg.Message}\" ); }); We can also use LINQ and perform some filters on the returned data. E.g. to return all messages with attachments : var results = _conn . Table < ChatMessage >(). Where ( msg => msg . HasAttachments ); Delete a record \u00b6 We can use the Delete method to remove a record from the table. _conn . Delete < ChatMessage >( 1 ) The 1 is the primary key. We can also pass in the object to be deleted instead of its primary key. Update table data \u00b6 We can use the Update method to update an existing record. Asynchronous methods calls \u00b6 The SQLite.net library also supports the asynchronous methods for creating the database, querying, updating and deleting methods. SQLiteAsyncConnection InsertAsync UpdateAsync DeleteAsync","title":"SQLite.NET"},{"location":"persistence/sqlite/#sqlitenet","text":"The SQLite database is the most popular relational database on mobile devices.","title":"SQLite.NET"},{"location":"persistence/sqlite/#install-the-library","text":"To work with SQLite database you will need to install the sqlite-net-pcl Nuget package in both the PCL and Android and iOS projects.","title":"Install the library"},{"location":"persistence/sqlite/#database-file-path-on-android-and-ios","text":"The database is stored in different location on Android and iOS. We will need to write code in each of the native projects and use the DependencyService to resolve the path during runtime on each platform. We will use an interface that we will implement on each native project.","title":"Database file path on Android and iOS"},{"location":"persistence/sqlite/#define-the-interface-in-the-pcp-project","text":"Define the interface in the PCL project IFileHelper.cs public interface IFileHelper { string GetLocalPath ( string filename ); } Implement the interface on Android Filehelper.cs [assembly: Dependency(typeof(FileHelper))] namespace DataBindingDemo.Droid { public class FileHelper : IFileHelper { public string GetLocalPath ( string filename ) { var documentsFolder = Environment . GetFolderPath ( Environment . SpecialFolder . Personal ); return Path . Combine ( documentsFolder , filename ); } } } Note The files are kept on the apps files folder on Android. To register the class with the DependencyService we use the assembly attribute and specify the file name using [assembly: Dependency(typeof(FileHelper))] . We do the same on iOS as well. Note that the attribute needs to be above the namespace definition. ** Implement the interface on iOS FileHelper.cs [assembly: Dependency(typeof(FileHelper))] namespace DataBindingDemo.iOS { public class FileHelper : IFileHelper { public string GetLocalPath ( string filename ) { //Get path of the document folder var documentFolder = Environment . GetFolderPath ( Environment . SpecialFolder . Personal ); //Get path of the Library folder var libraryFolder = Path . Combine ( documentFolder , \"..\" , \"Library\" , \"Databases\" ); if (! Directory . Exists ( libraryFolder )) { Directory . CreateDirectory ( libraryFolder ); } return Path . Combine ( libraryFolder , filename ); } } } On iOS, user files are kept in the Library folder. We first need to get the path of the Documents folder and then navigate to the Library folder. We register the class with the DependencyService the same way as on Android using the [assembly: Dependency(typeof(FileHelper))] . On we have provided the implementation in each project, we can now resolve the class during runtime.","title":"Define the interface in the PCP project"},{"location":"persistence/sqlite/#create-database","text":"To create the database connection we use the SqliteConnection and require a path. So we will use the DependencyService to resolve the path on the platform on which we are running on. // Resolve the FileHelper var fileHelper = DependencyService . Get < IFileHelper >(); if ( fileHelper != null ) { var databasepath = fileHelper . GetLocalPath ( \"chats.db\" ); var conn = new SQLiteConnection ( databasepath ); } Using DependencyService.Get<IFileHelper>() we can resolve the platform specific code for the FileHelper . On iOS it will call the iOS specific FileHelper code and on Android, it will resolve to the Android specific Filehelper code we defined.","title":"Create Database"},{"location":"persistence/sqlite/#create-a-table","text":"To create the table you use the CreateTable<T> generic method of the connection as follows : var conn = new SQLiteConnection ( databasepath ); var id = conn . CreateTable < ChatMessage >(); Debug . WriteLine ( id ); If the table exists its not created. The return will be zero for a successful table creation.","title":"Create a Table"},{"location":"persistence/sqlite/#insert-data","text":"We use the Insert method to insert new data into the table. SQLite.net will figure out the type and insert the data into the correct table. To insert data into out chat table, we can do the the following: _conn . Insert ( new ChatMessage () { FromId = \"josephk\" , ToId = \"#general\" , Message = MessageEntry . Text , HasAttachments = false });","title":"Insert data"},{"location":"persistence/sqlite/#retrieve-data-from-a-table","text":"We can query the table using the generic method Table<T> on the connection object. E.g. to return all the records in the chat, we can do the following : var results = _conn . Table < ChatMessage >(); results . ForEach (( ChatMessage msg ) => { Debug . WriteLine ( $ \"{msg.Id} {msg.Message}\" ); }); We can also use LINQ and perform some filters on the returned data. E.g. to return all messages with attachments : var results = _conn . Table < ChatMessage >(). Where ( msg => msg . HasAttachments );","title":"Retrieve data from a table"},{"location":"persistence/sqlite/#delete-a-record","text":"We can use the Delete method to remove a record from the table. _conn . Delete < ChatMessage >( 1 ) The 1 is the primary key. We can also pass in the object to be deleted instead of its primary key.","title":"Delete a record"},{"location":"persistence/sqlite/#update-table-data","text":"We can use the Update method to update an existing record.","title":"Update table data"},{"location":"persistence/sqlite/#asynchronous-methods-calls","text":"The SQLite.net library also supports the asynchronous methods for creating the database, querying, updating and deleting methods. SQLiteAsyncConnection InsertAsync UpdateAsync DeleteAsync","title":"Asynchronous methods calls"},{"location":"views/activity-indicator/","text":"Activity Indicator \u00b6 Gives the user an indication that something is happening without showing the progress. If you would like to show progress of an activity use the ProgressBar instead. In XAML \u00b6 <ActivityIndicator IsRunning= \"true\" /> We can also choose the color as follows : <ActivityIndicator IsRunning= \"true\" Color= \"Fuchsia\" /> In Code \u00b6 var activityIndicator = new ActivityIndicator { IsRunning = true , Color = Color . Fuchsia };","title":"Activity Indicator"},{"location":"views/activity-indicator/#activity-indicator","text":"Gives the user an indication that something is happening without showing the progress. If you would like to show progress of an activity use the ProgressBar instead.","title":"Activity Indicator"},{"location":"views/activity-indicator/#in-xaml","text":"<ActivityIndicator IsRunning= \"true\" /> We can also choose the color as follows : <ActivityIndicator IsRunning= \"true\" Color= \"Fuchsia\" />","title":"In XAML"},{"location":"views/activity-indicator/#in-code","text":"var activityIndicator = new ActivityIndicator { IsRunning = true , Color = Color . Fuchsia };","title":"In Code"},{"location":"views/box-view/","text":"BoxView \u00b6 The BoxView is used to draw a solid colored rectangle. Xamarin does not have the other shapes out of the box. By default the size of the BoxView is 40x40 but you can use the WidthRequest and HeightRequest property to choose different sizes. In XAML \u00b6 <BoxView Color= \"Orange\" HorizontalOptions= \"Center\" VerticalOptions= \"Center\" /> In Code \u00b6 var boxView = new BoxView { HorizontalOptions = LayoutOptions . Center , VerticalOptions = LayoutOptions . CenterAndExpand , WidthRequest = 100 , HeightRequest = 100 };","title":"BoxView"},{"location":"views/box-view/#boxview","text":"The BoxView is used to draw a solid colored rectangle. Xamarin does not have the other shapes out of the box. By default the size of the BoxView is 40x40 but you can use the WidthRequest and HeightRequest property to choose different sizes.","title":"BoxView"},{"location":"views/box-view/#in-xaml","text":"<BoxView Color= \"Orange\" HorizontalOptions= \"Center\" VerticalOptions= \"Center\" />","title":"In XAML"},{"location":"views/box-view/#in-code","text":"var boxView = new BoxView { HorizontalOptions = LayoutOptions . Center , VerticalOptions = LayoutOptions . CenterAndExpand , WidthRequest = 100 , HeightRequest = 100 };","title":"In Code"},{"location":"views/buttons/","text":"Button \u00b6 The Button view reacts to click events. Define in XAML \u00b6 <Button Text= \"Login\" /> Define in Code \u00b6 var button = new Button { Text = \"Login\" }; Add a Click Event \u00b6 We can attach a Click event to the Button in XAML and define a function in the backing code file with the function to handle the Button click event as follows : In XAML <Button Text= \"Login\" Clicked= \"OnLoginButtonClicked\" /> In Backing Code File void OnLoginButtonClicked ( object sender , System . EventArgs e ) { //Do something } Define the Click Event in Code We can define the Button in XAML and attach the Click event in code. The Button will need to be named in XAML. We can give names to controls in XAML using the extension x:Name as following : <Button Text= \"Login\" x:Name= \"btnLogin\" /> Note The x:Name is a namespace defined on the XAML content page as follows xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" A variable with the name btnLogin will be automatically generated and be available in the code file for the content page. Wire Event in Code After defining the name, we can now access the variable and attach the Clicked event as follows : btnLogin . Clicked += ( sender , e ) => { //Do something }; Styled Button \u00b6 On iOS, the default button does not have a border. We can add border, change the border color, border corners and background color using the BorderWidth , BorderColor , BorderRadius and BackgroundColor . <StackLayout Padding= \"10\" > <Button Text= \"Default Button\" /> <Button Text= \"Button with Border\" BorderWidth= \"1\" BorderColor= \"Silver\" /> <Button Text= \"Rounded Corner Button\" BorderWidth= \"1\" BorderColor= \"Orange\" BackgroundColor= \"Orange\" BorderRadius= \"8\" TextColor= \"White\" /> <Button Text= \"Button with Transparent Background\" BorderWidth= \"1\" BorderColor= \"Silver\" TextColor= \"Orange\" BackgroundColor= \"Transparent\" /> <Button BackgroundColor= \"Transparent\" Text= \"Button with Image\" TextColor= \"Orange\" HorizontalOptions= \"Start\" Image= \"favorite\" BorderColor= \"Silver\" BorderWidth= \"1\" /> </StackLayout> Note Remember if you are using images, you will need to add them to each project, Android and iOS. For Android, you need to add the images under Resources\\drawable-* and for iOS you will need to add an Asset catalog and then add an Image Set . For iOS it's recommended to use vector formats so that you do not have to specify multiple images. Circle Button \u00b6 You will need to use a renderer in order to achieve this. The simplest way is to use a plugin. Here is a plugin that can achieve circle buttons, Circle Button Plugin Commanding with Button \u00b6 Note Commanding is an advanced topic, we will explore this in much detail under the MVVM section. For now, we will go through the high level details on how to add a command to a button. In using the MVVM(Model View-ViewModel) design pattern, there's a separation of the UI and business logic. If we had a button and we had some logic we wanted to run in the model, we can use the commanding interface to run our logic. Define the Command \u00b6 We first need to define the command property. It should be of type ICommand . This is an interface that have a few methods. public ICommand DisplayAlertCommand { get ; private set ; } Initialize the command in the constructor \u00b6 Next we need to initialize the command in the constructor of the model : public DemoViewModel ( Page page ) { this . _page = page ; DisplayAlertCommand = new Command ( ShowAlert ); } and define the function that is called by the command, in our case we will show an alert using the Page DisplayAlert method as follows : private async void ShowAlert ( object obj ) { await _page . DisplayAlert ( \"Alert\" , \"Howdy from Command Button\" , \"OK\" ); } Initialize the model in the content page class \u00b6 Once we have everything setup in the model, we can now create a new instance of the model and set it up as the BindingContext for our UI as follows : BindingContext = new DemoViewModel ( this ); Add the Binding to the button \u00b6 Now we can bind the button to the command in our model in XAML as follows : <Button Text= \"Bound to Command\" Command= \"{Binding DisplayAlertCommand}\" /> Putting everything together \u00b6 Model\\DemoModel.cs public class DemoViewModel { public ICommand DisplayAlertCommand { get ; private set ; } Page _page ; public DemoViewModel ( Page page ) { _page = page ; DisplayAlertCommand = new Command ( ShowAlert ); } private async void ShowAlert ( object obj ) { await _page . DisplayAlert ( \"Alert\" , \"Howdy from Command Button\" , \"OK\" ); } } ButtonCommandPage.cs public partial class ButtonCommandPage : ContentPage { public ButtonCommandPage () { InitializeComponent (); BindingContext = new DemoViewModel ( this ); } } ButtonCommandPage.xaml <?xml version=\"1.0\" encoding=\"UTF-8\"?> <ContentPage xmlns= \"http://xamarin.com/schemas/2014/forms\" xmlns:x= \"http://schemas.microsoft.com/winfx/2009/xaml\" x:Class= \"TextSample.Views.ButtonCommandPage\" > <ContentPage.Content> <Button Text= \"Bound to Command\" Command= \"{Binding DisplayAlertCommand}\" /> </ContentPage.Content> </ContentPage>","title":"Button"},{"location":"views/buttons/#button","text":"The Button view reacts to click events.","title":"Button"},{"location":"views/buttons/#define-in-xaml","text":"<Button Text= \"Login\" />","title":"Define in XAML"},{"location":"views/buttons/#define-in-code","text":"var button = new Button { Text = \"Login\" };","title":"Define in Code"},{"location":"views/buttons/#add-a-click-event","text":"We can attach a Click event to the Button in XAML and define a function in the backing code file with the function to handle the Button click event as follows : In XAML <Button Text= \"Login\" Clicked= \"OnLoginButtonClicked\" /> In Backing Code File void OnLoginButtonClicked ( object sender , System . EventArgs e ) { //Do something } Define the Click Event in Code We can define the Button in XAML and attach the Click event in code. The Button will need to be named in XAML. We can give names to controls in XAML using the extension x:Name as following : <Button Text= \"Login\" x:Name= \"btnLogin\" /> Note The x:Name is a namespace defined on the XAML content page as follows xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" A variable with the name btnLogin will be automatically generated and be available in the code file for the content page. Wire Event in Code After defining the name, we can now access the variable and attach the Clicked event as follows : btnLogin . Clicked += ( sender , e ) => { //Do something };","title":"Add a Click Event"},{"location":"views/buttons/#styled-button","text":"On iOS, the default button does not have a border. We can add border, change the border color, border corners and background color using the BorderWidth , BorderColor , BorderRadius and BackgroundColor . <StackLayout Padding= \"10\" > <Button Text= \"Default Button\" /> <Button Text= \"Button with Border\" BorderWidth= \"1\" BorderColor= \"Silver\" /> <Button Text= \"Rounded Corner Button\" BorderWidth= \"1\" BorderColor= \"Orange\" BackgroundColor= \"Orange\" BorderRadius= \"8\" TextColor= \"White\" /> <Button Text= \"Button with Transparent Background\" BorderWidth= \"1\" BorderColor= \"Silver\" TextColor= \"Orange\" BackgroundColor= \"Transparent\" /> <Button BackgroundColor= \"Transparent\" Text= \"Button with Image\" TextColor= \"Orange\" HorizontalOptions= \"Start\" Image= \"favorite\" BorderColor= \"Silver\" BorderWidth= \"1\" /> </StackLayout> Note Remember if you are using images, you will need to add them to each project, Android and iOS. For Android, you need to add the images under Resources\\drawable-* and for iOS you will need to add an Asset catalog and then add an Image Set . For iOS it's recommended to use vector formats so that you do not have to specify multiple images.","title":"Styled Button"},{"location":"views/buttons/#circle-button","text":"You will need to use a renderer in order to achieve this. The simplest way is to use a plugin. Here is a plugin that can achieve circle buttons, Circle Button Plugin","title":"Circle Button"},{"location":"views/buttons/#commanding-with-button","text":"Note Commanding is an advanced topic, we will explore this in much detail under the MVVM section. For now, we will go through the high level details on how to add a command to a button. In using the MVVM(Model View-ViewModel) design pattern, there's a separation of the UI and business logic. If we had a button and we had some logic we wanted to run in the model, we can use the commanding interface to run our logic.","title":"Commanding with Button"},{"location":"views/buttons/#define-the-command","text":"We first need to define the command property. It should be of type ICommand . This is an interface that have a few methods. public ICommand DisplayAlertCommand { get ; private set ; }","title":"Define the Command"},{"location":"views/buttons/#initialize-the-command-in-the-constructor","text":"Next we need to initialize the command in the constructor of the model : public DemoViewModel ( Page page ) { this . _page = page ; DisplayAlertCommand = new Command ( ShowAlert ); } and define the function that is called by the command, in our case we will show an alert using the Page DisplayAlert method as follows : private async void ShowAlert ( object obj ) { await _page . DisplayAlert ( \"Alert\" , \"Howdy from Command Button\" , \"OK\" ); }","title":"Initialize the command in the constructor"},{"location":"views/buttons/#initialize-the-model-in-the-content-page-class","text":"Once we have everything setup in the model, we can now create a new instance of the model and set it up as the BindingContext for our UI as follows : BindingContext = new DemoViewModel ( this );","title":"Initialize the model in the content page class"},{"location":"views/buttons/#add-the-binding-to-the-button","text":"Now we can bind the button to the command in our model in XAML as follows : <Button Text= \"Bound to Command\" Command= \"{Binding DisplayAlertCommand}\" />","title":"Add the Binding to the button"},{"location":"views/buttons/#putting-everything-together","text":"Model\\DemoModel.cs public class DemoViewModel { public ICommand DisplayAlertCommand { get ; private set ; } Page _page ; public DemoViewModel ( Page page ) { _page = page ; DisplayAlertCommand = new Command ( ShowAlert ); } private async void ShowAlert ( object obj ) { await _page . DisplayAlert ( \"Alert\" , \"Howdy from Command Button\" , \"OK\" ); } } ButtonCommandPage.cs public partial class ButtonCommandPage : ContentPage { public ButtonCommandPage () { InitializeComponent (); BindingContext = new DemoViewModel ( this ); } } ButtonCommandPage.xaml <?xml version=\"1.0\" encoding=\"UTF-8\"?> <ContentPage xmlns= \"http://xamarin.com/schemas/2014/forms\" xmlns:x= \"http://schemas.microsoft.com/winfx/2009/xaml\" x:Class= \"TextSample.Views.ButtonCommandPage\" > <ContentPage.Content> <Button Text= \"Bound to Command\" Command= \"{Binding DisplayAlertCommand}\" /> </ContentPage.Content> </ContentPage>","title":"Putting everything together"},{"location":"views/carousel-view/","text":"","title":"Carousel View"},{"location":"views/date-picker/","text":"DatePicker \u00b6 The view allows selecting a date. The control allows limiting the minimum and maximum date ranges that can be selected. Define in XAML \u00b6 DatePicker /> Limit the Date Range \u00b6 We can format and also limit the date range in XAML as follows : <DatePicker Format= \"MM-dd-yyyy\" MinimumDate= \"02-24-2018\" MaximumDate= \"02-28-2018\" /> Define in Code \u00b6 var startDatePicker = new DatePicker { Format = \"MM-dd-yyyy\" , Date = DateTime . Now . Date . AddDays (- 1 ), MinimumDate = DateTime . Parse ( \"02-01-2018\" ), MaximumDate = DateTime . Parse ( \"02-28-2018\" ) };","title":"Date Picker"},{"location":"views/date-picker/#datepicker","text":"The view allows selecting a date. The control allows limiting the minimum and maximum date ranges that can be selected.","title":"DatePicker"},{"location":"views/date-picker/#define-in-xaml","text":"DatePicker />","title":"Define in XAML"},{"location":"views/date-picker/#limit-the-date-range","text":"We can format and also limit the date range in XAML as follows : <DatePicker Format= \"MM-dd-yyyy\" MinimumDate= \"02-24-2018\" MaximumDate= \"02-28-2018\" />","title":"Limit the Date Range"},{"location":"views/date-picker/#define-in-code","text":"var startDatePicker = new DatePicker { Format = \"MM-dd-yyyy\" , Date = DateTime . Now . Date . AddDays (- 1 ), MinimumDate = DateTime . Parse ( \"02-01-2018\" ), MaximumDate = DateTime . Parse ( \"02-28-2018\" ) };","title":"Define in Code"},{"location":"views/editor/","text":"Editor \u00b6 The Editor is used when you want to edit multiple lines of text. Use the Entry for a single line of text. Define in XAML \u00b6 <Editor Text= \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.\" /> In Code \u00b6 var editor = new Editor { Text = \"Lorem Ipsum is simply dummy text of the printing and typesetting industry.\" + \"Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, \" + \"when an unknown printer took a galley of type and scrambled it to make a type specimen book. \" + \"It has survived not only five centuries, but also the leap into electronic typesetting, \" + \"remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset \" + \"sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like \" + \"Aldus PageMaker including versions of Lorem Ipsum.\" }; The Editor have the same properties as the Entry other than supporting multiple lines of text. Keyboard \u00b6 We can also configure different keyboards for the Editor control. <Editor Text= \"Default starting text\" Keyboard= \"Chat\" /> Available Keyboards Default \u2013 the default keyboard Chat \u2013 used for texting & places where emoji are useful Email \u2013 used when entering email addresses Numeric \u2013 used when entering numbers Telephone \u2013 used when entering telephone numbers Url \u2013 used for entering file paths & web addresses Events \u00b6 The Editor reacts to text changed and text entry complete events using the TextChanged and Completed events. The Completed event is fired when the return key is pressed. The events can be set both in XAML and code TextChanged Event <?xml version=\"1.0\" encoding=\"UTF-8\"?> <ContentPage xmlns= \"http://xamarin.com/schemas/2014/forms\" xmlns:x= \"http://schemas.microsoft.com/winfx/2009/xaml\" x:Class= \"TextSample.EditorPage\" Title= \"Editor Demo\" > <ContentPage.Content> <StackLayout Padding= \"5,10\" > <Editor TextChanged= \"EditorTextChanged\" /> </StackLayout> </ContentPage.Content> </ContentPage> Then in the backing code file you will have the following code : void EditorTextChanged ( object sender , TextChangedEventArgs e ) { var oldText = e . OldTextValue ; var newText = e . NewTextValue ; } Completed Event <Editor Text= \"Completed Event\" Completed= \"Handle_Completed\" /> and in the backing .cs file : void Handle_Completed ( object sender , System . EventArgs e ) { lblPlaceholder . Text = (( Editor ) sender ). Text ; }","title":"Editor"},{"location":"views/editor/#editor","text":"The Editor is used when you want to edit multiple lines of text. Use the Entry for a single line of text.","title":"Editor"},{"location":"views/editor/#define-in-xaml","text":"<Editor Text= \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.\" />","title":"Define in XAML"},{"location":"views/editor/#in-code","text":"var editor = new Editor { Text = \"Lorem Ipsum is simply dummy text of the printing and typesetting industry.\" + \"Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, \" + \"when an unknown printer took a galley of type and scrambled it to make a type specimen book. \" + \"It has survived not only five centuries, but also the leap into electronic typesetting, \" + \"remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset \" + \"sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like \" + \"Aldus PageMaker including versions of Lorem Ipsum.\" }; The Editor have the same properties as the Entry other than supporting multiple lines of text.","title":"In Code"},{"location":"views/editor/#keyboard","text":"We can also configure different keyboards for the Editor control. <Editor Text= \"Default starting text\" Keyboard= \"Chat\" /> Available Keyboards Default \u2013 the default keyboard Chat \u2013 used for texting & places where emoji are useful Email \u2013 used when entering email addresses Numeric \u2013 used when entering numbers Telephone \u2013 used when entering telephone numbers Url \u2013 used for entering file paths & web addresses","title":"Keyboard"},{"location":"views/editor/#events","text":"The Editor reacts to text changed and text entry complete events using the TextChanged and Completed events. The Completed event is fired when the return key is pressed. The events can be set both in XAML and code TextChanged Event <?xml version=\"1.0\" encoding=\"UTF-8\"?> <ContentPage xmlns= \"http://xamarin.com/schemas/2014/forms\" xmlns:x= \"http://schemas.microsoft.com/winfx/2009/xaml\" x:Class= \"TextSample.EditorPage\" Title= \"Editor Demo\" > <ContentPage.Content> <StackLayout Padding= \"5,10\" > <Editor TextChanged= \"EditorTextChanged\" /> </StackLayout> </ContentPage.Content> </ContentPage> Then in the backing code file you will have the following code : void EditorTextChanged ( object sender , TextChangedEventArgs e ) { var oldText = e . OldTextValue ; var newText = e . NewTextValue ; } Completed Event <Editor Text= \"Completed Event\" Completed= \"Handle_Completed\" /> and in the backing .cs file : void Handle_Completed ( object sender , System . EventArgs e ) { lblPlaceholder . Text = (( Editor ) sender ). Text ; }","title":"Events"},{"location":"views/entry/","text":"Entry \u00b6 The Entry view is used for entering a single line of text. It is best used for collecting small amounts of text like usernames and passwords. It can be configured to displayed different types of keyboards. Define in XAML \u00b6 <Entry Placeholder= \"Username\" /> Define in Code \u00b6 var entry = new Entry { Placeholder = \"Username\" }; Configure Password \u00b6 We can hide the characters in the Entry so it displays black circles and hides its contents using the Password property in code and IsPassword in XAML as follows : In XAML <Entry Placeholder= \"Password\" IsPassword= \"true\" /> In Code var entry = new Entry { Placeholder = \"Username\" , IsPassword = true }; Disable Entry \u00b6 We can disable the Entry field using the IsEnabled property as follows : <Entry IsEnabled= \"false\" Text= \"This is a disabled entry\" /> Configure Keyboards \u00b6 We can use the Keyboard property to configure what sort of keyboard is shown for the Entry view. The options are : Default \u2013 the default keyboard Chat \u2013 used for texting & places where emoji are useful Email \u2013 used when entering email addresses Numeric \u2013 used when entering numbers Telephone \u2013 used when entering telephone numbers Url \u2013 used for entering file paths and web addresses In XAML <Entry Placeholder= \"Username\" Keyboard= \"Email\" /> In Code var entry = new Entry { Placeholder = \"Username\" , Keyboard = Keyboard . Email }; Change Text Color \u00b6 We can use the TextColor property to change the color of the text. <Entry TextColor= \"#E64A19\" Placeholder= \"Username\" /> and we can achieve the same in code as follows : var entry = Entry { TextColor = Color . FromHex ( \"#77d065\" ), Text = \"Xamarin Green\" }; Change Font Size \u00b6 We can use the FontSize property to change the font size of the text : <Entry FontSize= \"Large\" Placeholder= \"Large Font\" />","title":"Entry"},{"location":"views/entry/#entry","text":"The Entry view is used for entering a single line of text. It is best used for collecting small amounts of text like usernames and passwords. It can be configured to displayed different types of keyboards.","title":"Entry"},{"location":"views/entry/#define-in-xaml","text":"<Entry Placeholder= \"Username\" />","title":"Define in XAML"},{"location":"views/entry/#define-in-code","text":"var entry = new Entry { Placeholder = \"Username\" };","title":"Define in Code"},{"location":"views/entry/#configure-password","text":"We can hide the characters in the Entry so it displays black circles and hides its contents using the Password property in code and IsPassword in XAML as follows : In XAML <Entry Placeholder= \"Password\" IsPassword= \"true\" /> In Code var entry = new Entry { Placeholder = \"Username\" , IsPassword = true };","title":"Configure Password"},{"location":"views/entry/#disable-entry","text":"We can disable the Entry field using the IsEnabled property as follows : <Entry IsEnabled= \"false\" Text= \"This is a disabled entry\" />","title":"Disable Entry"},{"location":"views/entry/#configure-keyboards","text":"We can use the Keyboard property to configure what sort of keyboard is shown for the Entry view. The options are : Default \u2013 the default keyboard Chat \u2013 used for texting & places where emoji are useful Email \u2013 used when entering email addresses Numeric \u2013 used when entering numbers Telephone \u2013 used when entering telephone numbers Url \u2013 used for entering file paths and web addresses In XAML <Entry Placeholder= \"Username\" Keyboard= \"Email\" /> In Code var entry = new Entry { Placeholder = \"Username\" , Keyboard = Keyboard . Email };","title":"Configure Keyboards"},{"location":"views/entry/#change-text-color","text":"We can use the TextColor property to change the color of the text. <Entry TextColor= \"#E64A19\" Placeholder= \"Username\" /> and we can achieve the same in code as follows : var entry = Entry { TextColor = Color . FromHex ( \"#77d065\" ), Text = \"Xamarin Green\" };","title":"Change Text Color"},{"location":"views/entry/#change-font-size","text":"We can use the FontSize property to change the font size of the text : <Entry FontSize= \"Large\" Placeholder= \"Large Font\" />","title":"Change Font Size"},{"location":"views/frame/","text":"Frame \u00b6 The frame is used to create a border around the controls. On Android this is used to achieve the look and feel of the CardView. Just wrap the view you want inside the Frame . <Frame> ...some views </Frame>","title":"Frame"},{"location":"views/frame/#frame","text":"The frame is used to create a border around the controls. On Android this is used to achieve the look and feel of the CardView. Just wrap the view you want inside the Frame . <Frame> ...some views </Frame>","title":"Frame"},{"location":"views/image/","text":"Image \u00b6 The control is used to display images. In XAML \u00b6 Note that you will need to put the image into each platform. <Image Source= \"logo\" /> The logo.png image was added to the Android drawable folder and on iOS into the Assets.xcassets folder. In Code \u00b6 Local image var localImage = new Image { Source = \"logo\" }; Download image from the internet var image = new Image { Source = new UriImageSource { Uri = new Uri ( \"https://i.imgur.com/OM81S7f.png\" ) } }; Scaling and Resizing the Image \u00b6 We can use the WidthRequest and HeightRequest to set width and height of the image as follows : <Image Source= \"logo\" WidthRequest= \"70\" HeightRequest= \"70\" /> In addition to setting the width and height of the image, you can also set the Aspect property as follows : <Image Source= \"logo\" WidthRequest= \"70\" HeightRequest= \"70\" Aspect= \"AspectFit\" /> The available options are : - AspectFit - Fit the set width and height and maintain the aspect - AspectFill - Fill the set width and height and maintain the apsect - Fill - Fill the set width and height Custom library for image loading and caching \u00b6 There are many available image loading and caching that provides more functionality that the default ImageView , e.g you might want to retry get the image, show a placeholder image, an error image, control the caching duration or transform the image on the fly. We are going to use the FFImageLoading library in place of the default ImageView so we can show a placeholder image whilst we fetch images across the network. Install the FFImageLoading \u00b6 You will need to install the following packages in both Android and iOS projects and also the shard project : Xamarin.FFImageLoading.Forms Xamarin.FFImageLoading.Svg.Forms Xamarin.FFImageLoading.Transformations Initialize each project \u00b6 You will need run some setup code to initialize the rendered for each project. Android In the MainActivity.cs file add the following line : CachedImageRenderer . Init ( true ); The OnCreate method should be look like this after adding the line : protected override void OnCreate ( Bundle bundle ) { TabLayoutResource = Resource . Layout . Tabbar ; ToolbarResource = Resource . Layout . Toolbar ; CachedImageRenderer . Init ( true ); base . OnCreate ( bundle ); global :: Xamarin . Forms . Forms . Init ( this , bundle ); LoadApplication ( new App ()); } iOS In the iOS project, add the following line in the AppDelegate.cs file : CachedImageRenderer . Init (); Adding namespace \u00b6 Add the namespace : xmlns : ffimageloading = \"clr-namespace:FFImageLoading.Forms;assembly=FFImageLoading.Forms\" Add the image view \u00b6 Once the namespace is defined you can now add the image view and customize the properties you require : < ffimageloading : CachedImage WidthRequest = \"200\" HeightRequest = \"200\" LoadingPlaceholder = \"placeholder\" DownsampleToViewSize = \"true\" Source = \"https://peruzal-parse-media.s3.amazonaws.com/652565bb-02ad-487f-929e-78308085ca1e_4.jpg\" /> Note We have a placeholder image add to both Android and iOS projects.","title":"Image"},{"location":"views/image/#image","text":"The control is used to display images.","title":"Image"},{"location":"views/image/#in-xaml","text":"Note that you will need to put the image into each platform. <Image Source= \"logo\" /> The logo.png image was added to the Android drawable folder and on iOS into the Assets.xcassets folder.","title":"In XAML"},{"location":"views/image/#in-code","text":"Local image var localImage = new Image { Source = \"logo\" }; Download image from the internet var image = new Image { Source = new UriImageSource { Uri = new Uri ( \"https://i.imgur.com/OM81S7f.png\" ) } };","title":"In Code"},{"location":"views/image/#scaling-and-resizing-the-image","text":"We can use the WidthRequest and HeightRequest to set width and height of the image as follows : <Image Source= \"logo\" WidthRequest= \"70\" HeightRequest= \"70\" /> In addition to setting the width and height of the image, you can also set the Aspect property as follows : <Image Source= \"logo\" WidthRequest= \"70\" HeightRequest= \"70\" Aspect= \"AspectFit\" /> The available options are : - AspectFit - Fit the set width and height and maintain the aspect - AspectFill - Fill the set width and height and maintain the apsect - Fill - Fill the set width and height","title":"Scaling and Resizing the Image"},{"location":"views/image/#custom-library-for-image-loading-and-caching","text":"There are many available image loading and caching that provides more functionality that the default ImageView , e.g you might want to retry get the image, show a placeholder image, an error image, control the caching duration or transform the image on the fly. We are going to use the FFImageLoading library in place of the default ImageView so we can show a placeholder image whilst we fetch images across the network.","title":"Custom library for image loading and caching"},{"location":"views/image/#install-the-ffimageloading","text":"You will need to install the following packages in both Android and iOS projects and also the shard project : Xamarin.FFImageLoading.Forms Xamarin.FFImageLoading.Svg.Forms Xamarin.FFImageLoading.Transformations","title":"Install the FFImageLoading"},{"location":"views/image/#initialize-each-project","text":"You will need run some setup code to initialize the rendered for each project. Android In the MainActivity.cs file add the following line : CachedImageRenderer . Init ( true ); The OnCreate method should be look like this after adding the line : protected override void OnCreate ( Bundle bundle ) { TabLayoutResource = Resource . Layout . Tabbar ; ToolbarResource = Resource . Layout . Toolbar ; CachedImageRenderer . Init ( true ); base . OnCreate ( bundle ); global :: Xamarin . Forms . Forms . Init ( this , bundle ); LoadApplication ( new App ()); } iOS In the iOS project, add the following line in the AppDelegate.cs file : CachedImageRenderer . Init ();","title":"Initialize each project"},{"location":"views/image/#adding-namespace","text":"Add the namespace : xmlns : ffimageloading = \"clr-namespace:FFImageLoading.Forms;assembly=FFImageLoading.Forms\"","title":"Adding namespace"},{"location":"views/image/#add-the-image-view","text":"Once the namespace is defined you can now add the image view and customize the properties you require : < ffimageloading : CachedImage WidthRequest = \"200\" HeightRequest = \"200\" LoadingPlaceholder = \"placeholder\" DownsampleToViewSize = \"true\" Source = \"https://peruzal-parse-media.s3.amazonaws.com/652565bb-02ad-487f-929e-78308085ca1e_4.jpg\" /> Note We have a placeholder image add to both Android and iOS projects.","title":"Add the image view"},{"location":"views/label/","text":"Label View \u00b6 The Label view is used to display read only text. The Label can be created both in XAML and in code. Defining a Label with XAML \u00b6 <Label Text= \"Hello World\" /> Defining a Label in Code \u00b6 var label = new Label () { Text = \"Hello World\" }; Changing Font Attributes \u00b6 You can use the FontSize property. The number will be translated into Points on iOS and DPI on Android. <Label Text= \"Hello World\" FontSize= \"32\" FontAttributes= \"Bold\" /> We can set the same attributes in code : var label = new Label () { Text = \"Hello World\" , FontSize = 32 , FontAttributes = FontAttributes . Bold }; The recommended way to change the FontSize property is to use the platform's pre-defined size. var label = new Label () { Text = \"Hello World\" , FontSize = Device . GetNamedSize ( NamedSize . Large , typeof ( Label )), FontAttributes = FontAttributes . Bold }; In XAML <Label Text= \"Hello World\" FontSize= \"Large\" FontAttributes= \"Bold\" /> Formatted Text \u00b6 Within a label, you can change the formatting for each individual text using spans . You set the Label.FormattedText in XAML and FormattedText in code. <Label> <Label.FormattedText> <FormattedString> <Span Text= \"I\" ForegroundColor= \"Red\" FontAttributes= \"Bold\" /> <Span Text= \"Love\" /> <Span Text= \"Xamarin.Forms\" FontAttributes= \"Italic\" FontSize= \"Small\" /> </FormattedString> </Label.FormattedText> </Label> And we can achieve the same in code as follows : var formmattedString = new FormattedString (); formmattedString . Spans . Add ( new Span () { Text = \"I \" , FontAttributes = FontAttributes . Bold }); formmattedString . Spans . Add ( new Span () { Text = \"love \" , ForegroundColor = Color . Red , }); formmattedString . Spans . Add ( new Span () { Text = \"Xamarin.Forms\" , FontAttributes = FontAttributes . Italic , FontSize = Device . GetNamedSize ( NamedSize . Small , typeof ( Label )) }); Content = new Label () { FormattedText = formmattedString , VerticalOptions = LayoutOptions . Center , HorizontalOptions = LayoutOptions . Center }; Using Built-in Styles \u00b6 Xamarin Forms comes with built-in styles for text. We can apply these using the Style property and also making sure we specify them using a DynamicResource so that they will always update when the style changes during running. <Label Text= \"Title Style\" Style= \"{DynamicResource TitleStyle}\" /> <Label Text= \"Subtitle Style\" Style= \"{DynamicResource SubtitleStyle}\" /> <Label Text= \"Body Style\" Style= \"{DynamicResource BodyStyle}\" /> <Label Text= \"Caption Style\" Style = \"{DynamicResource CaptionStyle}\" /> <Label Text= \"ListItemText Style\" Style= \"{DynamicResource ListItemTextStyle}\" /> <Label Text= \"ListItemDetailText Style\" Style= \"{DynamicResource ListItemDetailTextStyle}\" /> The styles are store in the Device.Styles class. You can retrieve the string key names of the styles: Debug . WriteLine ( Device . Styles . TitleStyleKey ); LineBreak Mode \u00b6 Labels can be set to handle text that can't fit on one line in one of several ways, exposed by the LineBreakMode property. LineBreakMode is an enumeration of the following options: HeadTruncation \u2013 truncates the head of the text, showing the end. CharacterWrap \u2013 wraps text onto a new line at a character boundary. MiddleTruncation \u2013 displays the beginning and end of the text, with the middle replace by an ellipsis. NoWrap \u2013 does not wrap text, displaying only as much text as can fit on one line. TailTruncation \u2013 shows the beginning of the text, truncating the end. WordWrap \u2013 wraps text at the word boundary. Using a Custom Font \u00b6 Custom fonts needs some configuration on each platform. iOS Add the fonts to the Resources folder Add all the fonts to the Info.plist file under Fonts provided by application Now you can use the font in your app Using the font <Label Font=\"Roboto-Thin\" Text=\"Lorem Ipsum is simply dummy text of the printing\" /> Danger On iOS the font might not show up. If the fonts are in a folder, make sure you include the folder path when adding the filename to the Info.plist you also include the folder name in the path. Also the extension is required, if you ommit it, the font will not show up. Make sure in the properties, you have specified Copy to output folder to be Always copy and the Build action is BundleResource . Android On Android do the following : Copy the font to the Assets folder Make sure in the properties the BuildAction is set to AndroidAsset Use the font. you have to use the full path of the font followed by a # and the font name e.g ButterflyKids-Regular.ttf#Butterfly-Regular <Label Font=\"ButterflyKids-Regular.ttf#Butterfly-Regular\" Text=\"Lorem Ipsum is simply dummy\" /> Use different font for each platform \u00b6 Once we have our fonts, we can use the OnPlatform and choose a different font for each platform : <Label Text= \"Lorem Ipsum is simply dummy text of the printing and typesetting industry.\" > <Label.Font> <OnPlatform x:TypeArguments= \"Font\" Android= \"ButterflyKids-Regular.ttf#Butterfly-Regular\" iOS= \"Roboto-Thin\" /> </Label.Font> </Label>","title":"Label"},{"location":"views/label/#label-view","text":"The Label view is used to display read only text. The Label can be created both in XAML and in code.","title":"Label View"},{"location":"views/label/#defining-a-label-with-xaml","text":"<Label Text= \"Hello World\" />","title":"Defining a Label with XAML"},{"location":"views/label/#defining-a-label-in-code","text":"var label = new Label () { Text = \"Hello World\" };","title":"Defining a Label in Code"},{"location":"views/label/#changing-font-attributes","text":"You can use the FontSize property. The number will be translated into Points on iOS and DPI on Android. <Label Text= \"Hello World\" FontSize= \"32\" FontAttributes= \"Bold\" /> We can set the same attributes in code : var label = new Label () { Text = \"Hello World\" , FontSize = 32 , FontAttributes = FontAttributes . Bold }; The recommended way to change the FontSize property is to use the platform's pre-defined size. var label = new Label () { Text = \"Hello World\" , FontSize = Device . GetNamedSize ( NamedSize . Large , typeof ( Label )), FontAttributes = FontAttributes . Bold }; In XAML <Label Text= \"Hello World\" FontSize= \"Large\" FontAttributes= \"Bold\" />","title":"Changing Font Attributes"},{"location":"views/label/#formatted-text","text":"Within a label, you can change the formatting for each individual text using spans . You set the Label.FormattedText in XAML and FormattedText in code. <Label> <Label.FormattedText> <FormattedString> <Span Text= \"I\" ForegroundColor= \"Red\" FontAttributes= \"Bold\" /> <Span Text= \"Love\" /> <Span Text= \"Xamarin.Forms\" FontAttributes= \"Italic\" FontSize= \"Small\" /> </FormattedString> </Label.FormattedText> </Label> And we can achieve the same in code as follows : var formmattedString = new FormattedString (); formmattedString . Spans . Add ( new Span () { Text = \"I \" , FontAttributes = FontAttributes . Bold }); formmattedString . Spans . Add ( new Span () { Text = \"love \" , ForegroundColor = Color . Red , }); formmattedString . Spans . Add ( new Span () { Text = \"Xamarin.Forms\" , FontAttributes = FontAttributes . Italic , FontSize = Device . GetNamedSize ( NamedSize . Small , typeof ( Label )) }); Content = new Label () { FormattedText = formmattedString , VerticalOptions = LayoutOptions . Center , HorizontalOptions = LayoutOptions . Center };","title":"Formatted Text"},{"location":"views/label/#using-built-in-styles","text":"Xamarin Forms comes with built-in styles for text. We can apply these using the Style property and also making sure we specify them using a DynamicResource so that they will always update when the style changes during running. <Label Text= \"Title Style\" Style= \"{DynamicResource TitleStyle}\" /> <Label Text= \"Subtitle Style\" Style= \"{DynamicResource SubtitleStyle}\" /> <Label Text= \"Body Style\" Style= \"{DynamicResource BodyStyle}\" /> <Label Text= \"Caption Style\" Style = \"{DynamicResource CaptionStyle}\" /> <Label Text= \"ListItemText Style\" Style= \"{DynamicResource ListItemTextStyle}\" /> <Label Text= \"ListItemDetailText Style\" Style= \"{DynamicResource ListItemDetailTextStyle}\" /> The styles are store in the Device.Styles class. You can retrieve the string key names of the styles: Debug . WriteLine ( Device . Styles . TitleStyleKey );","title":"Using Built-in Styles"},{"location":"views/label/#linebreak-mode","text":"Labels can be set to handle text that can't fit on one line in one of several ways, exposed by the LineBreakMode property. LineBreakMode is an enumeration of the following options: HeadTruncation \u2013 truncates the head of the text, showing the end. CharacterWrap \u2013 wraps text onto a new line at a character boundary. MiddleTruncation \u2013 displays the beginning and end of the text, with the middle replace by an ellipsis. NoWrap \u2013 does not wrap text, displaying only as much text as can fit on one line. TailTruncation \u2013 shows the beginning of the text, truncating the end. WordWrap \u2013 wraps text at the word boundary.","title":"LineBreak Mode"},{"location":"views/label/#using-a-custom-font","text":"Custom fonts needs some configuration on each platform. iOS Add the fonts to the Resources folder Add all the fonts to the Info.plist file under Fonts provided by application Now you can use the font in your app Using the font <Label Font=\"Roboto-Thin\" Text=\"Lorem Ipsum is simply dummy text of the printing\" /> Danger On iOS the font might not show up. If the fonts are in a folder, make sure you include the folder path when adding the filename to the Info.plist you also include the folder name in the path. Also the extension is required, if you ommit it, the font will not show up. Make sure in the properties, you have specified Copy to output folder to be Always copy and the Build action is BundleResource . Android On Android do the following : Copy the font to the Assets folder Make sure in the properties the BuildAction is set to AndroidAsset Use the font. you have to use the full path of the font followed by a # and the font name e.g ButterflyKids-Regular.ttf#Butterfly-Regular <Label Font=\"ButterflyKids-Regular.ttf#Butterfly-Regular\" Text=\"Lorem Ipsum is simply dummy\" />","title":"Using a Custom Font"},{"location":"views/label/#use-different-font-for-each-platform","text":"Once we have our fonts, we can use the OnPlatform and choose a different font for each platform : <Label Text= \"Lorem Ipsum is simply dummy text of the printing and typesetting industry.\" > <Label.Font> <OnPlatform x:TypeArguments= \"Font\" Android= \"ButterflyKids-Regular.ttf#Butterfly-Regular\" iOS= \"Roboto-Thin\" /> </Label.Font> </Label>","title":"Use different font for each platform"},{"location":"views/list-view/","text":"ListView \u00b6 The ListView is one of the most popular controls. It's used to display a list of data. The list view automatically scrolls when the content does not fit the screen. Components of a ListView \u00b6 The ListView have a number of components to match the native functionality of the list view on each platform. Cells Headers and Footers Groups Cells \u00b6 Data in the list view is presented using cells. Each cell corresponds to a row of data. There are built-in cells to display text and text with an image : TextCell - Displays text with an optional detail text. ImageCell - Displays an image with text Custom Cell - We can create custom cells when we need to customize the contents of each cell. Functionality \u00b6 The list view supports the following actions : Context actions Pull to refresh Selection Data Source \u00b6 The list data is provided through the ItemsSource property. This can be any enumerable. If the items are objects, by default the list view uses the ToString() method when displaying the row. You can see data binding to choose which fields to display from the object. We will define an array as a data source in code and use it as the source in the xaml : public static string [] Months = new []{ \"January\" , \"February\" , \"March\" , \"April\" , \"May\" , \"June\" , \"July\" , \"August\" , \"September\" , \"October\" , \"November\" , \"December\" }; We will use the x:StaticResource to refer to the Months static array in the code behind file : <ListView ItemsSource=\"{x:Static local:ListViewPage.Months}\" /> For the above to work, we will need add the namespace for the prefix local as follows : xmlns : local = \"clr-namespace:DataBindingDemo.Movies\" The Movies static property is defined in the class ListViewPage in the DataBindingDemo.Movies namespace. ListViewPage.xaml <?xml version=\"1.0\" encoding=\"UTF-8\"?> <ContentPage xmlns= \"http://xamarin.com/schemas/2014/forms\" xmlns:local= \"clr-namespace:DataBindingDemo.Movies\" xmlns:x= \"http://schemas.microsoft.com/winfx/2009/xaml\" x:Class= \"DataBindingDemo.Movies.ListViewPage\" > <ContentPage.Content> <StackLayout> <ListView ItemsSource= \"{x:Static local:ListViewPage.Months}\" /> </StackLayout> </ContentPage.Content> </ContentPage> ListViewPage.xaml.cs using System ; using System.Collections.Generic ; using Xamarin.Forms ; namespace DataBindingDemo.Movies { public partial class ListViewPage : ContentPage { public static string [] Months = new []{ \"January\" , \"February\" , \"March\" , \"April\" , \"May\" , \"June\" , \"July\" , \"August\" , \"September\" , \"October\" , \"November\" , \"December\" }; public ListViewPage () { InitializeComponent (); } } } Data Binding ListView \u00b6 We can easily bind the row of the list view to a data source. We have a model for a Movie : Movie.cs public class Movie { [JsonProperty(\"objectId\")] public string ObjectId { get ; set ; } [JsonProperty(\"image\")] public Image Image { get ; set ; } [JsonProperty(\"createdAt\")] public DateTime CreatedAt { get ; set ; } [JsonProperty(\"updatedAt\")] public DateTime UpdatedAt { get ; set ; } [JsonProperty(\"title\")] public string Title { get ; set ; } [JsonProperty(\"releaseYear\")] public string ReleaseYear { get ; set ; } [JsonProperty(\"genre\")] public IList < string > Genre { get ; set ; } [JsonProperty(\"rating\")] public double Rating { get ; set ; } [JsonProperty(\"description\")] public string Description { get ; set ; } } ApiResult.cs public class ApiResult { [JsonProperty(\"results\")] public IEnumerable < Movie > Movies { get ; set ; } } Image.cs public class Image { [JsonProperty(\"name\")] public string Name { get ; set ; } [JsonProperty(\"url\")] public string Url { get ; set ; } } And this is the link to the full json with the movie data. And a model to fetch the data, and within the model we have an ObservableCollection of a Movie : public class MoviesViewModel : BaseViewModel { ObservableCollection < Movie > _movies ; public ObservableCollection < Movie > Movies { get { if ( _movies == null ) { _movies = new ObservableCollection < Movie >(); } return _movies ; } set { if ( value != _movies ) { _movies = value ; OnPropertyChanged (); } } } public MoviesViewModel () { Task . Run ( async () => { var movies = await GetMovies (); movies . ForEach ( Movies . Add ); }); } private async Task < IEnumerable < Movie >> GetMovies (){ var client = new HttpClient (); try { IsBusy = true ; var data = await client . GetStringAsync ( \"replace with url to json file\" ); IsBusy = false ; return JsonConvert . DeserializeObject < ApiResult >( data ). Movies ; } catch ( Exception ex ) { IsBusy = false ; Debug . WriteLine ( ex . Message ); return null ; } } } Then in the XAML, we bind the rows to the movie collection <ListView RowHeight= \"100\" AbsoluteLayout.LayoutFlags= \"All\" AbsoluteLayout.LayoutBounds= \"1,1,1,1\" ItemsSource= \"{Binding Movies}\" > <ListView.ItemTemplate> <DataTemplate> <ViewCell> <Grid Padding= \"5\" > <Grid.RowDefinitions> <RowDefinition Height= \".3*\" /> <RowDefinition Height= \".7*\" /> </Grid.RowDefinitions> <Grid.ColumnDefinitions> <ColumnDefinition Width= \".2*\" /> <ColumnDefinition Width= \".8*\" /> </Grid.ColumnDefinitions> <Image HorizontalOptions= \"Start\" VerticalOptions= \"Start\" Source= \"{Binding Image.Url}\" Grid.RowSpan= \"2\" /> <Label HorizontalOptions= \"Start\" Text= \"{Binding Title}\" Grid.Column= \"1\" Style= \"{DynamicResource TitleStyle}\" /> <Label HorizontalOptions= \"Start\" Text= \"{Binding Description}\" Grid.Row= \"1\" Grid.Column= \"1\" Style= \"{DynamicResource BodyStyle}\" /> </Grid> </ViewCell> </DataTemplate> </ListView.ItemTemplate> </ListView> Note The row for each ListView is bound to a a movie. the two Label s and ImageView are bound to the properties of a movie. and in the code behind file, we have set the BindingContext as follows : public MoviesPage () { InitializeComponent (); var vm = new MoviesViewModel (); BindingContext = vm ; }","title":"List View"},{"location":"views/list-view/#listview","text":"The ListView is one of the most popular controls. It's used to display a list of data. The list view automatically scrolls when the content does not fit the screen.","title":"ListView"},{"location":"views/list-view/#components-of-a-listview","text":"The ListView have a number of components to match the native functionality of the list view on each platform. Cells Headers and Footers Groups","title":"Components of a ListView"},{"location":"views/list-view/#cells","text":"Data in the list view is presented using cells. Each cell corresponds to a row of data. There are built-in cells to display text and text with an image : TextCell - Displays text with an optional detail text. ImageCell - Displays an image with text Custom Cell - We can create custom cells when we need to customize the contents of each cell.","title":"Cells"},{"location":"views/list-view/#functionality","text":"The list view supports the following actions : Context actions Pull to refresh Selection","title":"Functionality"},{"location":"views/list-view/#data-source","text":"The list data is provided through the ItemsSource property. This can be any enumerable. If the items are objects, by default the list view uses the ToString() method when displaying the row. You can see data binding to choose which fields to display from the object. We will define an array as a data source in code and use it as the source in the xaml : public static string [] Months = new []{ \"January\" , \"February\" , \"March\" , \"April\" , \"May\" , \"June\" , \"July\" , \"August\" , \"September\" , \"October\" , \"November\" , \"December\" }; We will use the x:StaticResource to refer to the Months static array in the code behind file : <ListView ItemsSource=\"{x:Static local:ListViewPage.Months}\" /> For the above to work, we will need add the namespace for the prefix local as follows : xmlns : local = \"clr-namespace:DataBindingDemo.Movies\" The Movies static property is defined in the class ListViewPage in the DataBindingDemo.Movies namespace. ListViewPage.xaml <?xml version=\"1.0\" encoding=\"UTF-8\"?> <ContentPage xmlns= \"http://xamarin.com/schemas/2014/forms\" xmlns:local= \"clr-namespace:DataBindingDemo.Movies\" xmlns:x= \"http://schemas.microsoft.com/winfx/2009/xaml\" x:Class= \"DataBindingDemo.Movies.ListViewPage\" > <ContentPage.Content> <StackLayout> <ListView ItemsSource= \"{x:Static local:ListViewPage.Months}\" /> </StackLayout> </ContentPage.Content> </ContentPage> ListViewPage.xaml.cs using System ; using System.Collections.Generic ; using Xamarin.Forms ; namespace DataBindingDemo.Movies { public partial class ListViewPage : ContentPage { public static string [] Months = new []{ \"January\" , \"February\" , \"March\" , \"April\" , \"May\" , \"June\" , \"July\" , \"August\" , \"September\" , \"October\" , \"November\" , \"December\" }; public ListViewPage () { InitializeComponent (); } } }","title":"Data Source"},{"location":"views/list-view/#data-binding-listview","text":"We can easily bind the row of the list view to a data source. We have a model for a Movie : Movie.cs public class Movie { [JsonProperty(\"objectId\")] public string ObjectId { get ; set ; } [JsonProperty(\"image\")] public Image Image { get ; set ; } [JsonProperty(\"createdAt\")] public DateTime CreatedAt { get ; set ; } [JsonProperty(\"updatedAt\")] public DateTime UpdatedAt { get ; set ; } [JsonProperty(\"title\")] public string Title { get ; set ; } [JsonProperty(\"releaseYear\")] public string ReleaseYear { get ; set ; } [JsonProperty(\"genre\")] public IList < string > Genre { get ; set ; } [JsonProperty(\"rating\")] public double Rating { get ; set ; } [JsonProperty(\"description\")] public string Description { get ; set ; } } ApiResult.cs public class ApiResult { [JsonProperty(\"results\")] public IEnumerable < Movie > Movies { get ; set ; } } Image.cs public class Image { [JsonProperty(\"name\")] public string Name { get ; set ; } [JsonProperty(\"url\")] public string Url { get ; set ; } } And this is the link to the full json with the movie data. And a model to fetch the data, and within the model we have an ObservableCollection of a Movie : public class MoviesViewModel : BaseViewModel { ObservableCollection < Movie > _movies ; public ObservableCollection < Movie > Movies { get { if ( _movies == null ) { _movies = new ObservableCollection < Movie >(); } return _movies ; } set { if ( value != _movies ) { _movies = value ; OnPropertyChanged (); } } } public MoviesViewModel () { Task . Run ( async () => { var movies = await GetMovies (); movies . ForEach ( Movies . Add ); }); } private async Task < IEnumerable < Movie >> GetMovies (){ var client = new HttpClient (); try { IsBusy = true ; var data = await client . GetStringAsync ( \"replace with url to json file\" ); IsBusy = false ; return JsonConvert . DeserializeObject < ApiResult >( data ). Movies ; } catch ( Exception ex ) { IsBusy = false ; Debug . WriteLine ( ex . Message ); return null ; } } } Then in the XAML, we bind the rows to the movie collection <ListView RowHeight= \"100\" AbsoluteLayout.LayoutFlags= \"All\" AbsoluteLayout.LayoutBounds= \"1,1,1,1\" ItemsSource= \"{Binding Movies}\" > <ListView.ItemTemplate> <DataTemplate> <ViewCell> <Grid Padding= \"5\" > <Grid.RowDefinitions> <RowDefinition Height= \".3*\" /> <RowDefinition Height= \".7*\" /> </Grid.RowDefinitions> <Grid.ColumnDefinitions> <ColumnDefinition Width= \".2*\" /> <ColumnDefinition Width= \".8*\" /> </Grid.ColumnDefinitions> <Image HorizontalOptions= \"Start\" VerticalOptions= \"Start\" Source= \"{Binding Image.Url}\" Grid.RowSpan= \"2\" /> <Label HorizontalOptions= \"Start\" Text= \"{Binding Title}\" Grid.Column= \"1\" Style= \"{DynamicResource TitleStyle}\" /> <Label HorizontalOptions= \"Start\" Text= \"{Binding Description}\" Grid.Row= \"1\" Grid.Column= \"1\" Style= \"{DynamicResource BodyStyle}\" /> </Grid> </ViewCell> </DataTemplate> </ListView.ItemTemplate> </ListView> Note The row for each ListView is bound to a a movie. the two Label s and ImageView are bound to the properties of a movie. and in the code behind file, we have set the BindingContext as follows : public MoviesPage () { InitializeComponent (); var vm = new MoviesViewModel (); BindingContext = vm ; }","title":"Data Binding ListView"},{"location":"views/map/","text":"Map \u00b6 Xamarin Forms will use the native map control on each platform. On Android it will use the Google Maps and on iOS the Apple Maps. The Maps needs to be configured. Add Nuget Package \u00b6 The Maps is included as a separate Nuget package. Add the Xamarin.Forms.Maps nuget package to every project in the solution. Initialize iOS Project \u00b6 Navigate to the iOS project and add Xamarin.FormsMaps.Init(); after the Xamarin.Forms.Init() line in the AppDelegate.cs file : global :: Xamarin . Forms . Forms . Init (); Xamarin . FormsMaps . Init (); LoadApplication ( new App ()); On simulator, you should be able to create a new Map as follows: public partial class MapsPage : ContentPage { public MapsPage () { InitializeComponent (); Content = new Map (); } } You will also need to add get permission from the user for accessing their location. Add the following in the Info.plist file : <key> XSAppIconAssets </key> <string> Assets.xcassets/AppIcon.appiconset </string> <key> NSLocationWhenInUseUsageDescription </key> <string> App is using your location </string> After adding the configs in the Info.plist file, we can now show the users location as follows : Content = new Map { IsShowingUser = true , MapType = MapType . Hybrid }; Configure Android \u00b6 In the MainActivity.cs file add the following line Xamarin.FormsMaps.Init(this,bundle); after the Xamarin.Forms.Init(this,bundle); line. The modified file should be as follows : protected override void OnCreate ( Bundle bundle ) { TabLayoutResource = Resource . Layout . Tabbar ; ToolbarResource = Resource . Layout . Toolbar ; base . OnCreate ( bundle ); global :: Xamarin . Forms . Forms . Init ( this , bundle ); Xamarin . FormsMaps . Init ( this , bundle ); LoadApplication ( new App ()); } Obtain API Key \u00b6 You will need to obtain an API Key to use the Google Maps for Android. They are two keys used, one for debug and another one for production. Following this guide on getting an API Key for Google Maps, Obtain Google Maps API Key During development you can register the debug key on the Google Console. Get SHA1 Fingerprint \u00b6 To get the SHA1 fingerprint for the debug key run the following on the command line keytool -v -list -keystore ~/.local/share/Xamarin/Mono\\ for\\ Android/debug.keystore The default password is android Add the API Key to the AndroidManifest.xml \u00b6 The Google Maps key needs to be added inside the <application></application> in the AndroidManifest.xml file. <meta-data android:name= \"com.google.android.maps.v2.API_KEY\" android:value= \"<Replace with your API Key Here>\" /> Add Permission You will need to add the following permissions to the AndroidManifest.xml file : <uses-permission android:name= \"android.permission.ACCESS_FINE_LOCATION\" /> <uses-permission android:name= \"android.permission.ACCESS_MOCK_LOCATION\" /> <uses-permission android:name= \"android.permission.ACCESS_NETWORK_STATE\" /> <uses-permission android:name= \"android.permission.ACCESS_COARSE_LOCATION\" /> <uses-permission android:name= \"android.permission.INTERNET\" /> <uses-permission android:name= \"android.permission.ACCESS_LOCATION_EXTRA_COMMANDS\" /> <uses-permission android:name= \"android.permission.ACCESS_WIFI_STATE\" />","title":"Map"},{"location":"views/map/#map","text":"Xamarin Forms will use the native map control on each platform. On Android it will use the Google Maps and on iOS the Apple Maps. The Maps needs to be configured.","title":"Map"},{"location":"views/map/#add-nuget-package","text":"The Maps is included as a separate Nuget package. Add the Xamarin.Forms.Maps nuget package to every project in the solution.","title":"Add Nuget Package"},{"location":"views/map/#initialize-ios-project","text":"Navigate to the iOS project and add Xamarin.FormsMaps.Init(); after the Xamarin.Forms.Init() line in the AppDelegate.cs file : global :: Xamarin . Forms . Forms . Init (); Xamarin . FormsMaps . Init (); LoadApplication ( new App ()); On simulator, you should be able to create a new Map as follows: public partial class MapsPage : ContentPage { public MapsPage () { InitializeComponent (); Content = new Map (); } } You will also need to add get permission from the user for accessing their location. Add the following in the Info.plist file : <key> XSAppIconAssets </key> <string> Assets.xcassets/AppIcon.appiconset </string> <key> NSLocationWhenInUseUsageDescription </key> <string> App is using your location </string> After adding the configs in the Info.plist file, we can now show the users location as follows : Content = new Map { IsShowingUser = true , MapType = MapType . Hybrid };","title":"Initialize iOS Project"},{"location":"views/map/#configure-android","text":"In the MainActivity.cs file add the following line Xamarin.FormsMaps.Init(this,bundle); after the Xamarin.Forms.Init(this,bundle); line. The modified file should be as follows : protected override void OnCreate ( Bundle bundle ) { TabLayoutResource = Resource . Layout . Tabbar ; ToolbarResource = Resource . Layout . Toolbar ; base . OnCreate ( bundle ); global :: Xamarin . Forms . Forms . Init ( this , bundle ); Xamarin . FormsMaps . Init ( this , bundle ); LoadApplication ( new App ()); }","title":"Configure Android"},{"location":"views/map/#obtain-api-key","text":"You will need to obtain an API Key to use the Google Maps for Android. They are two keys used, one for debug and another one for production. Following this guide on getting an API Key for Google Maps, Obtain Google Maps API Key During development you can register the debug key on the Google Console.","title":"Obtain API Key"},{"location":"views/map/#get-sha1-fingerprint","text":"To get the SHA1 fingerprint for the debug key run the following on the command line keytool -v -list -keystore ~/.local/share/Xamarin/Mono\\ for\\ Android/debug.keystore The default password is android","title":"Get SHA1 Fingerprint"},{"location":"views/map/#add-the-api-key-to-the-androidmanifestxml","text":"The Google Maps key needs to be added inside the <application></application> in the AndroidManifest.xml file. <meta-data android:name= \"com.google.android.maps.v2.API_KEY\" android:value= \"<Replace with your API Key Here>\" /> Add Permission You will need to add the following permissions to the AndroidManifest.xml file : <uses-permission android:name= \"android.permission.ACCESS_FINE_LOCATION\" /> <uses-permission android:name= \"android.permission.ACCESS_MOCK_LOCATION\" /> <uses-permission android:name= \"android.permission.ACCESS_NETWORK_STATE\" /> <uses-permission android:name= \"android.permission.ACCESS_COARSE_LOCATION\" /> <uses-permission android:name= \"android.permission.INTERNET\" /> <uses-permission android:name= \"android.permission.ACCESS_LOCATION_EXTRA_COMMANDS\" /> <uses-permission android:name= \"android.permission.ACCESS_WIFI_STATE\" />","title":"Add the API Key to the AndroidManifest.xml"},{"location":"views/picker/","text":"Picker \u00b6 The picker is used to select from a list of choices. The Picker visual appearance is similar to an Entry but instead of using a keyboard, you choose from a predefined list of elements. Define in XAML \u00b6 <Picker Title= \"Day\" ItemsSource= \"{StaticResource DaysOfWeek}\" /> The DaysOfWeek is a static resource array define in the XAML file as follows : <ContentPage.Resources> <ResourceDictionary> <x:Array x:Key= \"DaysOfWeek\" Type= \"{x:Type x:String}\" > <x:String> Monday </x:String> <x:String> Tuesday </x:String> <x:String> Wednesday </x:String> <x:String> Thursday </x:String> <x:String> Friday </x:String> <x:String> Saturday </x:String> <x:String> Sunday </x:String> </x:Array> </ResourceDictionary> < /ContentPage.Resources We can also use a static member of the backing class as the source of the picker view as follows : <Picker Title= \"Month\" ItemsSource= \"{x:Static local:PickerPage.Months}\" /> and in the backing code file : public partial class PickerPage : ContentPage { public static string [] Months = { \"Jan\" , \"Feb\" , \"Mar\" , \"Apr\" , \"May\" , \"Jun\" , \"Jul\" , \"Aug\" , \"Sept\" , \"Oct\" , \"Nov\" , \"Dec\" }; public PickerPage () { InitializeComponent (); } } Notice we are using the XAML extension x:Static to use static resources. Provide Picker Source in Code \u00b6 We can altenatively proved the source of the Picker in code, as follows : <Picker Title= \"Year\" x:Name= \"pickerYear\" /> And in the backing code file : pickerYear . ItemsSource = new List < string > { \"2000\" , \"2001\" , \"2002\" , \"2003\" , \"2004\" }; Define Picker in Code \u00b6 We can also define and populate the Picker from code as follows: var picker = new Picker () { ItemsSource = new List < string > { \"Jan\" , \"Feb\" , \"Mar\" } };","title":"Picker"},{"location":"views/picker/#picker","text":"The picker is used to select from a list of choices. The Picker visual appearance is similar to an Entry but instead of using a keyboard, you choose from a predefined list of elements.","title":"Picker"},{"location":"views/picker/#define-in-xaml","text":"<Picker Title= \"Day\" ItemsSource= \"{StaticResource DaysOfWeek}\" /> The DaysOfWeek is a static resource array define in the XAML file as follows : <ContentPage.Resources> <ResourceDictionary> <x:Array x:Key= \"DaysOfWeek\" Type= \"{x:Type x:String}\" > <x:String> Monday </x:String> <x:String> Tuesday </x:String> <x:String> Wednesday </x:String> <x:String> Thursday </x:String> <x:String> Friday </x:String> <x:String> Saturday </x:String> <x:String> Sunday </x:String> </x:Array> </ResourceDictionary> < /ContentPage.Resources We can also use a static member of the backing class as the source of the picker view as follows : <Picker Title= \"Month\" ItemsSource= \"{x:Static local:PickerPage.Months}\" /> and in the backing code file : public partial class PickerPage : ContentPage { public static string [] Months = { \"Jan\" , \"Feb\" , \"Mar\" , \"Apr\" , \"May\" , \"Jun\" , \"Jul\" , \"Aug\" , \"Sept\" , \"Oct\" , \"Nov\" , \"Dec\" }; public PickerPage () { InitializeComponent (); } } Notice we are using the XAML extension x:Static to use static resources.","title":"Define in XAML"},{"location":"views/picker/#provide-picker-source-in-code","text":"We can altenatively proved the source of the Picker in code, as follows : <Picker Title= \"Year\" x:Name= \"pickerYear\" /> And in the backing code file : pickerYear . ItemsSource = new List < string > { \"2000\" , \"2001\" , \"2002\" , \"2003\" , \"2004\" };","title":"Provide Picker Source in Code"},{"location":"views/picker/#define-picker-in-code","text":"We can also define and populate the Picker from code as follows: var picker = new Picker () { ItemsSource = new List < string > { \"Jan\" , \"Feb\" , \"Mar\" } };","title":"Define Picker in Code"},{"location":"views/progress-bar/","text":"Progress Bar \u00b6 The ProgressBar control is used to display progress of an activity. In XAML \u00b6 <ProgressBar Progress= \"0.2\" /> In Code \u00b6 var progress = new ProgressBar () { Progress = 0.3 }; We could use a platform timer and change the value of the ProgressBar programmatically as follows : public partial class ProgressBarPage : ContentPage { public ProgressBarPage () { InitializeComponent (); var progress = new ProgressBar () { Progress = 0.3 }; Content = progress ; //Start a device timer that fires every 1 second Device . StartTimer ( TimeSpan . FromSeconds ( 1 ),() => { if ( progress . Progress <= 1 ) { // Animate the progress value over 250ms progress . ProgressTo ( progress . Progress + 0.1 , 250 , Easing . Linear ); return true ; } return false ; }); } }","title":"ProgressBar"},{"location":"views/progress-bar/#progress-bar","text":"The ProgressBar control is used to display progress of an activity.","title":"Progress Bar"},{"location":"views/progress-bar/#in-xaml","text":"<ProgressBar Progress= \"0.2\" />","title":"In XAML"},{"location":"views/progress-bar/#in-code","text":"var progress = new ProgressBar () { Progress = 0.3 }; We could use a platform timer and change the value of the ProgressBar programmatically as follows : public partial class ProgressBarPage : ContentPage { public ProgressBarPage () { InitializeComponent (); var progress = new ProgressBar () { Progress = 0.3 }; Content = progress ; //Start a device timer that fires every 1 second Device . StartTimer ( TimeSpan . FromSeconds ( 1 ),() => { if ( progress . Progress <= 1 ) { // Animate the progress value over 250ms progress . ProgressTo ( progress . Progress + 0.1 , 250 , Easing . Linear ); return true ; } return false ; }); } }","title":"In Code"},{"location":"views/search-bar/","text":"SearchBar \u00b6 The view provides a search box. In XAML \u00b6 <SearchBar Placeholder= \"{Binding SearchPlaceholder}\" Text= \"{Binding SearchTerm}\" SearchCommand= \"{Binding SearchBarCommand}\" SearchCommandParameter= \"Albania\" VerticalOptions= \"Start\" /> In Code \u00b6 Command < object > _searchBarCommand ; public Command < object > SearchBarCommand { get { return _searchBarCommand ?? ( _searchBarCommand = new Command < object >( Search )); } } The SearchCommand is bound to the Search so that it can filter the contents of the ListView. The complete code is as follows : public class SearchBarViewModel : BaseViewModel { public SearchBarViewModel () { Countries = new ObservableCollection < string >(){ \"Afghanistan\" , \"Albania\" , \"Algeria\" , \"Andorra\" , \"Angola\" , \"Antigua and Barbuda\" , \"Argentina\" }; } Command < object > _searchBarCommand ; public Command < object > SearchBarCommand { get { return _searchBarCommand ?? ( _searchBarCommand = new Command < object >( Search )); } } public ObservableCollection < string > Countries { get ; set ;} public string SearchTerm { get ; set ; } public string SearchPlaceholder { get { return \"Country name to search\" ; } } private void Search ( object searchTerm ) { var searchWord = searchTerm as string ; if (! string . IsNullOrEmpty ( searchWord )) { var countries = Countries . Where ( s => s . Equals ( searchWord )); Countries = new ObservableCollection < string >( countries ); OnPropertyChanged ( \"Countries\" ); } } } Note this code is not complete, it just shows how the SearchBarCommand is bound to the SearchBar control.","title":"Search Bar"},{"location":"views/search-bar/#searchbar","text":"The view provides a search box.","title":"SearchBar"},{"location":"views/search-bar/#in-xaml","text":"<SearchBar Placeholder= \"{Binding SearchPlaceholder}\" Text= \"{Binding SearchTerm}\" SearchCommand= \"{Binding SearchBarCommand}\" SearchCommandParameter= \"Albania\" VerticalOptions= \"Start\" />","title":"In XAML"},{"location":"views/search-bar/#in-code","text":"Command < object > _searchBarCommand ; public Command < object > SearchBarCommand { get { return _searchBarCommand ?? ( _searchBarCommand = new Command < object >( Search )); } } The SearchCommand is bound to the Search so that it can filter the contents of the ListView. The complete code is as follows : public class SearchBarViewModel : BaseViewModel { public SearchBarViewModel () { Countries = new ObservableCollection < string >(){ \"Afghanistan\" , \"Albania\" , \"Algeria\" , \"Andorra\" , \"Angola\" , \"Antigua and Barbuda\" , \"Argentina\" }; } Command < object > _searchBarCommand ; public Command < object > SearchBarCommand { get { return _searchBarCommand ?? ( _searchBarCommand = new Command < object >( Search )); } } public ObservableCollection < string > Countries { get ; set ;} public string SearchTerm { get ; set ; } public string SearchPlaceholder { get { return \"Country name to search\" ; } } private void Search ( object searchTerm ) { var searchWord = searchTerm as string ; if (! string . IsNullOrEmpty ( searchWord )) { var countries = Countries . Where ( s => s . Equals ( searchWord )); Countries = new ObservableCollection < string >( countries ); OnPropertyChanged ( \"Countries\" ); } } } Note this code is not complete, it just shows how the SearchBarCommand is bound to the SearchBar control.","title":"In Code"},{"location":"views/slider/","text":"Slider \u00b6 A view control that inputs a linear value. The control looks similar to a progress bar but allows scrubbing. Define in XAML \u00b6 <Slider Minimum= \"0\" Maximum= \"100\" Value= \"20\" x:Name= \"slider\" /> We could use data binding and show the value of the Slider as follows : <StackLayout> <Label BindingContext= \"{x:Reference slider}\" Text= \"{Binding Value, StringFormat='The value is {0:F d}'}\" /> <Slider Minimum= \"0\" Maximum= \"100\" Value= \"20\" x:Name= \"slider\" /> </StackLayout> Define in Code \u00b6 var videoSlider = new Slider { Value = 5 , Minimum = 0 , Maximum = 10 };","title":"Slider"},{"location":"views/slider/#slider","text":"A view control that inputs a linear value. The control looks similar to a progress bar but allows scrubbing.","title":"Slider"},{"location":"views/slider/#define-in-xaml","text":"<Slider Minimum= \"0\" Maximum= \"100\" Value= \"20\" x:Name= \"slider\" /> We could use data binding and show the value of the Slider as follows : <StackLayout> <Label BindingContext= \"{x:Reference slider}\" Text= \"{Binding Value, StringFormat='The value is {0:F d}'}\" /> <Slider Minimum= \"0\" Maximum= \"100\" Value= \"20\" x:Name= \"slider\" /> </StackLayout>","title":"Define in XAML"},{"location":"views/slider/#define-in-code","text":"var videoSlider = new Slider { Value = 5 , Minimum = 0 , Maximum = 10 };","title":"Define in Code"},{"location":"views/stepper/","text":"Stepper \u00b6 A Stepper allows inputting a discrete value that is constrained to a range. Define in XAML \u00b6 <Stepper Minimum= \"0\" Maximum= \"10\" x:Name= \"stepper\" /> Lets display the value of the stepper using data binding in a label as follows : <StackLayout x:Name= \"Container\" > <Label BindingContext= \"{x:Reference stepper}\" Text= \"{Binding Value}\" /> <Stepper Minimum= \"0\" Maximum= \"10\" x:Name= \"stepper\" Increment= \"0.5\" /> </StackLayout> Define in Code \u00b6 var ageStepper = new Stepper { Minimum = 18 , Maximum = 65 };","title":"Stepper"},{"location":"views/stepper/#stepper","text":"A Stepper allows inputting a discrete value that is constrained to a range.","title":"Stepper"},{"location":"views/stepper/#define-in-xaml","text":"<Stepper Minimum= \"0\" Maximum= \"10\" x:Name= \"stepper\" /> Lets display the value of the stepper using data binding in a label as follows : <StackLayout x:Name= \"Container\" > <Label BindingContext= \"{x:Reference stepper}\" Text= \"{Binding Value}\" /> <Stepper Minimum= \"0\" Maximum= \"10\" x:Name= \"stepper\" Increment= \"0.5\" /> </StackLayout>","title":"Define in XAML"},{"location":"views/stepper/#define-in-code","text":"var ageStepper = new Stepper { Minimum = 18 , Maximum = 65 };","title":"Define in Code"},{"location":"views/switch/","text":"Switch \u00b6 A Switch allows toggling its value to true and false. Define in XAML \u00b6 <Switch IsToggled= \"true\" /> Define in Code \u00b6 var attendingSwitch = new Switch { IsToggled = true }; Change Color \u00b6 The color for the Swith can be changed for each platform. Android \u00b6 These changes should be made in the Android project Open the styles.xml file located under Resources -> values folder Change the <item name=\"colorAccent\">#FF4081</item> and assing your designed color iOS \u00b6 These changes should be made in the iOS project Open the AppDelegate.cs file Within the method FinishedLaunching add the following lines // You can also use UIColor.FromRGB to assign colors using RGB values // Eg assign a green color UIColor.FromRGB(0x91, 0xCA, 0x47) UISwitch . Appearance . OnTintColor = UIColor . Orange ; The complete method should be as follows : public override bool FinishedLaunching ( UIApplication app , NSDictionary options ) { UISwitch.Appearance.OnTintColor = UIColor.Orange ; global : : Xamarin . Forms . Forms . Init (); LoadApplication(new App()) ; return base.FinishedLaunching(app, options) ; }","title":"Switch"},{"location":"views/switch/#switch","text":"A Switch allows toggling its value to true and false.","title":"Switch"},{"location":"views/switch/#define-in-xaml","text":"<Switch IsToggled= \"true\" />","title":"Define in XAML"},{"location":"views/switch/#define-in-code","text":"var attendingSwitch = new Switch { IsToggled = true };","title":"Define in Code"},{"location":"views/switch/#change-color","text":"The color for the Swith can be changed for each platform.","title":"Change Color"},{"location":"views/switch/#android","text":"These changes should be made in the Android project Open the styles.xml file located under Resources -> values folder Change the <item name=\"colorAccent\">#FF4081</item> and assing your designed color","title":"Android"},{"location":"views/switch/#ios","text":"These changes should be made in the iOS project Open the AppDelegate.cs file Within the method FinishedLaunching add the following lines // You can also use UIColor.FromRGB to assign colors using RGB values // Eg assign a green color UIColor.FromRGB(0x91, 0xCA, 0x47) UISwitch . Appearance . OnTintColor = UIColor . Orange ; The complete method should be as follows : public override bool FinishedLaunching ( UIApplication app , NSDictionary options ) { UISwitch.Appearance.OnTintColor = UIColor.Orange ; global : : Xamarin . Forms . Forms . Init (); LoadApplication(new App()) ; return base.FinishedLaunching(app, options) ; }","title":"iOS"},{"location":"views/tableview/","text":"","title":"Table View"},{"location":"views/time-picker/","text":"TimePicker \u00b6 The TimePickers allows picking time. Define in XAML \u00b6 <TimePicker /> Define in Code \u00b6 var timePicker = new TimePicker { Time = new TimeSpan ( 13 , 15 , 0 ) };","title":"Time Picker"},{"location":"views/time-picker/#timepicker","text":"The TimePickers allows picking time.","title":"TimePicker"},{"location":"views/time-picker/#define-in-xaml","text":"<TimePicker />","title":"Define in XAML"},{"location":"views/time-picker/#define-in-code","text":"var timePicker = new TimePicker { Time = new TimeSpan ( 13 , 15 , 0 ) };","title":"Define in Code"},{"location":"views/toolbar/","text":"","title":"Toolbar"},{"location":"views/web-view/","text":"Web View \u00b6 The control is used toHTML content. In XAML \u00b6 <WebView Source= \"https://www.peruzal.com\" /> In Code \u00b6 var webView = new WebView { Source = \"https://training.peruzal.com\" };","title":"Web View"},{"location":"views/web-view/#web-view","text":"The control is used toHTML content.","title":"Web View"},{"location":"views/web-view/#in-xaml","text":"<WebView Source= \"https://www.peruzal.com\" />","title":"In XAML"},{"location":"views/web-view/#in-code","text":"var webView = new WebView { Source = \"https://training.peruzal.com\" };","title":"In Code"},{"location":"xaml/introduction/","text":"Introduction XAML \u00b6 XAML stands for Extensible Markup Language . XAML is the preferred way for creating the UI in Xamarin Forms apps. XAML is also used in creating Windows UWP applications. The version for Windows UWP is not the same as the one used for Xamarin.Forms applications but there's effort to standardize the different XAML versions. Design Interface \u00b6 Unlike Android Studio and XCode that comes with a visual design tool, there's no drag and drop tool in Visual Studio for creating the UI with XAML. We will largely depend with intelli-sense for auto-completing the XAML. In some instances the intelli-sense will stop working and you might be forced to restart Visual Studio. File Structure \u00b6 XAML files are composed of two files. The UI and the code behind. If we were to create an example Login page we would have the following : Login.xaml - XAML UI Login.xaml.cs - Code behind for the UI XAML UI Structure \u00b6 A XAML view is composed of a Page . Within the Page different Layouts can be used and within the Layout several views are used to created the UI. Here is a simplified structure of a single XAML view. Code vs XAML \u00b6 Instead of using XAML, we can also create the UI entirely in code. Note Creating UIs in code is not recommended and does not promote code sharing. When creating most apps, designers need to beautify the app, and not many designers can code. Designers can easily work in XAML without having to touch the underlying code for the app. Login.xaml <?xml version=\"1.0\" encoding=\"UTF-8\"?> <ContentPage xmlns= \"http://xamarin.com/schemas/2014/forms\" xmlns:x= \"http://schemas.microsoft.com/winfx/2009/xaml\" x:Class= \"TextSample.XAML.LoginPage\" > <ContentPage.Content> </ContentPage.Content> </ContentPage> Login.xaml.cs using System ; using System.Collections.Generic ; using Xamarin.Forms ; namespace TextSample.XAML { public partial class LoginPage : ContentPage { public LoginPage () { InitializeComponent (); } } } Page \u00b6 XAML pages derive from the Page class. The most commong type of the page is the ContentPage . A page usually takes the whole screen or part of the screen. The default project template creates a simple ContentPage . The contents of a ContentPage are assigned in the Content property. The Content property can only take one child. In XAML, Content property is the default, so we do not need to specify it, we can just start populating the content as follows : <?xml version=\"1.0\" encoding=\"UTF-8\"?> <ContentPage xmlns= \"http://xamarin.com/schemas/2014/forms\" xmlns:x= \"http://schemas.microsoft.com/winfx/2009/xaml\" Padding= \"20\" Title= \"Login\" x:Class= \"TextSample.XAML.LoginPage\" > <StackLayout Spacing= \"10\" > <Entry Placeholder= \"Username\" Keyboard= \"Email\" /> <Entry Placeholder= \"Password\" Keyboard= \"Text\" IsPassword= \"true\" /> <Button Text= \"Login\" BackgroundColor= \"Orange\" TextColor= \"White\" /> </StackLayout> </ContentPage> Note With the XAML previewer we can see the preview as we build the page. Page Types \u00b6 Out of the box, Xamarin Forms have the following Pages available : ContentPage MasterDetailPage NavigationPage TabbedPage TemplatePage CarouselPage We will discuss these pages in more detail Referencing XAML Controls in Code \u00b6 To have access to the XAML controls in code, we can use the predefined XAML namespace xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml . This is already defined for you when you create a new XAML page. We can use x:Name extension to give variable names to controls, and those variable names will be automatically be available in the code behind file. <Button Text= \"Login\" BackgroundColor= \"Orange\" TextColor= \"White\" x:Name= \"btnLogin\" /> In the code behind file, we will now have a variable called btnLogin . We can now manipulate the variable however we want. Adding Events to Controls \u00b6 We can also attach events directly to controls in XAML. E.g to have the attach the TextChanged event to the username filed defined above : In XAML <Entry Placeholder= \"Username\" Keyboard= \"Email\" TextChanged= \"UsernameChanged\" /> In Code void UsernameChanged ( object sender , Xamarin . Forms . TextChangedEventArgs e ) { throw new NotImplementedException (); } Complex Properties \u00b6 Most of the properties set on the views are complex objects, e.g the Margin is of type Thickness . There are two ways to set the value : Using ValueConverter Using Attached Properties Value Converter \u00b6 Using a value converter, we can easily set a complex property. E.g, to set the padding to 20 for the content page, we can do the following : <ContentPage xmlns= \"http://xamarin.com/schemas/2014/forms\" xmlns:x= \"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:local= \"clr-namespace:Intro\" x:Class= \"Intro.MainPage\" Padding= \"20\" > We are setting Padding=\"20\" as a sting value, a ValueConveter is used to convert the string value to its corresponding Thickness type. Attached Properties \u00b6 We can also have properties not defined on that control be made available by attaching them. Properties can be attached when the control is embedded inside the outer control that have the property available. E.g, the Grid layout, defines Grid.Row and Grid.Column . We can have these controls available to child controls of the grid e.g <Grid> <Grid.RowDefinitions> <RowDefinition Height= \"*\" /> <RowDefinition Height= \"*\" /> </Grid.RowDefinitions> <Grid.ColumnDefinitions> <ColumnDefinition Width= \"*\" /> <ColumnDefinition Width= \"*\" /> </Grid.ColumnDefinitions> <Label Text= \"Top Left\" Grid.Row= \"0\" Grid.Column= \"0\" /> <Label Text= \"Top Right\" Grid.Row= \"0\" Grid.Column= \"1\" /> <Label Text= \"Bottom Left\" Grid.Row= \"1\" Grid.Column= \"0\" /> <Label Text= \"Bottom Right\" Grid.Row= \"1\" Grid.Column= \"1\" /> </Grid> The Label control does not have a property of type Grid.Row . Since the Label is a child of the Grid , we can attach the property to the Label .","title":"Introduction to XAML"},{"location":"xaml/introduction/#introduction-xaml","text":"XAML stands for Extensible Markup Language . XAML is the preferred way for creating the UI in Xamarin Forms apps. XAML is also used in creating Windows UWP applications. The version for Windows UWP is not the same as the one used for Xamarin.Forms applications but there's effort to standardize the different XAML versions.","title":"Introduction XAML"},{"location":"xaml/introduction/#design-interface","text":"Unlike Android Studio and XCode that comes with a visual design tool, there's no drag and drop tool in Visual Studio for creating the UI with XAML. We will largely depend with intelli-sense for auto-completing the XAML. In some instances the intelli-sense will stop working and you might be forced to restart Visual Studio.","title":"Design Interface"},{"location":"xaml/introduction/#file-structure","text":"XAML files are composed of two files. The UI and the code behind. If we were to create an example Login page we would have the following : Login.xaml - XAML UI Login.xaml.cs - Code behind for the UI","title":"File Structure"},{"location":"xaml/introduction/#xaml-ui-structure","text":"A XAML view is composed of a Page . Within the Page different Layouts can be used and within the Layout several views are used to created the UI. Here is a simplified structure of a single XAML view.","title":"XAML UI Structure"},{"location":"xaml/introduction/#code-vs-xaml","text":"Instead of using XAML, we can also create the UI entirely in code. Note Creating UIs in code is not recommended and does not promote code sharing. When creating most apps, designers need to beautify the app, and not many designers can code. Designers can easily work in XAML without having to touch the underlying code for the app. Login.xaml <?xml version=\"1.0\" encoding=\"UTF-8\"?> <ContentPage xmlns= \"http://xamarin.com/schemas/2014/forms\" xmlns:x= \"http://schemas.microsoft.com/winfx/2009/xaml\" x:Class= \"TextSample.XAML.LoginPage\" > <ContentPage.Content> </ContentPage.Content> </ContentPage> Login.xaml.cs using System ; using System.Collections.Generic ; using Xamarin.Forms ; namespace TextSample.XAML { public partial class LoginPage : ContentPage { public LoginPage () { InitializeComponent (); } } }","title":"Code vs XAML"},{"location":"xaml/introduction/#page","text":"XAML pages derive from the Page class. The most commong type of the page is the ContentPage . A page usually takes the whole screen or part of the screen. The default project template creates a simple ContentPage . The contents of a ContentPage are assigned in the Content property. The Content property can only take one child. In XAML, Content property is the default, so we do not need to specify it, we can just start populating the content as follows : <?xml version=\"1.0\" encoding=\"UTF-8\"?> <ContentPage xmlns= \"http://xamarin.com/schemas/2014/forms\" xmlns:x= \"http://schemas.microsoft.com/winfx/2009/xaml\" Padding= \"20\" Title= \"Login\" x:Class= \"TextSample.XAML.LoginPage\" > <StackLayout Spacing= \"10\" > <Entry Placeholder= \"Username\" Keyboard= \"Email\" /> <Entry Placeholder= \"Password\" Keyboard= \"Text\" IsPassword= \"true\" /> <Button Text= \"Login\" BackgroundColor= \"Orange\" TextColor= \"White\" /> </StackLayout> </ContentPage> Note With the XAML previewer we can see the preview as we build the page.","title":"Page"},{"location":"xaml/introduction/#page-types","text":"Out of the box, Xamarin Forms have the following Pages available : ContentPage MasterDetailPage NavigationPage TabbedPage TemplatePage CarouselPage We will discuss these pages in more detail","title":"Page Types"},{"location":"xaml/introduction/#referencing-xaml-controls-in-code","text":"To have access to the XAML controls in code, we can use the predefined XAML namespace xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml . This is already defined for you when you create a new XAML page. We can use x:Name extension to give variable names to controls, and those variable names will be automatically be available in the code behind file. <Button Text= \"Login\" BackgroundColor= \"Orange\" TextColor= \"White\" x:Name= \"btnLogin\" /> In the code behind file, we will now have a variable called btnLogin . We can now manipulate the variable however we want.","title":"Referencing XAML Controls in Code"},{"location":"xaml/introduction/#adding-events-to-controls","text":"We can also attach events directly to controls in XAML. E.g to have the attach the TextChanged event to the username filed defined above : In XAML <Entry Placeholder= \"Username\" Keyboard= \"Email\" TextChanged= \"UsernameChanged\" /> In Code void UsernameChanged ( object sender , Xamarin . Forms . TextChangedEventArgs e ) { throw new NotImplementedException (); }","title":"Adding Events to Controls"},{"location":"xaml/introduction/#complex-properties","text":"Most of the properties set on the views are complex objects, e.g the Margin is of type Thickness . There are two ways to set the value : Using ValueConverter Using Attached Properties","title":"Complex Properties"},{"location":"xaml/introduction/#value-converter","text":"Using a value converter, we can easily set a complex property. E.g, to set the padding to 20 for the content page, we can do the following : <ContentPage xmlns= \"http://xamarin.com/schemas/2014/forms\" xmlns:x= \"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:local= \"clr-namespace:Intro\" x:Class= \"Intro.MainPage\" Padding= \"20\" > We are setting Padding=\"20\" as a sting value, a ValueConveter is used to convert the string value to its corresponding Thickness type.","title":"Value Converter"},{"location":"xaml/introduction/#attached-properties","text":"We can also have properties not defined on that control be made available by attaching them. Properties can be attached when the control is embedded inside the outer control that have the property available. E.g, the Grid layout, defines Grid.Row and Grid.Column . We can have these controls available to child controls of the grid e.g <Grid> <Grid.RowDefinitions> <RowDefinition Height= \"*\" /> <RowDefinition Height= \"*\" /> </Grid.RowDefinitions> <Grid.ColumnDefinitions> <ColumnDefinition Width= \"*\" /> <ColumnDefinition Width= \"*\" /> </Grid.ColumnDefinitions> <Label Text= \"Top Left\" Grid.Row= \"0\" Grid.Column= \"0\" /> <Label Text= \"Top Right\" Grid.Row= \"0\" Grid.Column= \"1\" /> <Label Text= \"Bottom Left\" Grid.Row= \"1\" Grid.Column= \"0\" /> <Label Text= \"Bottom Right\" Grid.Row= \"1\" Grid.Column= \"1\" /> </Grid> The Label control does not have a property of type Grid.Row . Since the Label is a child of the Grid , we can attach the property to the Label .","title":"Attached Properties"},{"location":"xaml/on-platform/","text":"Platform Specific \u00b6 When you want to render your UI differently on each platform you can use the OnPlatform XAML extension to run code for Android, iOS and UWP. An example is, on iOS, the content shows up right from the top and you might want to push it downwards 20 points, but on Android and UWP content is displayed after the status bar or tool. Apply Margin Per Platform \u00b6 Lets apply a 20 point margin for all platforms : <StackLayout Margin= \"0,20,0,0\" > <Label Text= \"This will be 20 points below the status bar on iOS\" /> </StackLayout> Margin is of type Thickness . The value are as follows : First zero - Left margin 20 - Top margin Third zero - Right margin Last zero - Bottom margin But we ideally want is to only apply the top margin only on iOS. To accomplish that we would use the OnPlatform property as follows : <StackLayout> <StackLayout.Margin> <OnPlatform.Platforms> <On Platform= \"iOS\" Value= \"0,20,0,0\" /> <On Platform= \"Android\" Value= \"0,0,0,0\" /> </OnPlatform.Platforms> </StackLayout.Margin> <Label Text= \"This will be 20 points below the status bar on iOS\" /> </StackLayout> The above can be simplified since the default Content property for OnPlatform is Platforms . We can skip the Platforms entirely as follows: <StackLayout> <StackLayout.Margin> <OnPlatform x:TypeArguments= \"Thickness\" > <On Platform= \"iOS\" Value= \"0,20,0,0\" /> <On Platform= \"Android\" Value= \"0,0,0,0\" /> </OnPlatform> </StackLayout.Margin> <Label Text= \"This will be 20 points below the status bar on iOS\" /> </StackLayout> Which can be simplified further by removing the Android specific line since we are not changing anything to: <StackLayout> <StackLayout.Margin> <OnPlatform x:TypeArguments= \"Thickness\" > <On Platform= \"iOS\" Value= \"0,20,0,0\" /> </OnPlatform> </StackLayout.Margin> <Label Text= \"This will be 20 points below the status bar on iOS\" /> </StackLayout> Since Margin is a complex structure, we open a tag for it in XAMl beginning with <StackLayout.Margin> and now specify that we need to apply different values for each platform using the OnPlatform . We also specify what type of value we need to apply, in this case margin is of type Thickness . We then define the values for each platform, in this case we only wanted to apply for iOS, the other platforms would be on default 0. We can also use a shortened syntax to apply the margin, e.g. to apply a margin of 20 on iOS we can do the following : <StackLayout> <StackLayout.Margin> <OnPlatform x:TypeArguments= \"Thickness\" iOS= \"20\" /> </StackLayout.Margin> <Label Text= \"This will be 20 points below the status bar on iOS\" /> </StackLayout> We can use the same syntax to apply for Android and iOS both as follows : <StackLayout> <StackLayout.Margin> <OnPlatform x:TypeArguments= \"Thickness\" iOS= \"20\" Android= \"20\" /> </StackLayout.Margin> <Label Text= \"This will be 20 points below the status bar on iOS\" /> </StackLayout> Apply Different Margins for each Platform \u00b6 If we wanted to apply different margins for Android and iOS, we could have done the following : <StackLayout> <StackLayout.Margin> <OnPlatform x:TypeArguments= \"Thickness\" > <On Platform= \"iOS\" Value= \"20\" /> <On Platform= \"Android\" Value= \"10\" /> </OnPlatform> </StackLayout.Margin> </StackLayout> The margin would be 20 for iOS and 10 for Android for all the sides. Change Margin with Code \u00b6 In code, we would use a switch statement and check the Device.RuntimePlatform as follows : switch ( Device . RuntimePlatform ){ case Device . iOS : Content . Margin = 20 ; break ; case Device . Android : Content . Margin = 10 ; break ; }","title":"Platform Specifics"},{"location":"xaml/on-platform/#platform-specific","text":"When you want to render your UI differently on each platform you can use the OnPlatform XAML extension to run code for Android, iOS and UWP. An example is, on iOS, the content shows up right from the top and you might want to push it downwards 20 points, but on Android and UWP content is displayed after the status bar or tool.","title":"Platform Specific"},{"location":"xaml/on-platform/#apply-margin-per-platform","text":"Lets apply a 20 point margin for all platforms : <StackLayout Margin= \"0,20,0,0\" > <Label Text= \"This will be 20 points below the status bar on iOS\" /> </StackLayout> Margin is of type Thickness . The value are as follows : First zero - Left margin 20 - Top margin Third zero - Right margin Last zero - Bottom margin But we ideally want is to only apply the top margin only on iOS. To accomplish that we would use the OnPlatform property as follows : <StackLayout> <StackLayout.Margin> <OnPlatform.Platforms> <On Platform= \"iOS\" Value= \"0,20,0,0\" /> <On Platform= \"Android\" Value= \"0,0,0,0\" /> </OnPlatform.Platforms> </StackLayout.Margin> <Label Text= \"This will be 20 points below the status bar on iOS\" /> </StackLayout> The above can be simplified since the default Content property for OnPlatform is Platforms . We can skip the Platforms entirely as follows: <StackLayout> <StackLayout.Margin> <OnPlatform x:TypeArguments= \"Thickness\" > <On Platform= \"iOS\" Value= \"0,20,0,0\" /> <On Platform= \"Android\" Value= \"0,0,0,0\" /> </OnPlatform> </StackLayout.Margin> <Label Text= \"This will be 20 points below the status bar on iOS\" /> </StackLayout> Which can be simplified further by removing the Android specific line since we are not changing anything to: <StackLayout> <StackLayout.Margin> <OnPlatform x:TypeArguments= \"Thickness\" > <On Platform= \"iOS\" Value= \"0,20,0,0\" /> </OnPlatform> </StackLayout.Margin> <Label Text= \"This will be 20 points below the status bar on iOS\" /> </StackLayout> Since Margin is a complex structure, we open a tag for it in XAMl beginning with <StackLayout.Margin> and now specify that we need to apply different values for each platform using the OnPlatform . We also specify what type of value we need to apply, in this case margin is of type Thickness . We then define the values for each platform, in this case we only wanted to apply for iOS, the other platforms would be on default 0. We can also use a shortened syntax to apply the margin, e.g. to apply a margin of 20 on iOS we can do the following : <StackLayout> <StackLayout.Margin> <OnPlatform x:TypeArguments= \"Thickness\" iOS= \"20\" /> </StackLayout.Margin> <Label Text= \"This will be 20 points below the status bar on iOS\" /> </StackLayout> We can use the same syntax to apply for Android and iOS both as follows : <StackLayout> <StackLayout.Margin> <OnPlatform x:TypeArguments= \"Thickness\" iOS= \"20\" Android= \"20\" /> </StackLayout.Margin> <Label Text= \"This will be 20 points below the status bar on iOS\" /> </StackLayout>","title":"Apply Margin Per Platform"},{"location":"xaml/on-platform/#apply-different-margins-for-each-platform","text":"If we wanted to apply different margins for Android and iOS, we could have done the following : <StackLayout> <StackLayout.Margin> <OnPlatform x:TypeArguments= \"Thickness\" > <On Platform= \"iOS\" Value= \"20\" /> <On Platform= \"Android\" Value= \"10\" /> </OnPlatform> </StackLayout.Margin> </StackLayout> The margin would be 20 for iOS and 10 for Android for all the sides.","title":"Apply Different Margins for each Platform"},{"location":"xaml/on-platform/#change-margin-with-code","text":"In code, we would use a switch statement and check the Device.RuntimePlatform as follows : switch ( Device . RuntimePlatform ){ case Device . iOS : Content . Margin = 20 ; break ; case Device . Android : Content . Margin = 10 ; break ; }","title":"Change Margin with Code"},{"location":"xaml/xaml-markup-extensions/","text":"XAML Markup Extension \u00b6 The XAML markup extension adds additional functionality thats not defined in the standard XAML spec. x:Static \u00b6 The x:Static extension can be used to access any one of the following from XAML: a public static field a public static property a public constant field an enumeration member Referencing static fields \u00b6 We can reference any static fields, whether from the .net framework or our own code. In the sample below we will reference a static field from our own class : MonthsPage.cs namespace LayoutSample { public partial class MonthsPage : ContentPage { public static string [] Months = new []{ \"January\" , \"February\" , \"March\" , \"April\" , \"May\" , \"June\" , \"July\" , \"August\" , \"September\" , \"October\" , \"November\" , \"December\" }; public MonthsPage () { InitializeComponent (); } } } MonthsPage.xaml.cs <? xml version = \"1.0\" encoding = \"UTF-8\" ?> < ContentPage xmlns = \"http://xamarin.com/schemas/2014/forms\" xmlns : x = \"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns : local = \"clr-namespace:LayoutSample\" x : Class = \"LayoutSample.MonthsPage\" > < ContentPage . Content > < ListView ItemsSource = \"{x:Static local:MonthsPage.Months}\" /> </ ContentPage . Content > </ ContentPage > Note To refer to the static member, Months we first have to define the namespace in which the member is found. We define the namespace as follows xmlns:local=\"clr-namespace:LayoutSample\" . We can now use the x:Static extension to refer to the static property Months defined in the MonthsPage . Add a blank space to a label We are going to use the Environment.NewLine defined in the System class to add a newline to the contents of the label. <?xml version=\"1.0\" encoding=\"UTF-8\"?> <ContentPage xmlns= \"http://xamarin.com/schemas/2014/forms\" xmlns:x= \"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:sys= \"clr-namespace:System;assembly=mscorlib\" x:Class= \"DataBindingDemo.SharedResources.MarkupExtensionPage\" > <ContentPage.Content> <Label> <Label.FormattedText> <FormattedString> <Span Text= \"I am the first line\" /> <Span Text= \"{x:Static sys:Environment.NewLine}\" /> <Span Text= \"{x:Static sys:Environment.NewLine}\" /> <Span Text= \"am separated by a new line\" /> </FormattedString> </Label.FormattedText> </Label> </ContentPage.Content> </ContentPage> We define the namespace for System using the xmlns:sys=\"clr-namespace:System;assembly=mscorlib\" . Since the property NewLine is static, we can use it in the Span with x:Static extension by using <Span Text=\"{x:Static sys:Environment.NewLine}\" /> . StaticResource Markup Extension \u00b6 The StaticResource is XAML markup extension is used to retrieve objects defined in the ResourceDictionary . We can use the ResourceDictionary to keep arbitrary objects referenced by a key. In the following example, we define a color resource and double resource. We use the keys when defining the resources. We can then later on use the StaticResource to retrieve the object by the key. <ContentPage.Resources> <ResourceDictionary> <Color x:Key= \"ColorPrimary\" > #ff9900 </Color> <x:Double x:Key= \"BorderSize\" > 1 </x:Double> </ResourceDictionary> </ContentPage.Resources> Use the color resource defined as follows : <Button Text=\"Login\" BorderColor=\"{StaticResource ColorPrimary}\" BorderWidth=\"{StaticResource BorderSize}\" /> Platform Specific Keys \u00b6 We can define keys that should be only be available on a specific platform using the OnPlatform . Since the OnPlatform is a generic object, we will need to specify the x:TypeArguments . <ResourceDictionary> <OnPlatform x:Key= \"PaddingiOS\" x:TypeArguments= \"Thickness\" iOS= \"0,20,0,0\" /> </ResourceDictionary> The object will only be available on iOS, and we can use it the same way. <StackLayout Padding= \"{x:StaticResource PaddingiOS}\" > </StackLayout> Accessing the Resources in Code \u00b6 We can access the objects defined in the ResourceDictionary by accessing them using the Resources property. Since its a dictionary, we can use the key to retrieve the object. <Application xmlns= \"http://xamarin.com/schemas/2014/forms\" xmlns:x= \"http://schemas.microsoft.com/winfx/2009/xaml\" x:Class= \"DataBindingDemo.App\" > <Application.Resources> <ResourceDictionary> <Color x:Key= \"ColorPrimary\" > #CC0033 </Color> </ResourceDictionary> </Application.Resources> </Application> We have defined a color in the application resources. The resources defined in the application resources will be available anywhere in the app. We can use both XAML or code to access them. Let's retrieve the color and apply it to navigation bar : MainPage = new NavigationPage ( new MainTabsPage ()) { BarBackgroundColor = ( Color ) Resources [ \"ColorPrimary\" ], BarTextColor = Color . White }; Since we know the resource object is type color, we were bold as cast it to the Color class. DynamicResource XAML Markup Extension \u00b6 The DynamicResource extension is similar to the StaticResource extension with one difference, it maintains a reference to the object. If the resource changes, then the updates are reflected. If we have the following in the resource dictionary : <ResourceDictionary> <x:String x:Key= \"CurrentDate\" > Will show a date if accessed dynamically </x:String> </ResourceDictionary> and then use the StatiResource and DynamicResource to access the same key, you will notice that the one accessed using the DynamicResource will update since we have a timer running every second : <Label Text=\"{StaticResource CurrentDate}\" /> <Label Text=\"{DynamicResource CurrentDate}\" /> and in code we update the resource : Device . StartTimer ( TimeSpan . FromSeconds ( 1 ), () => { Resources [ \"CurrentDate\" ] = DateTime . Now . ToString ( \"hh:mm:ss\" ); return true ; });","title":"XAML Mark Extension"},{"location":"xaml/xaml-markup-extensions/#xaml-markup-extension","text":"The XAML markup extension adds additional functionality thats not defined in the standard XAML spec.","title":"XAML Markup Extension"},{"location":"xaml/xaml-markup-extensions/#xstatic","text":"The x:Static extension can be used to access any one of the following from XAML: a public static field a public static property a public constant field an enumeration member","title":"x:Static"},{"location":"xaml/xaml-markup-extensions/#referencing-static-fields","text":"We can reference any static fields, whether from the .net framework or our own code. In the sample below we will reference a static field from our own class : MonthsPage.cs namespace LayoutSample { public partial class MonthsPage : ContentPage { public static string [] Months = new []{ \"January\" , \"February\" , \"March\" , \"April\" , \"May\" , \"June\" , \"July\" , \"August\" , \"September\" , \"October\" , \"November\" , \"December\" }; public MonthsPage () { InitializeComponent (); } } } MonthsPage.xaml.cs <? xml version = \"1.0\" encoding = \"UTF-8\" ?> < ContentPage xmlns = \"http://xamarin.com/schemas/2014/forms\" xmlns : x = \"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns : local = \"clr-namespace:LayoutSample\" x : Class = \"LayoutSample.MonthsPage\" > < ContentPage . Content > < ListView ItemsSource = \"{x:Static local:MonthsPage.Months}\" /> </ ContentPage . Content > </ ContentPage > Note To refer to the static member, Months we first have to define the namespace in which the member is found. We define the namespace as follows xmlns:local=\"clr-namespace:LayoutSample\" . We can now use the x:Static extension to refer to the static property Months defined in the MonthsPage . Add a blank space to a label We are going to use the Environment.NewLine defined in the System class to add a newline to the contents of the label. <?xml version=\"1.0\" encoding=\"UTF-8\"?> <ContentPage xmlns= \"http://xamarin.com/schemas/2014/forms\" xmlns:x= \"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:sys= \"clr-namespace:System;assembly=mscorlib\" x:Class= \"DataBindingDemo.SharedResources.MarkupExtensionPage\" > <ContentPage.Content> <Label> <Label.FormattedText> <FormattedString> <Span Text= \"I am the first line\" /> <Span Text= \"{x:Static sys:Environment.NewLine}\" /> <Span Text= \"{x:Static sys:Environment.NewLine}\" /> <Span Text= \"am separated by a new line\" /> </FormattedString> </Label.FormattedText> </Label> </ContentPage.Content> </ContentPage> We define the namespace for System using the xmlns:sys=\"clr-namespace:System;assembly=mscorlib\" . Since the property NewLine is static, we can use it in the Span with x:Static extension by using <Span Text=\"{x:Static sys:Environment.NewLine}\" /> .","title":"Referencing static fields"},{"location":"xaml/xaml-markup-extensions/#staticresource-markup-extension","text":"The StaticResource is XAML markup extension is used to retrieve objects defined in the ResourceDictionary . We can use the ResourceDictionary to keep arbitrary objects referenced by a key. In the following example, we define a color resource and double resource. We use the keys when defining the resources. We can then later on use the StaticResource to retrieve the object by the key. <ContentPage.Resources> <ResourceDictionary> <Color x:Key= \"ColorPrimary\" > #ff9900 </Color> <x:Double x:Key= \"BorderSize\" > 1 </x:Double> </ResourceDictionary> </ContentPage.Resources> Use the color resource defined as follows : <Button Text=\"Login\" BorderColor=\"{StaticResource ColorPrimary}\" BorderWidth=\"{StaticResource BorderSize}\" />","title":"StaticResource Markup Extension"},{"location":"xaml/xaml-markup-extensions/#platform-specific-keys","text":"We can define keys that should be only be available on a specific platform using the OnPlatform . Since the OnPlatform is a generic object, we will need to specify the x:TypeArguments . <ResourceDictionary> <OnPlatform x:Key= \"PaddingiOS\" x:TypeArguments= \"Thickness\" iOS= \"0,20,0,0\" /> </ResourceDictionary> The object will only be available on iOS, and we can use it the same way. <StackLayout Padding= \"{x:StaticResource PaddingiOS}\" > </StackLayout>","title":"Platform Specific Keys"},{"location":"xaml/xaml-markup-extensions/#accessing-the-resources-in-code","text":"We can access the objects defined in the ResourceDictionary by accessing them using the Resources property. Since its a dictionary, we can use the key to retrieve the object. <Application xmlns= \"http://xamarin.com/schemas/2014/forms\" xmlns:x= \"http://schemas.microsoft.com/winfx/2009/xaml\" x:Class= \"DataBindingDemo.App\" > <Application.Resources> <ResourceDictionary> <Color x:Key= \"ColorPrimary\" > #CC0033 </Color> </ResourceDictionary> </Application.Resources> </Application> We have defined a color in the application resources. The resources defined in the application resources will be available anywhere in the app. We can use both XAML or code to access them. Let's retrieve the color and apply it to navigation bar : MainPage = new NavigationPage ( new MainTabsPage ()) { BarBackgroundColor = ( Color ) Resources [ \"ColorPrimary\" ], BarTextColor = Color . White }; Since we know the resource object is type color, we were bold as cast it to the Color class.","title":"Accessing the Resources in Code"},{"location":"xaml/xaml-markup-extensions/#dynamicresource-xaml-markup-extension","text":"The DynamicResource extension is similar to the StaticResource extension with one difference, it maintains a reference to the object. If the resource changes, then the updates are reflected. If we have the following in the resource dictionary : <ResourceDictionary> <x:String x:Key= \"CurrentDate\" > Will show a date if accessed dynamically </x:String> </ResourceDictionary> and then use the StatiResource and DynamicResource to access the same key, you will notice that the one accessed using the DynamicResource will update since we have a timer running every second : <Label Text=\"{StaticResource CurrentDate}\" /> <Label Text=\"{DynamicResource CurrentDate}\" /> and in code we update the resource : Device . StartTimer ( TimeSpan . FromSeconds ( 1 ), () => { Resources [ \"CurrentDate\" ] = DateTime . Now . ToString ( \"hh:mm:ss\" ); return true ; });","title":"DynamicResource XAML Markup Extension"}]}